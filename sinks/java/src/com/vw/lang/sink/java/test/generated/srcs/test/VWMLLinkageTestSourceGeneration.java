/** 
*  This code was generated by VWML processor 
*  Description: Test of source generation process 
*  Author: ogibayev 
*  Date  : 01-01-01 
*/

package com.vw.lang.sink.java.test.generated.srcs.test;

import com.vw.lang.sink.java.VWMLObjectsRepository;
import com.vw.lang.sink.java.VWMLObject;
import java.util.HashMap;
import java.util.Map;
import com.vw.lang.sink.java.entity.VWMLEntity;
import com.vw.lang.sink.java.operations.VWMLOperationsCode;
import com.vw.lang.sink.java.operations.VWMLOperation;

public class VWMLLinkageTestSourceGeneration {

	private static class VWMLLinkWrap { 
		private Object id; 
		private Object linkedId;

		public VWMLLinkWrap(Object id, Object linkedId) {
			super();
			this.id = id;
			this.linkedId = linkedId;
		}

		public Object getId() {
			return id;
		}

		public Object getLinkedId() {
			return linkedId;
		}
	}

	private VWMLLinkWrap[] linkedObjectPairs = {
		new VWMLLinkWrap("a", "(b c d)"),
		new VWMLLinkWrap("a", "x"),
		new VWMLLinkWrap("(f)", "x"),
		new VWMLLinkWrap("(f)", "(b c d)"),
		new VWMLLinkWrap("a", "(f)")
	};

	private VWMLLinkWrap[] interpretedObjectPairs = {
		new VWMLLinkWrap("a", "(a1 a2 a3)"),
		new VWMLLinkWrap("x", "(x1 x2 x3)"),
		new VWMLLinkWrap("(a1 a2 a3)", "true"),
		new VWMLLinkWrap("(x1 x2 x3)", "false")
	};

	private Map<Object, String[]> appliedOperations = new HashMap<Object, String[]>() {
		{put("a", new String[] {"~","Join"});}
		{put("(f)", new String[] {"~","First"});}
	};

	public void linkEntities() throws Exception {
		buildLinkingAssociation();
		buildInterpretingAssociation();
		buildOperationsAssociation();
	}

	protected void buildLinkingAssociation() throws Exception {
		for(VWMLLinkWrap obj : linkedObjectPairs) {
			VWMLObject entity = getEntityById(obj.getId());
			VWMLObject linkedEntity = getEntityById(obj.getLinkedId());
			entity.link(linkedEntity);
		}

	}

	protected void buildInterpretingAssociation() throws Exception {
		for(VWMLLinkWrap obj : interpretedObjectPairs) {
			VWMLEntity entity = (VWMLEntity)getEntityById(obj.getId());
			VWMLEntity linkedEntity = (VWMLEntity)getEntityById(obj.getLinkedId());
			entity.setInterpreting(linkedEntity);
		}

	}

	protected void buildOperationsAssociation() throws Exception {
		for(Object id : appliedOperations.keySet()) {
			String[] ops = appliedOperations.get(id);
			VWMLEntity entity = (VWMLEntity)getEntityById(id);
			for(String op : ops) {
				VWMLOperationsCode opCode = VWMLOperationsCode.fromValue(op);
				if (opCode == VWMLOperationsCode.OPNOP) {
					throw new Exception("invalid operation '" + op + "'");
				}
				entity.addOperation(new VWMLOperation(opCode));
			}
		}
	}

	private VWMLObject getEntityById(Object id) throws Exception {
		VWMLObject entity = VWMLObjectsRepository.instance().get(id);
		if (entity == null) {
			throw new Exception("unrecognized entity '" + id + "'");
		}
		return entity;
	}

}
