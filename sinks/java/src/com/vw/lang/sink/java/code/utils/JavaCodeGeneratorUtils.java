package com.vw.lang.sink.java.code.utils;

import java.util.List;

import com.vw.lang.sink.ICodeGenerator.StartModuleProps;
import com.vw.lang.sink.java.code.JavaCodeGenerator.JavaModuleStartProps;

public class JavaCodeGeneratorUtils {

	private static String s_classStartDef = "public class %s {";
	private static String s_classEndDef = "}";
	private static String s_caption = "/** \r\n*  This code was generated by VWML processor \r\n*  Description: %s \r\n*  Author: %s \r\n*  Date  : %s \r\n*/";

	
	/**
	 * Returns module's caption constructed from module's properties
	 * @param props
	 * @return
	 */
	public static String prepareCaption(StartModuleProps props) throws Exception {
		JavaModuleStartProps modProps = (JavaModuleStartProps)props;		
		return String.format(s_caption, modProps.getDescription(), modProps.getAuthor(), modProps.getDate());
	}
	
	public static String generateClassName(String suffix) {
		return "VWML" + suffix;
	}
	
	public static String generateClassDef(String prefix, String suffix, JavaModuleStartProps modProps) {
		return String.format(s_classStartDef, generateClassName(prefix + JavaCodeGeneratorUtils.capitalizeFirstLetter(modProps.getModuleName())) + suffix) + "\r\n";
	}
	

	public static String capitalizeFirstLetter(String original){
	    if(original.length() == 0)
	        return original;
	    return original.substring(0, 1).toUpperCase() + original.substring(1);
	}

	public static String getS_classEndDef() {
		return s_classEndDef;
	}
	
	public static String generateStringStaticArrayAsString(String[] array) {
		boolean firstIteration = true;
		if (array == null) {
			return null;
		}
		String arrayAsString = "new String[] {";
		for(String item : array) {
			if (!firstIteration) {
				arrayAsString += ", ";
			}
			arrayAsString += item;
			firstIteration = false;
		}
		arrayAsString += "};";
		return arrayAsString;
	}
	
	public static String generateObjectsDefinition(String objName, List<Object> store) {
		boolean ft = true;
		String list = "\tprivate String[] " + objName + " = {";
		for(Object obj : store) {
			if (!ft) {
				list += ",";
			}
			list += "\r\n\t\t\"" + obj + "\"";
			ft = false;
		}
		list += "\r\n\t};\r\n\r\n";
		return list;
	}	
}
