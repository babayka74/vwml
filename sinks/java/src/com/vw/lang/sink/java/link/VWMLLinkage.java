package com.vw.lang.sink.java.link;

import java.util.ArrayList;
import java.util.List;

import com.vw.lang.sink.entity.InterpretationOfUndefinedEntityStrategyId;
import com.vw.lang.sink.java.VWMLObject;
import com.vw.lang.sink.java.VWMLObjectsRepository;
import com.vw.lang.sink.java.entity.VWMLEntity;

/**
 * Each module's linking component (generated by processor) implements this interface
 * @author ogibayev
 *
 */
public class VWMLLinkage {

	private List<VWMLEntity> modLifeTerms = new ArrayList<VWMLEntity>();
	
	/**
	 * Adds life term
	 * @param entityAsTerm
	 */
	public void addLifeTerm(VWMLEntity entityAsTerm) {
		modLifeTerms.add(entityAsTerm);
	}
	
	public List<VWMLEntity> getModLifeTerms() {
		return modLifeTerms;
	}

	/**
	 * Overridden by module's linkage
	 * @return
	 */
	public InterpretationOfUndefinedEntityStrategyId getUndefinedEntityInterpretationStrategyId() {
		return InterpretationOfUndefinedEntityStrategyId.STRICT;
	}
	
	/**
	 * Overridden by module's linkage
	 * @return
	 */
	public IVWMLLinkVisitor getPreprocessorStructureVisualizer() {
		return null;
	}
	
	/**
	 * Overridden by module's linkage
	 * @param id
	 * @return
	 * @throws Exception
	 */
	public VWMLObject interpretUndefinedEntity(Object id) throws Exception {
		throw new Exception("must be implemented by module's linkage");
	}
	
	/**
	 * Overridden by module's linkage
	 * @return
	 */
	public int getEntityHistorySize() {
		return 0;
	}
	
	/**
	 * Interprets object identified by id as object identified by interpretingId
	 * @param id
	 * @param interpretingId
	 * @param context
	 * @throws Exception
	 */
	public void interpretAs(Object id, Object interpretingId, String context) throws Exception {
		VWMLEntity obj = (VWMLEntity)VWMLObjectsRepository.instance().get(id, context);
		VWMLEntity interpretingObj = (VWMLEntity)VWMLObjectsRepository.instance().get(interpretingId, context);
		obj.setInterpreting(interpretingObj);
	}
}
