options {
	language=__java__ {
  		package = "com.win.game.puzzle.model.vwml.puzzleR2"
  		path = "c:\var\vwml/puzzleR2/src"
  		author = "Groozman M.Z."
		project_name = "puzzleR2Proj"
  		description = "Antagonistic puzzle game"
		beyond {
			fringe communication ias (
				out ias "com.win.game.puzzleR2.model.fringe.gate.async.console.AsyncConsole"
				in ias "com.win.game.puzzleR2.model.fringe.gate.async.console.AsyncConsole"
			)
			fringe services ias (
				math ias "com.vw.lang.beyond.java.fringe.gate.math.Math"
				config ias "com.win.game.puzzleR2.model.fringe.gate.config.ConfigurationLoader"
			)
		}
		conflictring {
			"CroupierAssistant.CroupierAssistantLifeStep.(AllPlayersLeft false).(PlayerExist true).LeavePlayer" conflicts ("Croupier.CroupierLifeStep.(ContinueAuction true).(ActiveCommand waitForBetFromPlayers).CheckStatusOfBetCollection")
		}
	}
}

module puzzleR2 {
	/*
		EW represents external world data which can be loaded during game's 
		initialization phase
	*/
	Ew ias (
		FreePlaces ias ();
                RestPuzzles ias ();
                Correspondence ias ();
		Command ias wait;
		ReadyToStart ias false;
		Input ias communication.in.read;
		Output ias communication.in.write;
		ConfigLoader ias services.config.load;
		IncNumberOfPlayers ias services.math.inc;
		DecNumberOfPlayers ias services.math.dec;
		Compare ias services.math.compare;
		DecreaseCredit ias services.math.substr;
		PlayersOnAuction ias 2;
		NoPlayers ias 0;
		PlayerCredit ias 100;

		EwLifeStep ias (
			/* waiting for command from assistant or croupier */
			(ew wait) ias (
 				EwLifeStep~ Exe
			);
			/* load configuration */
			(ew loadConfig),(ew reloadConfig) ias (
				(FreePlaces ((freePlaces) ConfigLoader~) Do)^
				(RestPuzzles ((restPuzzles) ConfigLoader~) Do)^
				(Correspondence ((correspondence) ConfigLoader~) Do)^
				((Configuration loaded) Ew.Output~) Do
				(ReadyToStart true)^
				(Command wait)^
				EwLifeStep~ Exe
			);
			(ew exit) ias doNothing;
			(ew Command~)~ Exe
		);
		/* Croupier assistant lifeterm */
		source lifeterm = EwLifeStep~ Exe
	);

	CroupierAssistant ias (
		/* available commands which can be received from external world  */
		PlayerCommands ias (leave join bet exit);
		/* available commands which can be received from internal world */
		InternalCommands ias (startNewAuction);
		InternalCommand ias none;
		/* read command */
		Command ias nil;
		CommandId ias nil;
		PlayerId ias nil;

		/* check if player made bet */
		FindPlayersBet ias (
			HasPlayerAlreadyMadeBet ias false;
			PlayerBet ias nil;
			CheckIfPlayerHasAlreadyMadeBet ias (
				B ias $;
				(PlayerMadeBet false) ias doNothing;
				(PlayerMadeBet true) ias (
					(HasPlayerAlreadyMadeBet true)^
					(PlayerBet B~~)^ 
					/* signals to 'ForEach' to stop iteration */
					($ doNothing)^
				);
				(PlayerMadeBet ((B~~)First PlayerId~) Ident)~ Exe
			);
			(Croupier.LastPlayersBets~ CheckIfPlayerHasAlreadyMadeBet~) ForEach
		);		
		/* Stops auction - all players should leave auction */
		StopAuctionButNotClose ias (
			NotifyPlayersAuctionIsClosed ias (
				/* $ is synthetic entity which is interpreted as iterated component of complex entity on operation ForEach */
				Id ias $;
				/* notifies player identified by complex entity '(Player Id~~) */
				((Player Id~~)->AuctionStoppedByAssistantCommand true)^
				((Croupier closes auction and tells to player Id~~ to leave auction) Ew.Output~) Do
			);
			(Auction.Players~ NotifyPlayersAuctionIsClosed~) ForEach
			/* master player, with id == null, (other players are cloned from it) should be stopped also */
			((Player)->AuctionStoppedByAssistantCommand true)^
			(Croupier.AuctionStarted false)^
		);
		/* Assistant asks to stop auction immidiately */
		ForceToStopAuction ias (
			StopAuctionButNotClose~ Exe
			(Croupier.ForceToCloseAuction true)^
			(Ew.Command exit)^ 
		);
		/* Starts auction according to conditions */
		StartAuctionByCondition ias (
			DefaultActionOnAuctionNotStarted ias (
		        	((Assistant reports that auction can not be started due to lack of players) Ew.Output~) Do
				1025 Bp
			);
			DoNotDoAnyActionOnAuctionNotStarted ias doNothing;
			ActionOnAuctionNotStarted ias DoNotDoAnyActionOnAuctionNotStarted;
			/* Auction should be started */
			(StartAuction true false) ias (
				/* initializing puzzle */
				InitializePuzzleCounter ias (
					(($~)Last Auction.ActivePlayers~)^
				);
				(Ew.RestPuzzles~ InitializePuzzleCounter~) ForEach
				(Croupier.AuctionStarted true)^
				((Croupier starts auction) Ew.Output~) Do
			);
			/* do not do anything */
			(StartAuction true true),(StartAuction false false) ias ActionOnAuctionNotStarted~~ Exe;

			(StartAuction (Auction.ActivePlayers~ Ew.PlayersOnAuction~)Ident Croupier.AuctionStarted~)~ Exe
			(ActionOnAuctionNotStarted DoNotDoAnyActionOnAuctionNotStarted)^
		);
		/* Stops auction according to conditions */
		StopAuctionByCondition ias (
			/* Auction should be stopped */
			(StopAuction true true) ias (
				(Croupier.AuctionStarted false)^
				Croupier.ResetAuctionProps~ Exe
				((Croupier stops auction) Ew.Output~) Do
			);
			/* do not do anything */
			(StopAuction false false),(StopAuction false true),(StopAuction true false) ias doNothing;
			
			(StopAuction (Auction.ActivePlayers~ Ew.NoPlayers~)Ident Croupier.AuctionStarted~)~ Exe
		);
		CroupierAssistantLifeStep ias (
			(AllPlayersLeft false) ias (
				/* player exist, try again */
				(PlayerExist false) ias (
					/* notify about invalid or unknown player */
					((Assistant reports that player PlayerId~ is unknown) Ew.Output~) Do
					/* waiting for correct player id */
					CroupierAssistantLifeStep~ Exe
				);
				/* player leaves */
				(PlayerExist true) ias (
					/* lookups for player which left and removes its bet, if exist */
					/* notifies rest players about left player */
					NotifyPlayersLeftPlayer ias (
						/* $ is synthetic entity which is interpreted as iterated component of complex entity on operation ForEach */
						Id ias $;
						/* notifies player identified by complex entity '(Player Id~~) */
						((Assistant notifies player Id~~ about left player PlayerId~) Ew.Output~) Do
					);
					((Assistant removes player PlayerId~ from auction) Ew.Output~) Do
					LeavePlayer [
						/* decrements number of players */
						(Auction.ActivePlayers ((Auction.ActivePlayers~) Ew.DecNumberOfPlayers~) Do)^
						/* removes player from players group */
						(Auction.Players (Auction.Players~ (PlayerId~)) Substruct)^
						/* notifies all players in 'real world' about left player */
						(Auction.Players~ NotifyPlayersLeftPlayer~) ForEach
						FindPlayersBet~ Exe
						(Croupier.LastPlayersBets (Croupier.LastPlayersBets~ (PlayerId~ FindPlayersBet.PlayerBet~))Substruct)^
						((Assistant reports about bets Croupier.LastPlayersBets~) Ew.Output~) Do
					LeavePlayer ]
					((Player PlayerId~)->AuctionStoppedByAssistantCommand true)^
					/* notify Croupier; may be auction should be stopped */
					StopAuctionByCondition~ Exe
					/* next assistant's step */
					CroupierAssistantLifeStep~ Exe
				);
				/* checks if player with such id has already been registered */
				(PlayerExist (Auction.Players~ PlayerId~) In)~ Exe
			);
			/* here are no any player 'on board' */
			(AllPlayersLeft true) ias (
				((Assistant reports that all Ew.PlayersOnAuction~ players have left) Ew.Output~) Do
				CroupierAssistantLifeStep~ Exe
			);
			/* waiting for required number of players */
			(AllPlayersJoined false) ias (
				/* player exist, try again */
				(PlayerExist true) ias (
					/* notify about duplicated id */
					((Assistant reports that player PlayerId~ has already been registered) Ew.Output~) Do
				);
				/* new player  */
				(PlayerExist false) ias (
					NotifyPlayersJoinPlayer ias (
						/* $ is synthetic entity which is interpreted as iterated component of complex entity on operation ForEach */
						Id ias $;
						/* notifies player identified by complex entity '(Player Id~~) */
						((Assistant notifies player Id~~ about joined player PlayerId~) Ew.Output~) Do
					);
					((Assistant joins player PlayerId~ to auction) Ew.Output~) Do
					JoinPlayer [
						/* increments number of players */
						(Auction.ActivePlayers ((Auction.ActivePlayers~) Ew.IncNumberOfPlayers~) Do)^
						/* notifies all players in 'real world' about new player */
						(Auction.Players~ NotifyPlayersJoinPlayer~) ForEach
						/* player joined to players group; now it should be cloned; cloned Player is run automaticaly */
					        (Player (Player PlayerId~)) Clone
						/* join player to players group */
						(Auction.Players (Auction.Players~ PlayerId~) Join)^
					JoinPlayer ]
					/* notify Croupier; may be auction should be started */
					StartAuctionByCondition~ Exe
				);
				/* checks if player with such id has already been registered */
				(PlayerExist (Auction.Players~ PlayerId~) In)~ Exe
				/* waiting for correct player id */
				CroupierAssistantLifeStep~ Exe
			);
			/* all players 'on board' */
			(AllPlayersJoined true) ias (
				((Assistant reports that all Ew.PlayersOnAuction~ players have been registered and player PlayerId~ rejected) Ew.Output~) Do
				CroupierAssistantLifeStep~ Exe
			);
			/* no available command; waiting */
			(WaitForCommand true) ias (
				CroupierAssistantLifeStep~ Exe
			);
			/* some command received and should be processed */
			(WaitForCommand false) ias (
				/* wrong command  */
				(ProcessCommand false) ias (
					((Assistant reports about unknown command) Ew.Output~) Do
					CroupierAssistantLifeStep~ Exe
				);
				/* command is going to be processed */
				(ProcessCommand true) ias (
					leave ias (
						(AllPlayersLeft (Auction.ActivePlayers~ Ew.NoPlayers~) Ident)~ Exe
					);
					join ias (
						(AllPlayersJoined (Auction.ActivePlayers~ Ew.PlayersOnAuction~) Ident)~ Exe
					);
					bet ias (
						BetReceivingPermitted ias false;
						ReportAboutNonPermittedBetOperation ias (
							((Assistant reports that player PlayerId~ can bet after auction has been started) Ew.Output~) Do
						);
						(BetPermitted true true) ias (
							(PlayerExist true) ias (
								(DoNotAcceptPlayerBet true) ias (
									((Assistant reports that player PlayerId~ has already made bet) Ew.Output~) Do
									(FindPlayersBet.HasPlayerAlreadyMadeBet false)^
								);
								(DoNotAcceptPlayerBet false) ias (
									/* checks player credit */
									(BetCheckingResult 0),(BetCheckingResult 1) ias (
										AcceptBet [
                                                					(Croupier.LastPlayersBets (Croupier.LastPlayersBets~ (PlayerId~  AcceptedBet~))Join)^
											((Player PlayerId~)->Credit ((CurrentPlayerCredit~ AcceptedBet~) Ew.DecreaseCredit~) Do)^
										AcceptBet ]
										((Assistant reports that player PlayerId~ made bet AcceptedBet~) Ew.Output~) Do
									);
									(BetCheckingResult -1) ias (
										((Assistant reports that player PlayerId~ does not have enough credits) Ew.Output~) Do
									);
									/* checks whether player has enough resources (credit) */
									(CurrentPlayerCredit (Player PlayerId~)->Credit~)^
									(AcceptedBet (Command~)Last)^
									(BetCheckingResult ((CurrentPlayerCredit~ AcceptedBet~) Ew.Compare~) Do)~ Exe
								);
								/* checks if player has made bet */
								FindPlayersBet~ Exe
								(DoNotAcceptPlayerBet FindPlayersBet.HasPlayerAlreadyMadeBet~)~ Exe
							);
							(PlayerExist false) ias (
								((Assistant reports that player PlayerId~ can not bet since it was not participates in auction) Ew.Output~) Do
							);
							/* Check if player has joined to auction */
							(PlayerExist (Auction.Players~ PlayerId~)In)~ Exe
						);
						(BetPermitted false false),(BetPermitted false true),(BetPermitted true false) ias (
							ReportAboutNonPermittedBetOperation~ Exe
						);
						/* waiting for bet permission for bet processing (conflicts with BetPermitted) */
						WaitForBetPermition [
							(BetPermitted Croupier.PermitBet~)^
						WaitForBetPermition ]
						/* Check if bet is allowed; bet is allowed in case if auction started */
						(BetPermitted Croupier.AuctionStarted~ BetPermitted~)~ Exe
						/* waiting for correct player id */
						CroupierAssistantLifeStep~ Exe
					);
					exit ias (
						/* prompt before exiting... */
						((Assistant tells to Croupier to stop auction) Ew.Output~) Do
						ForceToStopAuction~ Exe
					);
					CommandId~~ Exe
				);
				/* decompose command by getting command id; command is complex entity (commandId commandData ...) */
				(CommandId (Command~) First)^
				(Command (Command~) Rest)^
				(PlayerId (Command~) First)^
				((Assistant reports about command CommandId~ for player PlayerId~) Ew.Output~) Do
				/* check if command is in list of available commands */
				(IsCommandInList (PlayerCommands~ CommandId~) In)^
				/* CommandId should be applied to appropriate context */
				(CommandId~ (ProcessCommand IsCommandInList~)) Context
				/* executes actions depend on commandId */
				(ProcessCommand IsCommandInList~)~ Exe
			);
			(Ready true) ias (
				/* waiting for command, in non-blocking manner */ 
				(Command (() Ew.Input~) Do)^
				(WaitForCommand (Command~ nil) Ident)~ Exe
			);
			(Ready false) ias (
				((waiting for ready state) Ew.Output~) Do
				CroupierAssistantLifeStep~ Exe
			);
			/* internal commands initiated by croupier or other entity have to be processed before any other commands */
			(ProcessInternalCommand true) ias (
				(internal startNewAuction) ias (
					(StartAuctionByCondition.ActionOnAuctionNotStarted StartAuctionByCondition.DefaultActionOnAuctionNotStarted)^
					StartAuctionByCondition~ Exe
					(InternalCommand none)^
				); 
				(internal InternalCommand~)~ Exe
			);
			(ProcessInternalCommand false) ias doNothing;
			(ProcessInternalCommand (InternalCommands~ InternalCommand~) In)~ Exe
			(Ready Ew.ReadyToStart~)~ Exe // TODO: should be sync
		);

		/* Croupier assistant lifeterm */
		source lifeterm = (
			((Assistant loads configuration of the auction) Ew.Output~) Do
			(Ew.Command loadConfig)^
			CroupierAssistantLifeStep~ Exe
		) Exe
	);

	Croupier ias (
		AuctionStarted ias false;
		ForceToCloseAuction ias false;
		AskAssistantAboutContinueAuction ias false;
		PermitBet ias false;
		/* available commands */
		Commands ias (selectCard permitBetOperation waitForBetFromPlayers announceWinner);
		/* current command  */
		Command ias selectCard;
		/* Last players' bet */
		LastPlayersBets ias ();	
		/* Croupier selects puzzle's card which is put up to auction  */
		PuzzleCard ias nil;
		/* last published card and its descriptor */
		PuzzleCardDescriptor ias nil;
		PublishedCard ias nil;
		/* Winner */
		Winner ias nil;
		/* Resets auction's properties */
		ResetAuctionProps ias (
			(PermitBet false)^
			(PublishedCard nil)^
			(Command selectCard)^
		);
		/* Croupier processes Assistant's commands */
		/* Croupier's life step */
		CroupierLifeStep ias (
			(ContinueAuction true) ias (
				(ActiveCommand selectCard) ias (
					(AllCardsSold true) ias (
						/* All cards have been sold */
						/* All users' bets should be reset also */
						(Croupier.LastPlayersBets ())^
						/* Auction stopped */
						(AuctionStarted false)^
						/* Croupier asks whether auction should be continued or no */
						((Croupier continues auction with new puzzle set) Ew.Output~) Do
						/* tells to Ew that configuration should be reloaded */
						(Ew.ReadyToStart false)^
						/* loads new puzzle */
						(Ew.Command reloadConfig)^
						/* this action will be executed in case if auction can't be started by some causes */
						(CroupierAssistant.InternalCommand startNewAuction)^
					);
					(AllCardsSold false) ias (
						/* Croupier takes random puzzle's card */
						(PuzzleCardDescriptor Ew.RestPuzzles~ Random)^
						(PublishedCard (PuzzleCardDescriptor~)First)^
						((Croupier selected card PublishedCard~ and it available for (PuzzleCardDescriptor~)Last~ times) Ew.Output~) Do
						/* selected card should be published to all players */
						CardPublishing [
							NotifyPlayersCardSelected ias (
								Id ias $;
								/* notifies player identified by complex entity '(Player Id~~) */
								((Player Id~~)->Card PublishedCard~)^
							);
							(Auction.Players~ NotifyPlayersCardSelected~) ForEach
						CardPublishing ]
						/* card was published to all players and next command is wait for players' bet */
						(Command permitBetOperation)^
					);
					(AllCardsSold (Ew.RestPuzzles~ ()) Ident)~ Exe
				);
				(ActiveCommand permitBetOperation) ias (
					/* conflicts with WaitForBetReceivingPermition */
					BetPermitted [
						(PermitBet true)^
					BetPermitted ]
					(Command waitForBetFromPlayers)^
				);
				(ActiveCommand waitForBetFromPlayers) ias (
					(AllBetsCollected false) ias doNothing;
					/* all bets collected, so winner should be announced */
				        (AllBetsCollected true) ias (
						(PermitBet false)^
						(Command announceWinner)^
					);
					CheckStatusOfBetCollection [
						(AllBetsCollected ((Croupier.LastPlayersBets~)Size Auction.ActivePlayers~) Ident)~ Exe
					CheckStatusOfBetCollection ]
				);
                              	(ActiveCommand announceWinner) ias (
					(RemoveCardFromStorage true) ias (
						((Card PuzzleCardDescriptor~ will be removed from puzzle set) Ew.Output~) Do
						(Ew.RestPuzzles (Ew.RestPuzzles~ (PuzzleCardDescriptor~))Substruct)^
					);
					(RemoveCardFromStorage false) ias (
						((PublishedCard~ will be available for PublishedCardCounter~~ times) Ew.Output~) Do
					);
					(OnePlayerStayesOnAuction true) ias (
						(Winner (Croupier.LastPlayersBets~)First First)^
						((Croupier announced winner Winner~ for card PublishedCard~) Ew.Output~) Do
					);
					(OnePlayerStayesOnAuction false) ias (
						
					);
					(OnePlayerStayesOnAuction ((Croupier.LastPlayersBets~)Size 1) Ident)~ Exe
					/* decrease card's counter which defines how many the cards, of this type, keep in the pool */
					(PublishedCardCounter (PuzzleCardDescriptor~)Last)^
					(PublishedCardCounter~ ((PublishedCardCounter~~) Ew.DecNumberOfPlayers~) Do)^
					/* checks whether card should be removed from storage or no */
					(RemoveCardFromStorage (PublishedCardCounter~~ 0) Ident)~ Exe
					ResetAuctionProps~ Exe
				);
				(ActiveCommand Command~)~ Exe
				(ContinueAuction AuctionStarted~)~ Exe
			);
			(ContinueAuction false) ias (
				(ForceToClose true) ias (
					ResetAuctionProps~ Exe
				);
				(ForceToClose false) ias (
					CroupierLifeStep~ Exe
				);
				(ForceToClose ForceToCloseAuction~)~ Exe
			);
			(ContinueAuction AuctionStarted~)~ Exe
		);
		/* Croupier lifeterm */
		source lifeterm = CroupierLifeStep~ Exe
	);

	Auction ias (
		/* number of active players  */
		ActivePlayers ias 0;
		/* initial players' list  */
		Players ias ();
	);

	Player ias (
		Id ias nil;
		Card ias nil;
		Credit ias 0;
		Bet ias 0;
		/* Player knows about joined and left players */
		JoinedPlayer ias nil;
		LeftPlayer ias nil;
		/* sets by croupier assistant to 'true' when auction should be stopped */
		AuctionStoppedByAssistantCommand ias false;

		PlayerLifeStep ias (
			(NonActive true) ias (
				(AuctionStopped true) ias (
					((Player Id~ left auction) Ew.Output~) Do
				);
				(AuctionStopped false) ias (
					PlayerLifeStep~ Exe
				);
				(AuctionStopped AuctionStoppedByAssistantCommand~)~ Exe
			);
		        (NonActive false) ias (
				(AuctionStopped true) ias (
					((Player Id~ left auction) Ew.Output~) Do
				);
				(AuctionStopped false) ias (
					500 Relax
					PlayerLifeStep~ Exe
				);
				(AuctionStopped AuctionStoppedByAssistantCommand~)~ Exe
			);
			(NonActive (Id~ nil)Ident)~ Exe
		);

		source lifeterm = (
					(Id CroupierAssistant.PlayerId~)^
					(Credit Ew.PlayerCredit~)^	
					PlayerLifeStep~ Exe
				) Exe
	);
}
