options {
	language=__java__ {
  		package = "com.win.game.maze.model.vwml.exampleCallP2"
  		path = "c:\var\vwml/exampleCallP2/src"
  		author = "Groozman M.Z."
		project_name = "exampleCallP2Proj"
  		description = "Example of CallP operation usage"
		beyond {
			fringe communication ias (
				out ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
				in ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
			)
			fringe services ias (
				math ias "com.vw.lang.beyond.java.fringe.gate.math.Math"
			)
		}
		conflictring {
			"{MagicWorld.Manager}.PropagateCommand.LockQueue" conflicts (
				"{MagicWorld.Player}.PlayerLifeStep.(emptyQ false).LockQueue"
			)
		}
	}
}

// include "../algorithms/DpfB/DpfB.vwml"

module exampleCallP2 {
	MagicWorld ias (
		Ew ias (
			Input ias communication.in.read;
			Output ias communication.in.write;
			VSum ias services.math.vsum;
		);
		Characters ias (
			/* simple game unit */
			Unit ias (
				LastProcessedCommand ias stay;
				LastProcessedCommandParams ias nil;
				/* unit receives commands in deferred manner */
				CommandQueue ias ();
				CommandDispatcher ias (
					Dispatch ias nil;
					(Handle exit) ias doNothing;
					(Handle stay) ias (	
						UnitLifeStep~ Exe
					);
					(Handle stop) ias (
						(LastProcessedCommand stay)^
						UnitLifeStep~ Exe
					);
					(Handle moveto) ias (
						1000 Relax
						UnitLifeStep~ Exe
					);
					(LastProcessedCommand (Dispatch~) First)^
					(LastProcessedCommandParams (Dispatch~) Rest)^
					(Handle LastProcessedCommand~)~ Exe
				);
				/* unit's lifestep */
				UnitLifeStep ias (
					(emptyQ true) ias (
						CommandDispatcher~ Exe
					);
					(emptyQ false) ias (
						(CommandDispatcher.Dispatch (CommandQueue~) First)^
						(CommandQueue (CommandQueue~) Rest)^
						CommandDispatcher~ Exe
					);
					(emptyQ (CommandQueue~ ()) Ident)~ Exe
				);

				lifeterm = (
					UnitLifeStep~ Exe
				) Exe
			);
		);
		Player ias (
			AvailableCommands ias (create destroy moveto);
			Id ias nil;
			CommandQueue ias ();
			CommandDispatcher ias (
				Dispatch ias nil;
				HandleCommand ias (
					(Handle create) ias (
						((The player Id~ creates unit) Ew.Output~) Do
						PlayerLifeStep~ Exe
					);
                                        (Handle destroy),(Handle moveto) ias (
						((The player Id~ executes other actions) Ew.Output~) Do
						PlayerLifeStep~ Exe
					);
					(Handle (Dispatch~ 0) Get)~ Exe
				);
				(RightCommand true) ias (
					HandleCommand~ Exe
				);
				(RightCommand false) ias (
					PlayerLifeStep~ Exe
				);
				((The player Id~ received command Dispatch~ to dispatch) Ew.Output~) Do
				(RightCommand (AvailableCommands~ (Dispatch~ 0) Get) In)~ Exe
			);
			/* Player's lifestep */
			PlayerLifeStep ias (
				(emptyQ true) ias (
					PlayerLifeStep~ Exe
				);
				(emptyQ false) ias (
					LockQueue [
						(CommandDispatcher.Dispatch (CommandQueue~) First)^
						(CommandQueue (CommandQueue~) Rest)^
					LockQueue ]
					CommandDispatcher~ Exe
				);
				(emptyQ (CommandQueue~ ()) Ident)~ Exe
			);
			lifeterm = (
				((The player Id~ was born) Ew.Output~) Do
				PlayerLifeStep~ Exe
			) Exe
		);
		Manager ias (
			Character ias nil;
			Id ias nil;
			UnitId ias nil;
			CommandId ias nil;
			Params ias nil;
			/* command is propagated to player */
			PropagateCommand ias (
				LockQueue [
					((Player Id~)->CommandQueue ((Player Id~)->CommandQueue~ ((CommandId~ UnitId~ Params~))) Join)^
				LockQueue ]
			);
			(ManagerCommand true) ias (
				(Command playeradd) ias (
					(Player.Id UnitId~)^
					(Player (Player UnitId~)) Born
				);
				((manager command CommandId~) Ew.Output~) Do
				(Command CommandId~)~ Exe
			);
			(ManagerCommand false) ias (
				((Not manager command propagating) Ew.Output~) Do
				/* passes for processing */
				PropagateCommand~ Exe
			);
			/* main loop where model waits for incoming commands and dispatches them */
			MainLoop ias (
				(WaitForCommand true) ias (
					MainLoop~ Exe
				);
				(WaitForCommand false) ias (
					/* decomposes incoming command */
					(Character (Command~ 0) Get)^
					(Id (Command~ 1) Get)^
					(CommandId (Command~ 2) Get)^
					(UnitId (Command~ 3) Get)^
					(Params (Command~ 4) Get)^
					(ManagerCommand (Character~ manager) Ident)~ Exe
					MainLoop~ Exe
				);
				/* waiting for command, in non-blocking manner */ 
				(Command (() Ew.Input~) Do)^
				(WaitForCommand (Command~ nil) Ident)~ Exe
			);	

			source lifeterm = (
				((The game manager started and waits for commands) Ew.Output~) Do
				MainLoop~ Exe
				3000 Relax
			) Exe
		);
	);
}
