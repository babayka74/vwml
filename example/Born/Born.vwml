options {
	language=__java__ {
  		package = "com.win.game.born.model.vwml.born"
  		path = "c:\var\vwml/born/src"
  		author = "Groozman M.Z."
		project_name = "Resources"
  		description = "Born simulation"
		beyond {
			fringe communication ias (
				out ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
				in ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
			)
			fringe services ias (
				math ias "com.vw.lang.beyond.java.fringe.gate.math.Math"
			)
		}
	}
}

module BornSimulation {
	SSS ias (
		k ias 7;
		((SSS output k k~) Ew.out~) Do
	);
	LLL ias (
		k ias 12;
		((LLL output k k~) Ew.out~) Do
	);

	(1 9) ias 12;
	(2 9) ias 17;
        (3 9) ias 18;
	(4 9) ias 19;
	(5 9) ias 20;

	Ew ias (
		out ias communication.out.write;
		in ias communication.in.read;
		inc ias services.math.inc;
		Id ias 0;
		W ias 8;
		QuartalsConf ias (
			Resources ias ((vodka 100 500 12 3000 100) (gold 10 500 10 4000 70) (food 50 500 9 5000 50) (viski 50 500 9 5000 50));
			SherifBribeRanges ias (300 200 300 100 200 400 500 100 200 100 100 50 10 20 40);
		);

		ModeInfo ias (
			ModeDeal ias deal;
		);

		Characters ias (
			(Unit 1) ias (
				Mode ias battle;
			);
		);

		AAA ias (
			(x 2) ias 9;
			k ias 0;
			m ias k;
			z ias (x 2);
			II ias ((II output k k~) Ew.out~) Do;
			I ias (
				((I output k k~) Ew.out~) Do
				(SSS.k 9)^
				SSS~ Exe
			);
		);

		Update2 ias (
			Account ias ();
			From ias ((kofe 900) (vino 300));
			AssociateByRt ias (
				(Type ($~ 0) Get)^
				((Rt Type~) ($~ 1) Get)^
				((Rt Type~) Account true) Context
				((Player G has resource (Rt Type~) (Rt Type~)~) Ew.out~) Do 
			);
			(From~ AssociateByRt~) ForEach
		);

		P1 ias (
			Id ias 0;
			(1 9) ias 13;
			Account ias (
				Withdraw ias (
					R ias vodka;
					(ByRtType (Rt R~))^
					((inside account ByRtType~~) Ew.out~) Do
				);
				(Test 1) ias (
					R ias viski;
					((inside test account R~) Ew.out~) Do
				);
				Withdraw~ Exe
			);

			Type ias 0;
			Quantum ias 0;
			Period ias 0;
			Quantums ias 0;
			OpenTime ias 0;
			DesiredOpenInfoPrice ias 0;

			ActiveModes ias (
				((mode is ModeInfo.ModeDeal~) Ew.out~) Do
			);

			Sherif ias (
				DesiredBribe ias 0;
				Resources ias (
					Result ias true;
				);
			);

			UpdateQ ias (
				QConf ias nil;
				BribeR ias nil;

				(Type (QConf~ 0) Get)^
				(Quantum (QConf~ 1) Get)^
                                (Period (QConf~ 2) Get)^
				(Quantums (QConf~ 3) Get)^
				(OpenTime (QConf~ 4) Get)^
				(DesiredOpenInfoPrice (QConf~ 5) Get)^
				(Sherif.DesiredBribe BribeR~)^
			);

			/* resource initialization point */
			Init ias (
				(UpdateQ.QConf Ew.QuartalsConf.Resources~ Random)^
				(UpdateQ.BribeR Ew.QuartalsConf.SherifBribeRanges~ Random)^
				UpdateQ~ Exe
				((The quartal Id~ initialized with configuration (Type~ Quantum~ Period~ Quantums~ OpenTime~ DesiredOpenInfoPrice~ Sherif.DesiredBribe~)) Ew.out~) Do					
			);

			Update ias (
				From ias ((vodka 100) (kola 200));
				AssociateByRt ias (
					(Type ($~ 0) Get)^
					((Rt Type~) ($~ 1) Get)^
					((Rt Type~) Account true) Context
					((Player Id~ has resource (Rt Type~) (Rt Type~)~) Ew.out~) Do 
				);
				(From~ AssociateByRt~) ForEach
			);

			Life ias (
				N ias 1;
				(Result true) ias (
					((Id is Id~ and result true) Ew.out~) Do
				);
				(Result false) ias 0;
				T ias (
					((Id is Id~ and param is $~) Ew.out~) Do
				);
				X ias (M.a M.b M.c M.d M.e);
				Y ias (1 2 3 4 5 6 7 8 9 10 11 12);
				XT ias (
					(($~~) Ew.out~) Do
				);
				M ias ((a Id~)^ (b Id~)^ (c Id~)^ (d Id~)^ (e Id~)^);
				ML ias ((Id~ $~) Ew.out~) Do;
				MT ias (
					$~ Exe
					((Id Id~ and M.a~ M.b~ M.c~ M.d~ M.e~) Ew.out~) Do
					(X~ XT~) ForEach
				);
				((I am here Id~) Ew.out~) Do
				(Result Sherif.Resources.Result~)~ Exe
				Update2~ Exe
				Update~ Exe
				1025 Bp
				
				((on test characters (Characters)->(Unit N~)->Mode~) Ew.out~) Do
				((on test account (Account)->(Test N~)->R~) Ew.out~) Do
				((on account (Account)->(Rt vodka)~ ($$)->(Account)->(Rt vodka)~ Update2.Account.(Rt kofe)~) Ew.out~) Do
				Account~ Exe
				ActiveModes~ Exe
				(AAA (AAA Id~)) Born
				((AAA Id~)->k Id~)^
				(AAA Id~)->II~ Exe
				(AAA Id~)->I~ Exe
				(LLL.k 19)^
				LLL~ Exe
				((z is (AAA Id~)->z~~) Ew.out~) Do
				((m is (AAA Id~)->m~~) Ew.out~) Do
				((k is (AAA Id~)->k~) Ew.out~) Do
				((l Id~) Id~)^
				((The l is (l Id~)~) Ew.out~) Do
				(Y~ ML~) ForEach
				(M~ MT~) ForEach
				//(((AAA Id~)->m~~ (AAA Id~)->z~~) 11)^
				(1000 Id~ T~ nil ((AAA Id~)->m~~ (AAA Id~)->z~~)~) Recall
				2000 Relax
				((AAA Id~)) Release
			);		
			lifeterm = (
				((Id~ on start) Ew.out~) Do
				Init~ Exe
				Life~ Exe
				((Id~ says bye) Ew.out~) Do
			) Exe
		);

		Life ias (

			(StopBorn true) ias (
				((Cloner stops) Ew.out~) Do
			);
			(StopBorn false) ias (
				(Ew.Id ((Ew.Id~) Ew.inc~) Do)^
				(P1 (P1 Ew.Id~) defer) Born
				((P1 Ew.Id~)->Id Ew.Id~)^
				((P1 Ew.Id~)) Activate
				Life~ Exe
			);
			(StopBorn (Ew.Id~ 1) Ident)~ Exe
		);

		source lifeterm = (
			Life~ Exe
			150000 Relax
		) Exe
	);
}
                                  