options {
	language=__java__ {
  		package = "com.win.game.born.model.vwml.born"
  		path = "c:\var\vwml/born/src"
  		author = "Groozman M.Z."
		project_name = "Resources"
  		description = "Born simulation"
		beyond {
			fringe communication ias (
				out ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
				in ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
			)
			fringe services ias (
				math ias "com.vw.lang.beyond.java.fringe.gate.math.Math"
			)
		}
	}
}

module BornSimulation {
	SSS ias (
		k ias 7;
		((SSS output k k~) Ew.out~) Do
	);
	LLL ias (
		k ias 12;
		((LLL output k k~) Ew.out~) Do
	);

	(1 9) ias 12;

	Ew ias (
		out ias communication.out.write;
		in ias communication.in.read;
		inc ias services.math.inc;
		Id ias 0;
		W ias 8;

		AAA ias (
			(x 2) ias 9;
			k ias 0;
			m ias k;
			z ias (x 2);
			II ias ((II output k k~) Ew.out~) Do;
			I ias (
				((I output k k~) Ew.out~) Do
				1025 Bp
				(SSS.k 9)^
				SSS~ Exe
			);
		);

		P1 ias (
			Id ias 0;
			(1 9) ias 13;
			Life ias (
				T ias (
					((Id is Id~ and param is $~) Ew.out~) Do
				);
				X ias (M.a M.b M.c M.d M.e);
				Y ias (1 2 3 4 5 6 7 8 9 10 11 12);
				XT ias (
					(($~~) Ew.out~) Do
				);
				M ias ((a Id~)^ (b Id~)^ (c Id~)^ (d Id~)^ (e Id~)^);
				ML ias ((Id~ $~) Ew.out~) Do;
				MT ias (
					$~ Exe
					((Id Id~ and M.a~ M.b~ M.c~ M.d~ M.e~) Ew.out~) Do
					(X~ XT~) ForEach
				);
				((I am here Id~) Ew.out~) Do
				(AAA (AAA Id~)) Born
				((AAA Id~)->k Id~)^
				(AAA Id~)->II~ Exe
				(AAA Id~)->I~ Exe
				(LLL.k 19)^
				LLL~ Exe
				1025 Bp
				((z is (AAA Id~)->z~~) Ew.out~) Do
				((m is (AAA Id~)->m~~) Ew.out~) Do
				((k is (AAA Id~)->k~) Ew.out~) Do
				((l Id~) Id~)^
				((The l is (l Id~)~) Ew.out~) Do
				1025 Bp
				(Y~ ML~) ForEach
				(M~ MT~) ForEach
				//(((AAA Id~)->m~~ (AAA Id~)->z~~) 11)^
				(2000 Id~ T~ nil ((AAA Id~)->m~~ (AAA Id~)->z~~)~) Recall
				5000 Relax
				((AAA Id~)) Release
			);		
			lifeterm = (
				Life~ Exe
				((Id~ says bye) Ew.out~) Do
			) Exe
		);

		Conf ias (
			N1 ias (
				E1 ias (test2);
			);
		);

		Ex ias (
			AX ias (
				A1 ias (test1);
				(A1 (A1~ Conf.N1.E1~) Join)^
				((A1 A1~) Ew.out~) Do
			);

			Init ias (
				ConfFields ias (SherifBribeRanges Resources);
				SherifBribeRanges ias (100 200 300 100 200 400 500 100 200 100 100 50 10 20 40);
				Resources ias ((vodka 100 500 12 3000 100) (gold 10 500 10 4000 70) (food 50 500 9 5000 50));
				((The quartals configuration is) Ew.out~) Do
				
				ShowField ias (($~ $~~) Ew.out~) Do;
				(ConfFields~ ShowField~) ForEach
			);
		);

		Es ias (
			QuartalsConf ias (
				ConfFields ias (SherifBribeRanges Resources);
				// dynamic load configuration
				Load ias (
					Conf ias nil;
					ConfIndex ias 0;
					ShowField ias (($~ $~~) Ew.out~) Do;
					ApplyConf ias (
						SetConfField ias (
							($~ ((Conf~ ConfIndex~) Get 1) Get)^
							($~ QuartalsConf true) Context
							(ConfIndex ((ConfIndex~) Ew.inc~) Do)^
						);
						(ConfIndex 0)^
						(ConfFields~ SetConfField~) ForEach 
					);
					(NotReady true) ias doNothing;
					(NotReady false) ias ApplyConf~ Exe;
					(NotReady (Conf~ nil) Ident)~ Exe

					((The quartals configuration is) Ew.out~) Do
					(ConfFields~ ShowField~) ForEach
				);
			);
		);

		Life ias (
/*
			Ex.AX~ Exe
			Ex.Init~ Exe

			(Es.QuartalsConf.Load.Conf ((SherifBribeRanges (300 200 300 100 200 400 500 100 200 100 100 50 10 20 40)) (Resources ((vodka 100 500 12 3000 100) (gold 10 500 10 4000 70) (food 50 500 9 5000 50) (viski 50 500 9 5000 50)))))^
			((The loaded quartals configuration is Es.QuartalsConf.Load.Conf~) Ew.out~) Do
			Es.QuartalsConf.Load~ Exe
			300000 Relax
*/

			(StopBorn true) ias (
				((Cloner stops) Ew.out~) Do
			);
			(StopBorn false) ias (
				(Ew.Id ((Ew.Id~) Ew.inc~) Do)^
				(P1 (P1 Ew.Id~) defer) Born
				((P1 Ew.Id~)->Id Ew.Id~)^
				((P1 Ew.Id~)) Activate
				Life~ Exe
			);
			(StopBorn (Ew.Id~ 1) Ident)~ Exe
		);

		source lifeterm = (
			Life~ Exe
			15000 Relax
		) Exe
	);
}
                                  