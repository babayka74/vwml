options {
	language=__java__ {
  		package = "com.win.game.tesej.model.vwml.tesej4"
  		path = "c:\var\vwml/tesej4/src"
  		author = "Groozman M.Z."
		project_name = "tesej4Proj"
  		description = "Tesej4 walk"
		visualizer {
			class = "com.vw.lang.sink.java.link.debug.visitor.dot.VWMLLinkDebugPreprocessorDotVisitor"
			data = "c:\var\vwml/tesej4/diagram"
		}
		beyond {
			fringe communication ias (
				out ias "com.vw.lang.beyond.java.fringe.gate.console.Console"
				in ias "com.vw.lang.beyond.java.fringe.gate.console.Console"
			)
			fringe move ias (
				toPosition ias "com.vw.lang.beyond.java.fringe.gate.movement.Go"
			)
			fringe services ias (
				math ias "com.vw.lang.beyond.java.fringe.gate.math.Math"
			)
		}
		conflictring {
			"GameTesej.Tesej.Actions.LogicGenerated.SelectNewPosition.Select" conflicts ("GameTesej.Tesej.Actions.LogicGenerated.SelectNewPosition.Select")
			"GameTesej.Tesej.Actions.LogicGenerated.ToClone.IncTesejNumbers" conflicts ("GameTesej.Tesej.Actions.LogicGenerated.ToClone.IncTesejNumbers" "GameTesej.Tesej.Actions.LogicGenerated.SelectNewPosition.Select")
		}
	}
}

module tesej4 {
	GameTesej ias (
		Ew ias (
			say ias communication.out.write;
			ask ias communication.in.read;
			inc ias services.math.inc;
			movedToPosition ias move.toPosition.go;
		);
		Map ias (
			x ias (a);
			a ias (a h b g TesejTemple f h e c d TesejTemple);
			b ias (b a e h g f TesejTemple f f);
			c ias (a c e TesejTemple d f);
			d ias (TesejTemple d c g h g g h h g);
			e ias (e c a b TesejTemple g);
			f ias (f c b TesejTemple a b g);
			g ias (g b e h e TesejTemple c b g b);
			h ias (h a e TesejTemple c e e a);
		);
		EntityRestingTime ias (
			Time ias (
				v ias 1000;
			);
			((relaxing Time.v~ miliseconds) Ew.say~) Do
			Time.v~ Relax
		);
		/* Global counter of Tesejs */
		MaxNumberOfClonedTesejs ias 5;
		TesejIds ias 0;
		SpecialPositions ias (TesejItself Tesej Minotaur TesejTemple MinotaurTemple);
		Tesej ias (
			/* Initial Tesej's id */
			Id ias 0;
			/* Tesej's initial position */
			Position ias Map.x;
			/* Temporary entity which is used in order to store some entity during phase of taking decision about Tesej's movement */
			K ias Map.x;
			/* Tesej selected position but not approved, so need to check whether another entities has occupied it or no */
			TempPosition ias Position;
			/* Tesej's previous position; needed in order to report Tesej's movement */
			PrevPosition ias Position;
			/* initialy position wasn't taken by anybody */
			PositionTakenBy ias nil;
			/* Actions which can be performed by Tesej */
			Actions ias (
				LogicGenerated ias (
					/* tesej's action */
					Action ias nil;
					/* makes decision  */				
					SelectNewPosition ias (
						(PositionTaken true) ias (
							(PositionTakenBy TempPosition~~)^
							((Taken position is PositionTakenBy~) Ew.say~) Do
						);
						(PositionTaken false) ias (
							/* store former position in 'PrevPosition' */
							(PrevPosition Position~)^
							/* Position is interpreted as new position (interpretation of TempPosition) generated during SelectNewPosition */
							(Position TempPosition~)^
							/* on each movenet current position is marked as Tesej's position; so interpretation of current position
						   	should be stored in separate entity */
							(K Position~~)^
							((Tesej Id~ moved from PrevPosition~ to Position~) Ew.say~) Do	
							/* Marks current position as taken over by Tesej */
							(Position~ Tesej)^
							(PositionTakenBy TesejItself)^
							((Taken position is PositionTakenBy~) Ew.say~) Do	
						);
						Select [
							((Tesej Id~ selects position) Ew.say~) Do
							/* Restores position's interpretetion */
							(Position~ K~)^
							(TempPosition Position~~ Random)^
							((Tesej Id~ analyzes position) Ew.say~) Do
							/* Checks if position was taken before */
							(PositionTaken (SpecialPositions~ TempPosition~~)In)~ Exe
							/* run actual actions */
							(Action LogicGenerated.OnTakenPosition)^
							((Tesej Id~ analyzed and took action Action~) Ew.say~) Do
						Select ]
						((Tesej Id~ action Action~ before life step) Ew.say~) Do
						LifeStep~ Exe
					);
					/* Tesej is cloned */
					ToClone ias (
						(DoNotCloneTesej true) ias (
							((Tesej Id~ coud not be cloned since MaxNumberOfClonedTesejs~ tesejs have been reached) Ew.say~) Do
						);
						(DoNotCloneTesej false) ias (
							((Tesej Id~ is going to be cloned) Ew.say~) Do
							(TesejIds ((TesejIds~) Ew.inc~) Do)^
							(Tesej (Tesej TesejIds~)) Clone
						);
						IncTesejNumbers [
							(DoNotCloneTesej (MaxNumberOfClonedTesejs~ TesejIds~)Ident)~ Exe
						IncTesejNumbers ]
						(Action SelectNewPosition)^
						((Tesej Id~ took action Action~) Ew.say~) Do 
						LifeStep~ Exe
					);
					/* finds who occupied position and runs tesej's action depending on it */
					OnTakenPosition ias (
						/* some Tesej on position - selects new */
						(TakenBy Tesej) ias (
							(Action SelectNewPosition)^
							LifeStep~ Exe
						);
						(TakenBy TesejItself) ias (
							/* some delay before moveing to new position */
							EntityRestingTime~ Exe
							(Action SelectNewPosition)^
							LifeStep~ Exe						
						);
						/* Minotaur is here */
                                                (TakenBy Minotaur) ias (
						);
						/* Tesej's temple; here tesej can be cloned */
                                              	(TakenBy TesejTemple) ias (
							(Action ToClone)^
							LifeStep~ Exe
						);
						/* Minotaur's temple; here minotaur can be cloned */
                                              	(TakenBy MinotaurTemple) ias (
						);
						(TakenBy PositionTakenBy~)~ Exe
					);
				);
			);
			/* Tesej's life step; used when logic generated action should be processed */
			LifeStep ias (
				Actions.LogicGenerated.Action~~ Exe
			);
			/* Its life term; initial action; used when Tesej moves from old position to new one */
			Life ias (
				(Actions.LogicGenerated.Action Actions.LogicGenerated.SelectNewPosition)^ 
				Actions.LogicGenerated.Action~~ Exe
			);
			/* Its source lifeterm */
   			source lifeterm = (
						(K K~~)^
						(Id TesejIds~)^
						Life~ Exe
					) Exe
		);
	);
}
