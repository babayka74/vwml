module DpfB {
	/* Depth-first search algorithm. Modification B. */
	DpfSearchMkB ias (
		/* aux. entities; cached by caller */
		Maze ias $0;
		MovementSpeed ias $1;
		Goals ias $2;
		State ias $3;
		ChoiceSet ias $4;
		StateSet ias $5;
		SeqStates ias $6;
		VectorSummationFringe ias $7;
		CompletitionCallback ias $8;

		NextStates ias ();
		NewState ias nil;
		/* looks for possible states by observing area; used by GetNextStates */
		LookupNextStates ias (
			Svect ias nil;
			(InMaze false) ias doNothing;
			(InMaze true) ias (NextStates (NextStates~ (Svect~)) Join)^;
			delta ias $;
			(Svect ((delta~~ State~~) VectorSummationFringe~~) Do)^
			(InMaze (Maze~~ Svect~) In)~ Exe
		);
		/* actually looks for next states  */
		GetNextStates ias (
			(NextStates ())^
			(MovementSpeed~~ LookupNextStates~) ForEach
		);
		/* acually sets new state */
		GetNewState ias (NewState ChoiceSet~~ Random)^;
		Search ias (EndSearch (Goals~~ State~~) In)~ Exe;
		/* one of goal's targets has achieved */
		(EndSearch true) ias CompletitionCallback~~ Exe;
		/* continue walking... */
		(EndSearch false) ias (
			GetNextStates~ Exe
			((The next possible states are NextStates~ and former states are StateSet~~) Ew.Output~) Do
			(ChoiceSet~ (NextStates~ StateSet~~) Substruct)^
			((The choice set is ChoiceSet~~) Ew.Output~) Do
			(Return (ChoiceSet~~ ()) Ident)~ Exe
		);
		/* pop state from stack and set last state to current state */
		(Return true) ias (
			(State~ (SeqStates~~) Last)^
			(SeqStates~ (SeqStates~~) Begin)^
			((The stack is SeqStates~~ and state is State~~) Ew.Output~) Do
		);
		(Return false) ias (
			GetNewState~ Exe
			((The new state is NewState~) Ew.Output~) Do
			(State~ NewState~)^
			(SeqStates~ (SeqStates~~ (State~~)) Join)^
			(StateSet~ (StateSet~~ (State~~)) Join)^
			((The stack is SeqStates~~) Ew.Output~) Do
		);

		Search~ Exe
	);
}
