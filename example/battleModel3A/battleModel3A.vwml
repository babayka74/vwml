options {
	language=__java__ {
  		package = "com.win.strategy.battle.vwml.model"
  		path = "c:\var\vwml/battleModel3A/src"
  		author = "Win Interactive"
		project_name = "battleModel3A"
  		description = "Strategy battle model 3A"
		beyond {
			fringe communication ias (
				out ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
				in ias "com.win.game.model.fringe.gate.async.console.AsyncConsole"
				// outchannel ias "com.win.strategy.battle.vwml.gate.BMVWMLMoveBehaviorGate"
			)
			fringe services ias (
				math ias "com.vw.lang.beyond.java.fringe.gate.math.Math"
				graph ias "com.win.game.model.fringe.gate.algorithm.graphloader.GraphLoader"
			)
		}
		conflictring {
			"{MagicWorld.Manager}.PropagateCommand.LockQueue" conflicts (
				"{MagicWorld.Player}.PlayerLifeStep.(Stop false).(emptyQ false).LockQueue"
			)
			"[MagicWorld.Characters.Unit].DpfSearchMkAParallel.(Return false).LockSharedStates" conflicts (
				"[MagicWorld.Characters.Unit].DpfSearchMkAParallel.(EndSearch false).LockSharedStates"
			)
			"[MagicWorld.Characters.Unit].DpfSearchMkAParallel.HaveAvailableSteps.LockSharedStates" conflicts (
				"[MagicWorld.Characters.Unit].DpfSearchMkAParallel.(EndSearch false).LockSharedStates"
				"[MagicWorld.Characters.Unit].DpfSearchMkAParallel.(Return false).LockSharedStates"
			)
		}
	}
}

include "../algorithms/DpfAP/DpfAP.vwml"

module battleModel3A {
	Ew ias (
		/* list of maze's nodes */
		
		Maze ias (
			Nodes ias ();
			BuildMaze ias (
				(Node ($~ 0) Get)^
				(LinkedNodes ($~ 1) Get)^
				// stores node on object store in order to allow further interpretation
				(Node~ Ew.Maze true) Context
				(LinkedNodes~ Ew.Maze) Context
				(Node~ LinkedNodes~)^
				(Nodes (Nodes~ (Node~)) Join)^
				((Connecting Node~ with LinkedNodes~ and list of nodes Nodes~) Ew.Output~) Do
			);
			(InitialMaze ((battleField) Ew.LoadGraph~) Do)^
			// using ForEach in order to parse and prepare maze
			(InitialMaze~ BuildMaze~) ForEach
		);	

		TargetsToBeDestroyed ias ((16 3) (6 4) (18 6) (16 6));
		ConfiguredNumOfRequestedSteps ias 4;
		Input ias communication.in.read;
		Output ias communication.in.write;
		// MoveUnit ias communication.outchannel.move;
		IncIteration ias services.math.inc;
		DecValue ias services.math.dec;
		LoadGraph ias services.graph.load;
	);
	MagicWorld ias (
		StopTheWorld ias false;
		Characters ias (
			/* simple game unit */
			Unit ias (
				Id ias nil;
				/* unit selected by player */
				Selected ias false;
				/* movement's parameters */
				Movement ias (
					Goals ias ();
					GoalReached ias false;
					AllGoalsReached ias false;
					SeqStates ias ();
					RequestedSteps ias ();
					State ias nil;
					PrevState ias nil;
					Init ias true;
					Iteration ias 0;
					PathPassed ias false;
					Walking ias false;
					NumOfRequestedSteps ias 1;
					NoSteps ias false;

					Result ias (
						(NoSteps false) ias (
							(Movement.GoalReached true)^
							(Movement.AllGoalsReached (Movement.Goals~ ()) Ident)^
						);
						(NoSteps true) ias (Movement.AllGoalsReached true)^;
						(NoSteps Movement.NoSteps~)~ Exe
						((Result detected left goals for Id~ are Movement.Goals~ Ew.TargetsToBeDestroyed~) Ew.Output~) Do
						1025 Bp
					);

					TargetDestroyed ias ((Unit Id~ destroyed target Movement.State~) Ew.Output~) Do;

					CheckPosition ias (
						(RightPosition true) ias (
							(PosToBeSet~ PosToBeChecked~)^
						);
						(RightPosition false) ias (
							(PosToBeSet~ nil)^
							((The pos PosToBeChecked~ does not belong to maze for unit Id~) Ew.Output~) Do
						);
						PosToBeChecked ias nil;
						PosToBeSet ias nil;
						(RightPosition (Ew.Maze.Nodes~ PosToBeChecked~) In)~ Exe
 					);

					CheckGoalPositions ias (
						Correct ias true;
						T ias nil;
						RollbackGoals ias ();
						CheckGoal ias (
							(NotCorrectGoal true) ias (
								(Correct false)^
								((The goals Goals~ are invalid for unit Id~) Ew.Output~) Do
								(Goals RollbackGoals~)^
								($ doNothing)^
							);
							(NotCorrectGoal false) ias doNothing;
							(CheckPosition.PosToBeChecked $~)^
							(CheckPosition.PosToBeSet T)^
							((Checking CheckPosition.PosToBeChecked~) Ew.Output~) Do
							CheckPosition~ Exe
							(NotCorrectGoal (T~ nil) Ident)~ Exe
						);
						(Goals~ CheckGoal~) ForEach
					);

					Recalculate ias (
						(Movement.RequestedSteps ())^
						(Movement.Init false)^
						(Movement.Iteration 0)^
						(Movement.PathPassed false)^
						(Movement.NoSteps false)^
						(Movement.NumOfRequestedSteps Ew.ConfiguredNumOfRequestedSteps~)^
						((The unit Id~ goals Movement.Goals~ initialized movement procedure with shared stateset (Player Unit.CommandDispatcher.PlayerId~)->UnitsStateSet~ and steps Movement.NumOfRequestedSteps~ and state Movement.State~) Ew.Output~) Do
						((Movement.Goals
							Ew.TargetsToBeDestroyed
							Movement.State
							(Player Unit.CommandDispatcher.PlayerId~)->UnitsStateSet
							Movement.SeqStates
							Movement.Result
							Movement.TargetDestroyed
							Ew.DecValue
							Movement.RequestedSteps
							Movement.NumOfRequestedSteps
							Movement.NoSteps                     	
							Id) (DpfSearchMkAParallel Id~)~) CallP
						(Movement.State (Movement.RequestedSteps~ Movement.Iteration~) Get)^
						((Calculated steps Movement.RequestedSteps~ unit Id~) Ew.Output~) Do
					);

					Go ias (
						// start movement, all parameters are correct
						(Init false) ias doNothing;
						(Init true) ias (
							Recalculate~ Exe
							UnitLifeStep~ Exe
						);
						(FinishedMovement false) ias (
							((The unit Id~ moved from Movement.PrevState~ to Movement.State~) Ew.Output~) Do
							300 Relax
							(Movement.PrevState Movement.State~)^
                                			(Movement.Iteration ((Movement.Iteration~) Ew.IncIteration~) Do)^
							(Movement.State (Movement.RequestedSteps~ Movement.Iteration~) Get)^
							(Walking true)^ 
						);
						(FinishedMovement true) ias (
							(GoalReached false false) ias doNothing;
							(GoalReached true false) ias (
								((The unit Id~ reached goal Movement.State~ and looks for another goal from Movement.Goals~) Ew.Output~) Do
								(Movement.GoalReached false)^
							);
							(GoalReached false true), (GoalReached true true) ias (
								((The unit Id~ reached all goals) Ew.Output~) Do
								(Movement.AllGoalsReached false)^
								(Unit.CommandDispatcher.UnitCommandId stay)^
							);
							(PathPassed true)^
							(Movement.State Movement.PrevState~)^
							(Walking false)^
							(Init true)^
							(GoalReached Movement.GoalReached~ Movement.AllGoalsReached~)~ Exe
						);
						(AllTargetsDestroyed true) ias (
							((The unit Id~ detected that all shared targets destroyed) Ew.Output~) Do
                                                	(Unit.CommandDispatcher.UnitCommandId stay)^
						);
						(AllTargetsDestroyed false) ias (
							(Init Movement.Init~)~ Exe
							(FinishedMovement (Movement.State~ nil) Ident)~ Exe
						);
						(AllTargetsDestroyed (Ew.TargetsToBeDestroyed~ ()) Ident)~ Exe
					);

					HandleIfUnitVisitedPosition ias (
						Position ias nil;
						(Visited true) ias doNothing;
						(Visited false) ias (
							((Player Unit.CommandDispatcher.PlayerId~)->UnitsStateSet ((Player Unit.CommandDispatcher.PlayerId~)->UnitsStateSet~ (Position~)) Join)^
						);
						(Visited ((Player Unit.CommandDispatcher.PlayerId~)->UnitsStateSet~ Position~) In)~ Exe
						((Check (Player Unit.CommandDispatcher.PlayerId~)->UnitsStateSet~ and Position~) Ew.Output~) Do
					);
				);
				/* unit receives commands in deferred manner */
				CommandQueue ias ();
				CommandDispatcher ias (
					Dispatch ias nil;
					PlayerId ias nil;
					LastUnitCommandId ias stay;
					UnitCommandId ias stay;
					UnitId ias nil;
					UnitCommandParams ias nil;

					(Handle stay) ias (
						UnitLifeStep~ Exe
					);
					(Handle stop) ias (
						((The unit Id~ received command stop) Ew.Output~) Do	
						(UnitCommandId stay)^
						UnitLifeStep~ Exe
					);
					(Handle go) ias (
						(PathPassed true true) ias (UnitCommandId stop)^;
						(PathPassed false false),(PathPassed false true),(PathPassed true false) ias Movement.Go~ Exe;
						(PathPassed Movement.PathPassed~ Selected~)~ Exe 
						UnitLifeStep~ Exe
					);
					(Handle movetopos) ias (
						(Walking true) ias (
							(Movement.Init true)^
							(UnitCommandId go)^
						);
						(Walking false) ias (
							// goal reached and new goal set, no need to wait for go command
							(NewMovement true) ias (
								(Movement.Init true)^
								(Movement.PathPassed false)^
								(Movement.GoalReached false)^
								(UnitCommandId go)^
							);
							(NewMovement false) ias (
								(UnitCommandId stay)^
							);
							(NewMovement Movement.PathPassed~)~ Exe
						);
						(MovementGoalCorrect true) ias (
							((The unit Id~ has finish positions Movement.Goals~) Ew.Output~) Do
							(Walking Movement.Walking~)~ Exe
						);
						(MovementGoalCorrect false) ias (
							(FollowingCommandGo true) ias (
								(UnitCommandId go)^
							);
							(FollowingCommandGo false) ias (
								(UnitCommandId stay)^
							);
							(FollowingCommandGo Movement.Walking~)~ Exe
						);
						(Movement.CheckGoalPositions.RollbackGoals Movement.Goals~)^
						(Movement.Goals UnitCommandParams~)^
						(Movement.CheckGoalPositions.Correct true)^ 
						Movement.CheckGoalPositions~ Exe
						(MovementGoalCorrect Movement.CheckGoalPositions.Correct~)~ Exe
						UnitLifeStep~ Exe
					);
					(Handle startpos) ias (
						(NoAddToSharedUnitsState true) ias doNothing;
						(NoAddToSharedUnitsState false) ias (
							(Movement.PrevState Movement.State~)^
							(Movement.SeqStates (Movement.State~))^
							(Movement.HandleIfUnitVisitedPosition.Position Movement.State~)^
							Movement.HandleIfUnitVisitedPosition~ Exe
						);
						(Movement.CheckPosition.PosToBeChecked UnitCommandParams~)^
						(Movement.CheckPosition.PosToBeSet Movement.State)^
                                                Movement.CheckPosition~ Exe
						((The unit Id~ has start position Movement.State~) Ew.Output~) Do
						(NoAddToSharedUnitsState (Movement.State~ nil) Ident)~ Exe
						(UnitCommandId stay)^
						UnitLifeStep~ Exe
					);
					(Handle select) ias (
						(UnitCommandId LastUnitCommandId~)^
						(Selected true)^
						UnitLifeStep~ Exe
					);
					(NothingToDispatch true) ias doNothing;
					(NothingToDispatch false) ias (
						(LastUnitCommandId UnitCommandId~)^
						(PlayerId (Dispatch~ 0) Get)^
						(UnitCommandId (Dispatch~ 1) Get)^
						(UnitId (Dispatch~ 2) Get)^
						(UnitCommandParams (Dispatch~ 3) Get)^
					);
					(NothingToDispatch (Dispatch~ nil) Ident)~ Exe
					(Handle UnitCommandId~)~ Exe
				);
				/* unit's lifestep */
				UnitLifeStep ias (
					(Stop false) ias (
						(emptyQ true) ias (
							(CommandDispatcher.Dispatch nil)^
						);
						(emptyQ false) ias (
							(CommandDispatcher.Dispatch (CommandQueue~) First)^
							(CommandQueue (CommandQueue~) Rest)^
							((The unit Id~ received CommandDispatcher.Dispatch~) Ew.Output~) Do
						);
						(emptyQ (CommandQueue~ ()) Ident)~ Exe
						CommandDispatcher~ Exe
					);
					(Stop true) ias (
						((The unit Id~ stopped) Ew.Output~) Do
					);
					(Stop StopTheWorld~)~ Exe
				);

				lifeterm = (
					(DpfSearchMkAParallel (DpfSearchMkAParallel Id~)) Born
					((The unit Id~ was born) Ew.Output~) Do
					UnitLifeStep~ Exe
				) Exe
			);
		);
		Player ias (
			AvailableUnitsCommands ias (create destroy movetopos startpos go stop exit select);
			Id ias nil;
			Units ias ();
			UnitsStateSet ias ();
			CommandQueue ias ();
			HandleUnitsCommand ias (
				UnitCommandId ias nil;
				UnitId ias nil;
				UnitCommandParams ias nil;
				(Handle create) ias (
					(Characters.Unit.Id UnitId~)^
					(Units (Units~ (UnitId~)) Join)^
					((The player Id~ creates unit UnitId~) Ew.Output~) Do
					(Characters.Unit Characters.(Unit ($$)->(HandleUnitsCommand)->UnitId~)) Born
					PlayerLifeStep~ Exe
				);
				(Handle movetopos),(Handle startpos),(Handle go),(Handle stop),(Handle select) ias (
					(Characters.(Unit ($$)->(HandleUnitsCommand)->UnitId~)->CommandQueue
					(Characters.(Unit ($$)->(HandleUnitsCommand)->UnitId~)->CommandQueue~
						    (
							(Id~ ($$)->(HandleUnitsCommand)->UnitCommandId~ ($$)->(HandleUnitsCommand)->UnitId~ ($$)->(HandleUnitsCommand)->UnitCommandParams~))
						    ) Join
					)^
					PlayerLifeStep~ Exe
				);
                                (Handle destroy) ias (
					((The player Id~ executes other actions) Ew.Output~) Do
					PlayerLifeStep~ Exe
				);
				(UnitCommandId (CommandDispatcher.Dispatch~ 0) Get)^
				(UnitId (CommandDispatcher.Dispatch~ 1) Get)^
				(UnitCommandParams (CommandDispatcher.Dispatch~ 2) Get)^
				(Handle UnitCommandId~)~ Exe
			);
			CommandDispatcher ias (
				Dispatch ias nil;
				(RightCommand true) ias (
					HandleUnitsCommand~ Exe
				);
				(RightCommand false) ias (
					PlayerLifeStep~ Exe
				);
				((The player Id~ received command Dispatch~ to dispatch) Ew.Output~) Do
				(RightCommand (AvailableUnitsCommands~ (Dispatch~ 0) Get) In)~ Exe
			);
			/* Player's lifestep */
			PlayerLifeStep ias (
				(Stop false) ias (
					(emptyQ true) ias (
						PlayerLifeStep~ Exe
					);
					(emptyQ false) ias (
						LockQueue [
							(CommandDispatcher.Dispatch (CommandQueue~) First)^
							(CommandQueue (CommandQueue~) Rest)^
						LockQueue ]
						CommandDispatcher~ Exe
					);
					(emptyQ (CommandQueue~ ()) Ident)~ Exe
				);
				(Stop true) ias (
					((The player Id~ stopped) Ew.Output~) Do
				);
				(Stop StopTheWorld~)~ Exe
			);
			lifeterm = (
				((The player Id~ added and active) Ew.Output~) Do
				PlayerLifeStep~ Exe
			) Exe
		);
		Manager ias (
			Command ias nil;
			Character ias nil;
			Id ias nil;
			UnitId ias nil;
			CommandId ias nil;
			Params ias nil;
			/* command is propagated to player */
			PropagateCommand ias (
				LockQueue [
					((Player Id~)->CommandQueue ((Player Id~)->CommandQueue~ ((CommandId~ UnitId~ Params~))) Join)^
				LockQueue ]
				((Command propagated to player Id~) Ew.Output~) Do
			);
			(ManagerCommand true) ias (
				(Command playeradd) ias (
					(Player.Id UnitId~)^
					(Player (Player UnitId~)) Born
				);
				(Command exit) ias (
					(StopTheWorld true)^
				);
				((manager command CommandId~) Ew.Output~) Do
				(Command CommandId~)~ Exe
			);
			(ManagerCommand false) ias (
				((Not manager command propagating) Ew.Output~) Do
				/* passes for processing */
				PropagateCommand~ Exe
			);
			/* main loop where model waits for incoming commands and dispatches them */
			MainLoop ias (
				/* decomposes incoming command */
				ParseIncomingCommand ias (
					(Character (Command~ 0) Get)^
					(Id (Command~ 1) Get)^
					(CommandId (Command~ 2) Get)^
					(UnitId (Command~ 3) Get)^
					(Params (Command~ 4) Get)^
				);
				(Stop false) ias (
					(WaitForCommand true) ias (
						(NoAutoCommand false) ias (
							1000 Relax
							(Command (AutoCommands.Injection~) First)^
							(AutoCommands.Injection (AutoCommands.Injection~) Rest)^
							((The auto command Command~) Ew.Output~) Do
							ParseIncomingCommand~ Exe
							((The auto command Command~ character Character~) Ew.Output~) Do
							(ManagerCommand (Character~ manager) Ident)~ Exe
						);
						(NoAutoCommand true) ias doNothing;
						(NoAutoCommand (AutoCommands.Injection~ ()) Ident)~ Exe
						MainLoop~ Exe
					);
					(WaitForCommand false) ias (
						ParseIncomingCommand~ Exe
						(ManagerCommand (Character~ manager) Ident)~ Exe
						MainLoop~ Exe
					);
					/* waiting for command, in non-blocking manner */ 
					(Command (() Ew.Input~) Do)^
					(WaitForCommand (Command~ nil) Ident)~ Exe
				);
				(Stop true) ias (
					((The manager stopped) Ew.Output~) Do
				);
				(Stop StopTheWorld~)~ Exe
			);

			source lifeterm = (
				((The initialization time) Ew.Output~) Do
				3000 Relax
				((The game manager started and loads maze) Ew.Output~) Do
				Ew.Maze~ Exe
				((The game manager waits for commands) Ew.Output~) Do
				MainLoop~ Exe
				3000 Relax
			) Exe
		);

		AutoCommands ias (
			Injection ias (
				(manager 0 playeradd 0)
				(player 0 create 0)
				(player 0 startpos 0 Ew.Maze.(8 1))
				(player 0 movetopos 0 (Ew.Maze.(18 6) Ew.Maze.(6 1) Ew.Maze.(18 1) Ew.Maze.(4 1)))
				(player 0 go 0)

				(player 0 create 1)
				(player 0 startpos 1 Ew.Maze.(8 2))
				(player 0 movetopos 1 (Ew.Maze.(18 6) Ew.Maze.(6 1) Ew.Maze.(18 1) Ew.Maze.(4 1)))
				(player 0 go 1)

			);
		);
	);
}
