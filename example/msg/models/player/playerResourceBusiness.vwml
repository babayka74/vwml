module PlayerResourceBusiness {
	MagicWorld ias (
		Player ias (
			Resources ias (
				/* Business development factor */
				Business ias (
					RQ ias 0; // quantum
#if (business)
					InitialGDevelop ias 0;
					InitialGContain ias 0;
					GDevelop ias 0;		// see StrategyGame_Hiring&Dismiss
					GContain ias 0; 	// see StrategyGame_Hiring&Dismiss (mentioned as hospitality)
					BDevelop ias 0;         // global player's business development factor
					LH ias 0; 		// see Battle result document
					CashierConf ias nil;        // player's cashier configuration
					InternalCurrency ias nil; // internal currency which is used for calculating integral values of GDev and BDev
					InternalCurrencyV ias 0;   // value
					CurrencyRates ias nil;  // matrix of coefficients for converting resources into inrernal currency
					DevGang ias nil; 	// set of dev gang coefficients
					PremiumCurrency ias nil;     // premium resource and its exchange rates
					Premium2CurrencyRate ias nil;
#endif
					UnitClasses ias nil;
					UnitKinds ias nil;
					Value ias nil;
					Result ias false;
					Init ias (
						(UnitClasses ())^
						(UnitKinds ())^
						/* by resource type */
#if (business)
						(GDevelop 0)^
						(GContain 0)^  
						(Update.From (() (Factors Ew.BusinessConf.Factors~) (GDevelop Ew.BusinessConf.GDevelop~) (GContain Ew.BusinessConf.GContain~) (UnitsInfo Ew.BusinessConf.UnitsInfo~) (LH Ew.BusinessConf.LH~) (CashierConf Ew.BusinessConf.Cashier~) (InternalCurrency Ew.BusinessConf.InternalCurrency~) (CurrencyRates Ew.BusinessConf.CurrencyRates~) (DevGang Ew.BusinessConf.DevGang~) (PremiumCurrency Ew.BusinessConf.PremiumCurrency~) (Premium2CurrencyRate Ew.BusinessConf.Premium2CurrencyRate~) ))^
#else
						(Update.From (Factors Ew.BusinessConf.Factors~))^
#endif
						Update~ Exe
#if (verbose)
						((Player Id~ initialized business factor resources) Ew.Output~) Do
#endif
					);
					
#if (business)
					AssembleGDevelop ias (
						V ias 0;
						AssembleByRt ias (
							(IC true) ias (V (Gdf $~)~)^;
							(IC false) ias (V (((Gdf $~)~ (CR $~ InternalCurrency~)~) Ew.MulF~) Do)^;
							(IC (InternalCurrency~ nil) Ident)~ Exe 
							(GDevelop ((GDevelop~ V~) Ew.SumF~) Do)^
						);
						(GDevelop 0)^
						(Ew.BusinessConf.AvailableResources~ AssembleByRt~) ForEach
						(GDevelop ((GDevelop~ InitialGDevelop~) Ew.SumF~) Do)^
#if (verbose)                           	
						((Player Id~ has assembled gdevelop factor GDevelop~) Ew.Output~) Do 
#endif
					);

					AssembleGContain ias (
						V ias 0;
						AssembleByRt ias (
							(IC true) ias (V (Ctf $~)~)^;
							(IC false) ias (V (((Ctf $~)~ (CR $~ InternalCurrency~)~) Ew.MulF~) Do)^;
							(IC (InternalCurrency~ nil) Ident)~ Exe 
							(GContain ((GContain~ V~) Ew.SumF~) Do)^
						);
						(GContain 0)^
						(Ew.BusinessConf.AvailableResources~ AssembleByRt~) ForEach
						(GContain ((GContain~ InitialGContain~) Ew.SumF~) Do)^
#if (verbose)                           	
						((Player Id~ has assembled gcontain factor GContain~) Ew.Output~) Do 
#endif
					);

					AssembleBF ias (
						V ias 0;
						AssembleByRt ias (
							(IC true) ias (V (Bdf $~)~)^;
							(IC false) ias (V (((Bdf $~)~ (CR $~ InternalCurrency~)~) Ew.MulF~) Do)^;
							(IC (InternalCurrency~ nil) Ident)~ Exe 
							(BDevelop ((BDevelop~ V~) Ew.SumF~) Do)^
						);
						(BDevelop 0)^
						(Ew.BusinessConf.AvailableResources~ AssembleByRt~) ForEach
#if (verbose)                           	
						((Player Id~ has assembled bdevelop factor BDevelop~) Ew.Output~) Do 
#endif
					);
#endif // business
					Update ias (
						// ((<factors>)(<gdevelop>))
						From ias nil;
						UpdateFactors ias (
							// factors' indexes inside Factors entity
							FType ias 0;
							// Business development
							BDFactor ias 1;
							KFactor ias 2;
							// Containment (aka Hospitality)
							CFactor ias 3;
							// GDevelop 
							GFactor ias 4;
							// cashier
							CEFactor ias 5;
							CCFactor ias 6;
							// example: ((vodka 0 1) (food 0 1) (gold 0 1) (viski 0 1))
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (
								AssociateByRt ias (
									(Type ($~ FType~) Get)^
									// business dev factor
									((Bdf Type~) ($~ BDFactor~) Get)^
									((Bdf Type~) Business true) Context
									// k-factor
									((Kdf Type~) ($~ KFactor~) Get)^
									((Kdf Type~) Business true) Context
#if (business)
									// initial value of containment (aka hospitality per resource)
									((Ctf Type~) ($~ CFactor~) Get)^
									((Ctf Type~) Business true) Context
									// initial value of gangster development (per resource)
									((Gdf Type~) ($~ GFactor~) Get)^
									((Gdf Type~) Business true) Context
									// cashier (C & E) factors
									((CEf Type~) ($~ CEFactor~) Get)^
									((CEf Type~) Business true) Context
									((CCf Type~) ($~ CCFactor~) Get)^
									((CCf Type~) Business true) Context
#endif
#if (verbose)                                           	
									((Player Id~ has factors for (Bdf Type~) (Bdf Type~)~ and (Kdf Type~) (Kdf Type~)~ and (Ctf Type~) (Ctf Type~)~ and (Gdf Type~) (Gdf Type~)~ and (CEf Type~) (CEf Type~)~ and (CCf Type~) (CCf Type~)~) Ew.Output~) Do 
#endif
								);
								(F (F~ 1) Get)^
								(F~ AssociateByRt~) ForEach
							);
							(Ignore (F~ nil) Ident)~ Exe
						);
#if (business)
						UpdateGDevelop ias (
							// (<number>)
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (InitialGDevelop (F~ 1) Get)^;
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ has initial gdevelop factor InitialGDevelop~) Ew.Output~) Do 
#endif
						);

						UpdateGContain ias (
							// (<number>)
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (InitialGContain (F~ 1) Get)^;
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ has gcontain factor InitialGContain~) Ew.Output~) Do 
#endif
						);

						UpdateLH ias (
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (LH (F~ 1) Get)^;
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ has LH factor LH~) Ew.Output~) Do 
#endif
						);

						UpdateCashier ias (
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (
								(Cashier.Setup.Conf (F~ 1) Get)^
								Cashier.Setup~ Exe
							);
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ has cashier conf (F~ 1) Get) Ew.Output~) Do 
#endif
						);
						
						UpdateIC ias (
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (
								(InternalCurrency ((F~ 1) Get 0) Get)^
								(InternalCurrencyV ((F~ 1) Get 1) Get)^
							);
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ has internal currency InternalCurrency~ and value is InternalCurrencyV~) Ew.Output~) Do 
#endif
						);

						UpdateCR ias (
							// from (conf value)
							F ias nil;
							// currency
							Currency ias nil;
							// rates
							Rates ias nil;
							// builds converting matrix
							BM ias (
								(C ($~ 0) Get)^
								// direct row
								((CR C~ Currency~) ($~ 1) Get)^
								// reverse row
								((CR Currency~ C~) ($~ 1) Get)^
								((CR C~ Currency~) Business true) Context
								((CR Currency~ C~) Business true) Context
#if (verbose)                           	
								((Player Id~ direct currency rate (CR C~ Currency~) is (CR C~ Currency~)~) Ew.Output~) Do
								((Player Id~ reverse currency rate (CR Currency~ C~) is (CR Currency~ C~)~) Ew.Output~) Do 
#endif
							);
							(Ignore true) ias doNothing;
							(Ignore false) ias (
								(CRNSet true) ias doNothing;
								// iterate through rates and build matrix
								(CRNSet false) ias (Rates~ BM~) ForEach;
								(Rates (F~ 1) Get)^
								(CRNSet (Rates~ nil) Ident)~ Exe
							);
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ currency rates Rates~ from F~) Ew.Output~) Do 
#endif
						);

						UpdateDevGang ias (
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (DevGang (F~ 1) Get)^;
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ has dev gang coefficients DevGang~) Ew.Output~) Do 
#endif
						);

						UpdatePremiumCurrency ias (
							F ias nil;
							(Ignore true) ias doNothing;
							(Ignore false) ias (PremiumCurrency (F~ 1) Get)^;
							(Ignore (F~ nil) Ident)~ Exe
#if (verbose)                           	
							((Player Id~ updated premium currency PremiumCurrency~) Ew.Output~) Do 
#endif
						);

						UpdateUnitsInfo ias (
							F ias nil;
							K ias nil;
							P ias nil;
							PP ias nil;
							(Ignore false) ias (
								ParseInfo ias (
									// parses property
									(PP clazz) ias (
										// setups Q counter (Q kind class); see TakeOnBoardUnit
										SQC ias (
											C ias nil;
											(C ($~ 0) Get)^
											((U C K~) ((U C K~)~ (C~)) Join)^
											((U C K~) Business true) Context
											// quantity
											((Q K~ C~) ($~ 1) Get)^
											// make it addressable -> Resources.Business
											((Q K~ C~) Business true) Context
#if (verbose)                                           	
											((Player Id~ initialized (Q K~ C~) to (Q K~ C~)~) Ew.Output~) Do
#endif                                                  	
										);
										// available classes
										((P~ 1) Get SQC~) ForEach
									);
									// kind of unit
									(K ($~ 0) Get)^
									(UnitKinds (UnitKinds~ (K~)) Join)^
									((U C K~) ())^
									// properties
									(P ($~ 1) Get)^
									(PP (P~ 0) Get)~ Exe
								);
								(F (F~ 1) Get)^
								(F~ ParseInfo~) ForEach
							);
							(Ignore true) ias doNothing;
							(Ignore (F~ nil) Ident)~ Exe
						);
						// factors
						(UpdateFactors.F (From~ 1) Get)^
						UpdateFactors~ Exe
						(UpdateGDevelop.F (From~ 2) Get)^
						UpdateGDevelop~ Exe
						(UpdateGContain.F (From~ 3) Get)^
						UpdateGContain~ Exe
						(UpdateUnitsInfo.F (From~ 4) Get)^
						UpdateUnitsInfo~ Exe
						(UpdateLH.F (From~ 5) Get)^
						UpdateLH~ Exe
						(UpdateCashier.F (From~ 6) Get)^
						UpdateCashier~ Exe
						(UpdateIC.F (From~ 7) Get)^
						UpdateIC~ Exe
						(UpdateCR.F (From~ 8) Get)^
						(UpdateCR.Currency InternalCurrency~)^
						UpdateCR~ Exe
						(UpdateDevGang.F (From~ 9) Get)^
						UpdateDevGang~ Exe
						(UpdatePremiumCurrency.F (From~ 10) Get)^
						UpdatePremiumCurrency~ Exe
						(UpdateCR.F (From~ 11) Get)^
						(UpdateCR.Currency PremiumCurrency~)^
						UpdateCR~ Exe
#endif // business
					);

					CollectState ias (
						BusinessState ias ();
						UnitsStore ias ();
						// gangster's dev factor
						GDevFStore ias ();
						// business dev factor
						BDevFStore ias ();
						// contain (aka hospitality) dev factor
						CtDevFStore ias ();
						// account's state
						RAccountsStore ias ();	
						// collecting quantity
						OverUnitKind ias (
							// car type
							UK ias nil;
							UnitsStoreCreate ias (
								// quantity of units of specified kind and class
							 	(UnitsStore (UnitsStore~ (((Q UK~ $~) (Player Id~)->(Resources)->(Business)->(Q UK~ $~)~))) Join)^
							);
							(UK $~)^
							((Player Id~)->(Resources)->(Business)->(U C UK~)~ UnitsStoreCreate~) ForEach
						);
						FactorsOverRt ias (
							(RAccountsStore (RAccountsStore~ (((Rt $~) (Player Id~)->(Resources)->(Account)->(Rt $~)~))) Join)^
							(GDevFStore (GDevFStore~ (((Gdf $~) (Player Id~)->(Resources)->(Business)->(Gdf $~)~))) Join)^
							(BDevFStore (BDevFStore~ (((Bdf $~) (Player Id~)->(Resources)->(Business)->(Bdf $~)~))) Join)^
							(CtDevFStore (CtDevFStore~ (((Ctf $~) (Player Id~)->(Resources)->(Business)->(Ctf $~)~))) Join)^
						);
						(UnitsStore ())^
						(GDevFStore ())^
						(BDevFStore ())^
						(CtDevFStore ())^
						(RAccountsStore ())^
						(BusinessState ())^
						(UnitKinds~ OverUnitKind~) ForEach
						(Ew.BusinessConf.AvailableResources~ FactorsOverRt~) ForEach
						(BusinessState ((UnitsStore~ GDevFStore~ BDevFStore~ CtDevFStore~)(RAccountsStore~)))^
					);
					RestoreState ias (
						S ias nil;
						I ias 0;
						Ctx ias (Business Account);
						K ias (
							R ias (
								C ias nil;
								(N ($~ 0) Get)^
								(V ($~ 1) Get)^
								(N~ V~)^
								(N~ C~ true) Context
							);
							(R.C (Ctx I~) Get)^
							($~ R~) ForEach
							(I ((I~) Ew.IncValue~) Do)^
						);
						(I 0)^
						(S~ K~) ForEach
					);

					IncreaseBF ias (
						(ByBdfType (Bdf (Value~ 1) Get))^
						(ByBdfType~ ((ByBdfType~~ (Value~ 2) Get) Ew.SumF~) Do)^
						(Result true)^
#if (verbose)
						((Player Id~ increased business dev factor ByBdfType~ on (Value~ 2) Get balance is ByBdfType~~) Ew.Output~) Do
#endif
#if (release)
						(((business factor done)(player Id~)((ByBdfType~ 1) Get (Value~ 2) Get ByBdfType~~)) Ew.OutChannel~) Do
#endif
					);

					DecreaseBF ias (
						(Allow -1) ias (
							(Result false)^
#if (verbose)
							((Player Id~ does not have enougth resources ByBdfType~~ on ByBdfType~ required (Value~ 2) Get) Ew.Output~) Do
#endif
						);
						(Allow 0),(Allow 1) ias (
							(Result true)^
							(ByBdfType~ ((ByBdfType~~ (Value~ 2) Get) Ew.SubF~) Do)^
#if (verbose)
							((Player Id~ decreased business dev factor (Value~ 2) Get balance is ByBdfType~~ for ByBdfType~) Ew.Output~) Do
#endif
#if (release)
							(((business factor done)(player Id~)((ByBdfType~ 1) Get (Value~ 2) Get ByBdfType~~)) Ew.OutChannel~) Do
#endif
						);
						(ByBdfType (Bdf (Value~ 1) Get))^
						(Allow ((ByBdfType~~ (Value~ 2) Get) Ew.CompareF~) Do)~ Exe
					);
					RecalcRQuantum ias (
						// (Id~ Resource.Type~ Resource.Quantum~ LInvestQuantum~)
						(RQ (( (Value~ 2) Get (Value~ 3) Get (Kdf (Value~ 1) Get)~) Ew.RecalcQuantum~) Do)^
#if (verbose)
						((Player Id~ new contribution quantum for (Value~ 1) Get is RQ~) Ew.Output~) Do
#endif
					);
					// Calculates rating of the gang
					CalcDevGangFactor ias (
						D ias 0;
						GDev ias 0;
						BDev ias 0;
						AssembleGDevelop~ Exe
						AssembleBF~ Exe
						(GDev (((DevGang~ 0) Get GDevelop~) Ew.MulF~) Do)^
						(BDev (((DevGang~ 1) Get BDevelop~) Ew.MulF~) Do)^
						(D ((GDev~ BDev~) Ew.SumF~) Do)^
					);
				);
			);
		);
	);
}
