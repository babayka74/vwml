module PlayerResourceAccount {
	MagicWorld ias (
		Player ias (
			Resources ias (
				/* Account's information */
				Account ias (
					ByRtType ias nil;
					Value ias nil;
					Result ias false;
					Init ias (
						/* by resource type */
						(Update.From Ew.PlayerAccountConf.ResourceTypes~)^
						Update~ Exe
#if (verbose)
						((Player Id~ initialized account resources) Ew.Output~) Do
#endif
					);
					Update ias (
						From ias nil;
						AssociateByRt ias (
							(Type ($~ 0) Get)^
							((Rt Type~) ($~ 1) Get)^
							((Rt Type~) Account true) Context
#if (verbose)
							((Player Id~ has resource (Rt Type~) (Rt Type~)~) Ew.Output~) Do 
#endif
						);
						(From~ AssociateByRt~) ForEach
					);
					Report ias (
						AccountReport ias (
							V ias nil;
							(V ($~ 0) Get)^
#if (verbose)
							((Player Id~ has resource (V~ (Rt V~)~)) Ew.Output~) Do
#endif
#if (release)
							(((banking balance done)(player Id~)(V~ (Rt V~)~)) Ew.OutChannel~) Do
#endif
						);
						(Ew.PlayerAccountConf.ResourceTypes~ AccountReport~) ForEach
					);
					Set ias (
						V ias nil;
						T ias nil;
						(ByRtType (Rt (Value~ 1) Get))^
						(ByRtType~ (Value~ 2) Get)^
						(Result true)^

						(V (Value~ 2) Get)^
#if (verbose)
						((Player Id~ set account ByRtType~ on V~ balance is ByRtType~~) Ew.Output~) Do
#endif
#if (release)
						(T (ByRtType~ 1) Get)^
						(((banking set done)(player Id~)(T~ V~ ByRtType~~)) Ew.OutChannel~) Do
#endif
					);
					Recharge ias (
						V ias nil;
						T ias nil;
						(ByRtType (Rt (Value~ 1) Get))^
						(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.SumF~) Do)^
						(Result true)^
						
						(V (Value~ 2) Get)^
						(T (ByRtType~ 1) Get)^
#if (verbose)
						((Player Id~ recharged account ByRtType~ on V~ balance is ByRtType~~) Ew.Output~) Do
#endif
#if (release)
						(((banking recharge done)(player Id~)(T~ V~ ByRtType~~)) Ew.OutChannel~) Do
#endif
					);
					WithdrawUnconditional ias (
						ByR ias nil;
						V ias nil;
						T ias nil;

						(ByR~ ((ByR~~ V~) Ew.SubF~) Do)^
#if (verbose)
						((Player Id~ withdrawed V~ balance is ByR~~ for account ByR~) Ew.Output~) Do
#endif
#if (release)
						(T (ByR~ 1) Get)^
						(((banking withdraw done)(player Id~)(T~ V~ ByR~~)) Ew.OutChannel~) Do
#endif
					);
					WithdrawResource ias (
						R ias nil;
						T ias nil;
						(Allow -1) ias (
							(Result false)^
#if (verbose)
							(T (R~ 2) Get)^
							((Player Id~ does not have enougth resources ByRtType~~ on account ByRtType~ required T~) Ew.Output~) Do
#endif
						);
						(Allow 0),(Allow 1) ias (
							(Result true)^
							(WithdrawUnconditional.ByR ByRtType~)^
							(WithdrawUnconditional.V (R~ 2) Get)^
							WithdrawUnconditional~ Exe
						);
						(ByRtType (Rt (R~ 1) Get))^
						(Allow ((ByRtType~~ (R~ 2) Get) Ew.CompareF~) Do)~ Exe
					);
					Withdraw ias (
						PRC ias 0;
						// resource needed to buy
						RNB ias nil;
						ByRtType ias nil;
						(WithdrawResource true) ias doNothing;
						// activating premium resource
						(WithdrawResource false) ias (
							(NR true) ias (
#if (verbose)
								((Player Id~ does not support premium currency) Ew.Output~) Do
#endif
							);
							(NR false) ias (
								(WP false) ias (
									(PRC ((PRC~ (Rt Resources.Business.PremiumCurrency~)~) Ew.SubF~) Do)^
#if (verbose)
									((Player Id~ need to buy premium PRC~ Resources.Business.PremiumCurrency~) Ew.Output~) Do
#endif
								);
								(WP true) ias (
									(WithdrawResource.R (cost (Value~ 1) Get ByRtType~~))^
									WithdrawResource~ Exe
								);
								(CRNB -1) ias (RNB (Value~ 2) Get)^;
								(CRNB 0),(CRNB 1) ias (RNB (((Value~ 2) Get ByRtType~~) Ew.SubF~) Do)^;
								// check if we are in credit
								(CRNB ((ByRtType~~ 0) Ew.CompareF~) Do)~ Exe
#if (verbose)
								((Player Id~ resource need to buy RNB~) Ew.Output~) Do
#endif
								// convert it to premium resource
								(PRC ((RNB~ (Resources)->(Business)->(CR (Value~ 1) Get Resources.Business.PremiumCurrency~)~) Ew.DivF~) Do)^
								// round it up to integer value
								(PRC ((PRC~) Ew.RoundF~) Do)^
								(WithdrawResource.R (cost Resources.Business.PremiumCurrency~ PRC~))^
								WithdrawResource~ Exe
								// check premium
								(WP Result~)~ Exe
							);
							(ByRtType (Rt (Value~ 1) Get))^
							// check if we have premium resource
							(NR (Resources.Business.PremiumCurrency~ nil) Ident)~ Exe
						);
						(PRC 0)^
						(WithdrawResource.R Value~)^
						WithdrawResource~ Exe
						(WithdrawResource Result~)~ Exe
					);
				);
			);
		);
	);
}
