module PlayersManager {
	MagicWorld ias (
		PlayersManager ias (
			CommandMode ias nil;
			PlayerId ias nil;
			CommandId ias nil;
			Destination ias nil;
			Params ias nil;
			ExportedCommands ias (playeradd playerleave playerstop gaccountconf gquartalconf);

			Init ias (
				Pool ias (
					// initial quantity of elements in pool
					Elements ias 2;
					Fill ias (
						(CreatePlayer.PId $~)^
						CreatePlayer~ Exe
					);
					(Elements~ Fill~) Repeat
				);
				ModeInfo~ Exe
				Pool~ Exe
				(GlobalBanker (GlobalBanker 0) defer) Born
				(GlobalBanker 0)->Init~ Exe
				((GlobalBanker 0)->Id 0)^
				((GlobalBanker 0)) Activate
			);
			CreatePlayer ias (
				PId ias 0;
				BuildQuartal ias (Quartal (Quartal (PId~ $~)) defer) Born;
				// player's related components are created, but not activated
				(Player (Player PId~) defer) Born
				(HiringAgency (HiringAgency PId~) defer) Born
				(AttackManager (AttackManager PId~)) Born
				(Ew.PlayerAccountConf.QuartalsPerPlayer~ BuildQuartal~) Repeat
			);
			ActivatePlayer ias (
				PId ias 0;
				(State nonactive) ias (
#if (verbose)
					((Adding player PId~) Ew.Output~) Do
#endif                          
					((Player PId~)->Id PId~)^
					((Player PId~)->Stop false)^
					((Player PId~)) Activate
				);
				(State active) ias (
#if (verbose)
					((Player PId~ has already been added) Ew.Output~) Do
#endif                          
#if (release)                   
                              		(((playermanagment playeradd ok alreadyActive) (Player PId~)) Ew.OutChannel~) Do
#endif
				);
				(State (Player PId~)->State~)~ Exe
			);
			// propagating command to concrete player
			PropagateCommand ias (
#if (verbose)
				((Command CommandId~ is propagated to player PlayerId~ to mode CommandMode~) Ew.Output~) Do
#endif
				// activating gate on player's side (Tx mode)
				((Player PlayerId~) Tx (CommandMode~ CommandId~ Destination~ Params~)) Gate
#if (verbose)
				((Command CommandId~ propagated to player PlayerId~) Ew.Output~) Do
#endif
			);
			(ManagerCommand true) ias (
				// creates player and adds to session
				(Command playeradd) ias (
					(Exists true) ias (
						(ActivatePlayer.PId PlayerId~)^
						ActivatePlayer~ Exe
					);
					(Exists false) ias (
#if (verbose)
						((Creating player PlayerId~) Ew.Output~) Do
#endif
						(CreatePlayer.PId PlayerId~)^
						CreatePlayer~ Exe
						(Exists true)~ Exe
					);
					(Exists ((Player PlayerId~)) ExistsI)~ Exe
				);
				// player leaves session, but world is not stopped
				(Command playerleave) ias (
				);
				// plater leaves session and world is going to be stopped
				(Command playerstop) ias (
					((Player PlayerId~) Tx (ModeInfo.ModeMain~ requeststopplayerworld PlayerId~ ())) Gate
				);
				// updates global player's account configuration
				(Command gaccountconf) ias (
					(Ew.PlayerAccountConf.Load.Conf Params~)^
					Ew.PlayerAccountConf~ Exe
#if (release)                   
                              		(((playermanagment gaccountconf ok)) Ew.OutChannel~) Do
#endif
				);
				// updates global player's quartal configuration
				(Command gquartalconf) ias (
					(Ew.QuartalsConf.Load.Conf Params~)^
					Ew.QuartalsConf~ Exe
#if (release)                   
                              		(((playermanagment gquartalconf ok)) Ew.OutChannel~) Do
#endif
				);
				(Command CommandId~)~ Exe
			);
			(ManagerCommand false) ias PropagateCommand~ Exe;
			(ManagerCommand (ExportedCommands~ CommandId~) In)~ Exe			
		);
	);
}