module PlayerResources {
	MagicWorld ias (
		Player ias (
			Resources ias (
				ActiveQuartals ias 0;
				InitSteps ias ();
				InitDone ias (
					(InitSteps () InitDone~) FinishInterception
#if (verbose)
					((Player Id~ initialized) Ew.Output~) Do
#endif
#if (release)                   
                              		(((playermanagment playeradd ok new) (Player Id~)) Ew.OutChannel~) Do
#endif

				);
				/* available units */
				Units ias (
					Hired ias ();
					/* shared entity which stores units' current state (position) */
					UnitsStateSet ias ();
					UnitsStateSetLocker ias nil;
					Init ias (
						(Hired ())^
						((Player Id~ initialized hired units storage) Ew.Output~) Do
					);
				);
				/* controlled/own/visible quartals */
				Quartals ias (
					/* player is owner, at least, of one quartal */
					Own ias ();
					/* set of quartals controlled by player */
					Controlled ias ();
					/* player knows about these quartals but doesn't have control upon them */
					Visible ias ();
					Init ias (
						// This entity is monitored by interceptor
						ExpectedQuartals ias 0;
						NotifyAboutAllInitializedQuartals ias (
							(ExpectedQuartals 0 NotifyAboutActivitiesStopped~) FinishInterception
							(InitSteps (InitSteps~ (quartals)) Substruct)^
#if (verbose)
							((Player Id~ left init steps InitSteps~) Ew.Output~) Do							
#endif
						);
						ActivateQuartal ias (
							(QReady false) ias (
								(Quartal (Quartal (Id~ $~)) defer) Born
#if (verbose)
								((Player Id~ created quartal (Quartal (Id~ $~)) by request) Ew.Output~) Do
#endif
								(QReady true)~ Exe
							);
							// quartal's activation
							(QReady true) ias (
								((Quartal (Id~ $~))->Id (Id~ $~))^
								((Quartal (Id~ $~))->Owner Id~)^
								((Quartal (Id~ $~))) Activate
							);
							// checks if quartal has already been created
							(QReady (Quartal (Id~ $~)) EI)~ Exe
						);
						(ExpectedQuartals Ew.PlayerAccountConf.QuartalsPerPlayer~)^
						// waits untill all quartals have been initialized
						(ExpectedQuartals 0 NotifyAboutAllInitializedQuartals~) StartInterception
						(Ew.PlayerAccountConf.QuartalsPerPlayer~ ActivateQuartal~) Repeat
						// create battlefield and associate it with quartal
						((Player Id~) Tx (ModeInfo.ModeBattle~ createbf Id~ ((Id~ 0)))) Gate
						(Controlled ())^
						(Visible ())^
						(Own ())^
						LInit~ Exe
					);
					LInit ias (
						(ActiveQuartals Ew.PlayerAccountConf.QuartalsPerPlayer~)^
#if (verbose)
						((Player Id~ created and initialized own quartals) Ew.Output~) Do
#endif
					);
					Deactivate ias (
						A ias nil;
						AllOwnQurtalsDeactivated ias (
							(ActiveQuartals 0 AllOwnQurtalsDeactivated~) FinishInterception
							// send message to player about closing all own quartals
							((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (quartals))) Gate
						);
						(NoQuartals true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (quartals))) Gate;
						(NoQuartals false) ias (
							ResetQuartal ias ((Player Id~) Tx (ModeInfo.ModeDeal~ A~ Id~ ($~))) Gate;
							(ActiveQuartals 0 AllOwnQurtalsDeactivated~) StartInterception
							(Own~ ResetQuartal~) ForEach
						);
						(NoQuartals (Own~ ()) Ident)~ Exe
					);
					RestoreActiveQ ias (
						(RQ false) ias doNothing;
						(RQ true) ias (ActiveQuartals Ew.PlayerAccountConf.QuartalsPerPlayer~)^;
						(RQ (ActiveQuartals~ 0) Ident)~ Exe
					);
					Done ias (
						RestoreActiveQ~ Exe
						(Deactivate.A releasequartal)^
						Deactivate~ Exe
					);
					Reset ias (
						RestoreActiveQ~ Exe
						(Deactivate.A resetquartal)^
						Deactivate~ Exe
					);
				);
				BattleFieldDone ias (
					(NotSelectedBF true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (battlefield))) Gate;
					(NotSelectedBF false) ias (
						((Player Id~) Tx (ModeInfo.ModeBattle~ destroybf Id~ ((Id~ 0)))) Gate
					);
					(NotSelectedBF (Resources.SelectedBattle~ nil) Ident)~ Exe 
				);
				BattleFieldReset ias (
					(NotSelectedBF true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (battlefield))) Gate;
					(NotSelectedBF false) ias (
						((Player Id~) Tx (ModeInfo.ModeBattle~ resetbf Id~ ((Id~ 0)))) Gate
					);
					(NotSelectedBF (Resources.SelectedBattle~ nil) Ident)~ Exe 
				);
				ResourceManagerDone ias ((Player Id~) Tx (ModeInfo.ModeResourceMgr~ exit Id~ ())) Gate;
				/* set of player's battles */
				Battles ias ();
				/* Selected battle */
				SelectedBattle ias nil;
				/* Business development factor */
				Business ias (
					RQ ias 0; // quantum
#if (business)
					GDevelop ias 0;		// see StrategyGame_Hiring&Dismiss
					GContain ias 0; 	// see StrategyGame_Hiring&Dismiss (mentioned as hospitality)
#endif
					Value ias nil;
					Result ias false;
					Init ias (
						/* by resource type */
#if (business)
						(GDevelop 0)^
						(GContain 0)^
						(Update.From (Ew.BusinessConf.Factors~ (Ew.BusinessConf.GDevelop~) (Ew.BusinessConf.GContain~) Ew.BusinessConf.UnitsInfo~))^
#else
						(Update.From (Ew.BusinessConf.Factors~))^
#endif
						Update~ Exe
#if (verbose)
						((Player Id~ initialized business factor resources) Ew.Output~) Do
#endif
					);
					Update ias (
						// ((<factors>)(<gdevelop>))
						From ias nil;
						UpdateFactors ias (
							// factors' indexes inside Factors entity
							FType ias 0;
							BDFactor ias 1;
							KFactor ias 2;
							// example: ((vodka 0 1) (food 0 1) (gold 0 1) (viski 0 1))
							F ias nil;
							AssociateByRt ias (
								(Type ($~ FType~) Get)^
								((Bdf Type~) ($~ BDFactor~) Get)^
								((Bdf Type~) Business true) Context
								((Kdf Type~) ($~ KFactor~) Get)^
								((Kdf Type~) Business true) Context
#if (verbose)
								((Player Id~ has factors for (Bdf Type~) (Bdf Type~)~ and (Kdf Type~) (Kdf Type~)~) Ew.Output~) Do 
#endif
							);
							(F~ AssociateByRt~) ForEach
						);
#if (business)
						UpdateGDevelop ias (
							// (<number>)
							F ias nil;
							(GDevelop (F~ 0) Get)^
#if (verbose)                           	
							((Player Id~ has gdevelop factor GDevelop~) Ew.Output~) Do 
#endif
						);

						UpdateGContain ias (
							// (<number>)
							F ias nil;
							(GContain (F~ 0) Get)^
#if (verbose)                           	
							((Player Id~ has gcontain factor GContain~) Ew.Output~) Do 
#endif
						);

						UpdateUnitsInfo ias (
							F ias nil;
							K ias nil;
							(Ignore false) ias (
								ParseInfo ias (
									// parses property
									(PP clazz) ias (
										// setups Q counter (Q kind class); see TakeOnBoardUnit
										SQC ias (
											// quantity
											((Q K~ $~) 0)^
											// make it addressable -> Resources.Business
											((Q K~ $~) Business true) Context
#if (verbose)                                           	
											((Player Id~ initialized (Q K~ $~) to (Q K~ $~)~) Ew.Output~) Do
#endif                                                  	
										);
										// available classes
										((P~ 1) Get SQC~) ForEach
									);
									// kind of unit
									(K ($~ 0) Get)^
									// properties
									(P ($~ 1) Get)^
									(PP (P~ 0) Get)~ Exe
								);
								(F~ ParseInfo~) ForEach
							);
							(Ignore true) ias doNothing;
							(Ignore (F~ nil) Ident)~ Exe
						);

						(UpdateGDevelop.F (From~ 1) Get)^
						UpdateGDevelop~ Exe
						(UpdateGContain.F (From~ 2) Get)^
						UpdateGContain~ Exe
						(UpdateUnitsInfo.F (From~ 3) Get)^
						UpdateUnitsInfo~ Exe
#endif // business
						(UpdateFactors.F  (From~ 0) Get)^
						UpdateFactors~ Exe
					);
					Report ias (
#if (release)
						Fs ias ();
#endif
						Report ias (
							(T ($~ 0) Get)^
#if (verbose)
							((Player Id~ has business conf for resource (Bdf T~) (Bdf T~)~ and (Kdf T~) (Kdf T~)~) Ew.Output~) Do
#endif
#if (release)
							(Fs (Fs~ ((T~ (Bdf T~)~ (Kdf T~)~))) Join)^
#endif
						);
						(Ew.BusinessConf.Factors~ Report~) ForEach
#if (verbose)
						((Player Id~ compiled business factors Fs~) Ew.Output~) Do
#endif
#if (release)
						(((business factor done) (player Id~) Fs~) Ew.OutChannel~) Do
#endif
					);
					IncreaseBF ias (
						(ByBdfType (Bdf (Value~ 1) Get))^
						(ByBdfType~ ((ByBdfType~~ (Value~ 2) Get) Ew.Sum~) Do)^
						(Result true)^
#if (verbose)
						((Player Id~ increased business dev factor ByBdfType~ on (Value~ 2) Get balance is ByBdfType~~) Ew.Output~) Do
#endif
#if (release)
						(((business factor done)(player Id~)((ByBdfType~ 1) Get (Value~ 2) Get ByBdfType~~)) Ew.OutChannel~) Do
#endif
					);
					DecreaseBF ias (
						(Allow -1) ias (
							(Result false)^
#if (verbose)
							((Player Id~ does not have enougth resources ByBdfType~~ on ByBdfType~ required (Value~ 2) Get) Ew.Output~) Do
#endif
						);
						(Allow 0),(Allow 1) ias (
							(Result true)^
							(ByBdfType~ ((ByBdfType~~ (Value~ 2) Get) Ew.Sub~) Do)^
#if (verbose)
							((Player Id~ decreased business dev factor (Value~ 2) Get balance is ByBdfType~~ for ByBdfType~) Ew.Output~) Do
#endif
#if (release)
							(((business factor done)(player Id~)((ByBdfType~ 1) Get (Value~ 2) Get ByBdfType~~)) Ew.OutChannel~) Do
#endif
						);
						(ByBdfType (Bdf (Value~ 1) Get))^
						(Allow ((ByBdfType~~ (Value~ 2) Get) Ew.Compare~) Do)~ Exe
					);
					RecalcRQuantum ias (
						// (Id~ Resource.Type~ Resource.Quantum~ LInvestQuantum~)
						(RQ (( (Value~ 2) Get (Value~ 3) Get (Kdf (Value~ 1) Get)~) Ew.RecalcQuantum~) Do)^
#if (verbose)
						((Player Id~ new contribution quantum for (Value~ 1) Get is RQ~) Ew.Output~) Do
#endif
					);
				);
				/* Account's information */
				Account ias (
					Value ias nil;
					Result ias false;
					Init ias (
						/* by resource type */
						(Update.From Ew.PlayerAccountConf.ResourceTypes~)^
						Update~ Exe
#if (verbose)
						((Player Id~ initialized account resources) Ew.Output~) Do
#endif
					);
					Update ias (
						From ias nil;
						AssociateByRt ias (
							(Type ($~ 0) Get)^
							((Rt Type~) ($~ 1) Get)^
							((Rt Type~) Account true) Context
#if (verbose)
							((Player Id~ has resource (Rt Type~) (Rt Type~)~) Ew.Output~) Do 
#endif
						);
						(From~ AssociateByRt~) ForEach
					);
					Report ias (
						AccountReport ias (
#if (verbose)
							((Player Id~ has resource (($~ 0) Get (Rt ($~ 0) Get)~)) Ew.Output~) Do
#endif
#if (release)
							(((banking balance done)(player Id~)(($~ 0) Get (Rt ($~ 0) Get)~)) Ew.OutChannel~) Do
#endif
						);
						(Ew.PlayerAccountConf.ResourceTypes~ AccountReport~) ForEach
					);
					Recharge ias (
						(ByRtType (Rt (Value~ 1) Get))^
						(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.Sum~) Do)^
						(Result true)^
#if (verbose)
						((Player Id~ recharged account ByRtType~ on (Value~ 2) Get balance is ByRtType~~) Ew.Output~) Do
#endif
#if (release)
						(((banking recharge done)(player Id~)((ByRtType~ 1) Get (Value~ 2) Get ByRtType~~)) Ew.OutChannel~) Do
#endif
					);
					Withdraw ias (
						(Allow -1) ias (
							(Result false)^
#if (verbose)
							((Player Id~ does not have enougth resources ByRtType~~ on account ByRtType~ required (Value~ 2) Get) Ew.Output~) Do
#endif
						);
						(Allow 0),(Allow 1) ias (
							(Result true)^
							(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.Sub~) Do)^
#if (verbose)
							((Player Id~ withdrawed (Value~ 2) Get balance is ByRtType~~ for account ByRtType~) Ew.Output~) Do
#endif
#if (release)
							(((banking withdraw done)(player Id~)((ByRtType~ 1) Get (Value~ 2) Get ByRtType~~)) Ew.OutChannel~) Do
#endif
						);
						(ByRtType (Rt (Value~ 1) Get))^
						(Allow ((ByRtType~~ (Value~ 2) Get) Ew.Compare~) Do)~ Exe
					);
				);
				Hiring ias (
					Init ias (
						((HiringAgency Id~)->Id Id~)^
						((HiringAgency Id~)->Owner Id~)^
						(HiringAgency Id~)->Init~ Exe
						((HiringAgency Id~)) Activate
					);
					Done ias (
						(HiringBroker.CommandId exit)^
						(HiringBroker.RequestId nil)^
						(HiringBroker.CommandParams ())^
						HiringBroker~ Exe
					);
					Reset ias (
						(HiringBroker.CommandId reset)^
						(HiringBroker.RequestId nil)^
						(HiringBroker.CommandParams ())^
						HiringBroker~ Exe
					);
				);
				Attacking ias (
					Init ias (
						((AttackManager Id~)->Id Id~)^
						((AttackManager Id~)->PlayerId Id~)^
						(AttackManager Id~)->Init~ Exe
					);
				);
				PreInit ias (
					ResourceManager.Init~ Exe
					Units.Init~ Exe
					Account.Init~ Exe
					Business.Init~ Exe
					Attacking.Init~ Exe
				);
				Init ias (
					(InitSteps (hiringagency quartals))^
					(InitSteps () InitDone~) StartInterception
					PreInit~ Exe
					Quartals.Init~ Exe
					Hiring.Init~ Exe
				);
				// light init, after reset
				LInit ias (
					PreInit~ Exe
					Quartals.LInit~ Exe
				);
				Done ias (
					BattleFieldDone~ Exe
				);
				Reset ias (
					BattleFieldReset~ Exe
				);
			);
		);
	);
}
