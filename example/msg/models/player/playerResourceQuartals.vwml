module PlayerResourceQuartals {
	MagicWorld ias (
		Player ias (
			Resources ias (
				ActiveQuartals ias 0;
				/* controlled/own/visible quartals */
				Quartals ias (
					/* player is owner, at least, of one quartal */
					Own ias ();
					/* set of quartals controlled by player */
					Controlled ias ();
					/* player knows about these quartals but doesn't have control upon them */
					Visible ias ();
					/* number of active quartals, including quartals of bosses */
					NumOfActiveQuartals ias 0;
					// builds Construct entity on behalf of boss
					ConstructBuilder ias (
						B ias nil;
						(Construct (Construct B~) defer) Born
					);
					// prepares entities which are used by quartal during exit operation
					OnExitC ias (
						QId ias nil;
						Requester ias nil;
						
						(Requester Player),(Requester nil) ias (
							// release regular quartal
							((ReleaseRQ QId~) (ModeInfo.ModeDeal~ releasedquartal QId~ (QId~)))^
							((ReleaseRQ QId~) OnExitC true) Context
						);
						(Requester Boss) ias (
							// release boss quartal
							((ReleaseBQ QId~) (ModeInfo.ModeBossOfDistrict~ releasedquartal (Requester~ 1) Get (QId~)))^
							((ReleaseBQ QId~) OnExitC true) Context
						);
						(Requester (Requester~ 0) Get)~ Exe
					);
					/* constructs set of quartals */
					Construct ias (
						// player's id
						PId ias nil;
						// mode (regular or boss)
						M ias nil;
						// requester
						R ias nil;
						// start from
						F ias 0;
						// qurtals to construct
						N ias 0;
						// external completition callback
						CB ias nil;
						// This entity is monitored by interceptor for regular mode
						RQN ias 0;
						// This entity is monitored by interceptor for boss's mode
						BQN ias 0;
						// predefined quartals' configuration
						PQConf ias nil;

						EQN ias nil;
						// internal completition callback
						ICB ias (
							(EQN~ 0) FinishInterception
							CB~ Exe
						);
						(M nil),(M regular) ias (
							(EQN RQN)^
							(RQN N~)^
#if (verbose)
							((Initialized regular RQN~ quartals for player PId~) Ew.Output~) Do
#endif
							// waits untill all regular quartals are initialized
							(RQN 0 ICB~) StartInterception
						);
						(M boss) ias (
							(EQN BQN)^
							(BQN N~)^
#if (verbose)
							((Initialized BQN~ quartals for boss for player PId~) Ew.Output~) Do
#endif
							// waits untill all boss's quartals are initialized
							(BQN 0 ICB~) StartInterception
						);
						ActivateQuartal ias (
							QId ias nil;
							QConf ias nil;
							// sets predefined quartal's conf
							SetQConf ias (
								(QConf true) ias doNothing;
								(QConf false) ias (
									((Quartal QId~)->(Resource)->(Update)->QConf (QConf~ 0) Get)^
									((Quartal QId~)->(Resource)->(Update)->BribeR (QConf~ 1) Get)^
								);
								(QConf (QConf~ nil) Ident)~ Exe
							);
							(QReady false) ias (
								(Quartal (Quartal QId~) defer) Born
#if (verbose)
								((R~ PId~ created quartal (Quartal QId~) by request) Ew.Output~) Do
#endif
								(QReady true)~ Exe
							);
							// quartal's activation
							(QReady true) ias (
								(OnExitC.QId QId~)^
								(OnExitC.Requester R~)^
								OnExitC~ Exe								
								((Quartal QId~)->Id QId~)^
								((Quartal QId~)->Owner PId~)^
								((Quartal QId~)->(Resource)->Requester R~)^
								SetQConf~ Exe
								((Quartal QId~)) Activate
							);
							// checks if quartal has already been created
							(QReady (Quartal QId~) EI)~ Exe
						);
						(N true) ias (
							SQ ias (
								(ActivateQuartal.QId ($~ 0) Get)^
								(ActivateQuartal.QConf ($~ 1) Get)^
								ActivateQuartal~ Exe 
							);
							(S true) ias (
								(RQN 0)^
								(BQN 0)^
#if (verbose)                                           
								((No any quartals initialized on init phase for player PId~) Ew.Output~) Do
#endif
							);
							(S false) ias (
								(N (PQConf~) Size)^
#if (verbose)                                           
								((Initialized predefined quartals for boss for player PId~) Ew.Output~) Do
#endif
								(M M~)~ Exe
								(PQConf~ SQ~) ForEach
							);
							(S (PQConf~ nil) Ident)~ Exe
						);
						(N false) ias (
							// iterated quartals
							IQ ias (
								(ActivateQuartal.QId (PId~ (($~ F~) Ew.Sum~) Do))^
								ActivateQuartal~ Exe 
							);
							(N~ IQ~) Repeat
						);
						(RQN 0)^
						(BQN 0)^
						(EQN nil)^
						(M M~)~ Exe
						(N (N~ 0) Ident)~ Exe
					);
					
					Init ias (
						NotifyAboutAllInitializedQuartals ias (
							(InitSteps (InitSteps~ (quartals)) Substruct)^
#if (verbose)
							((Player Id~ quartals initialized left init steps InitSteps~) Ew.Output~) Do							
#endif
						);
						// create battlefield and associate it with quartal
						((Player Id~) Tx (ModeInfo.ModeBattle~ createbf Id~ ((Id~ 0)))) Gate
						(Controlled ())^
						(Visible ())^
						(Own ())^
						(NumOfActiveQuartals Ew.PlayerAccountConf.QuartalsPerPlayer~)^
						(Construct.M regular)^
						(Construct.PId Id~)^
						(Construct.R (Player Id~))^
						(Construct.F 0)^
						(Construct.N NumOfActiveQuartals~)^
						(Construct.CB NotifyAboutAllInitializedQuartals~)^
						Construct~ Exe
						LInit~ Exe
					);
					LInit ias (
						(ActiveQuartals NumOfActiveQuartals~)^
					);
					Deactivate ias (
						A ias nil;
						AllOwnQurtalsDeactivated ias (
							(ActiveQuartals 0) FinishInterception
							// send message to player about closing all own quartals
							((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (quartals))) Gate
						);
						(NoQuartals true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (quartals))) Gate;
						(NoQuartals false) ias (
							ResetQuartal ias ((Player Id~) Tx (ModeInfo.ModeDeal~ A~ Id~ ($~))) Gate;
							(ActiveQuartals 0 AllOwnQurtalsDeactivated~) StartInterception
							(Own~ ResetQuartal~) ForEach
						);
#if (verbose)
						((Player Id~ deactivates quartals ActiveQuartals~ Own~) Ew.Output~) Do
#endif
						(NoQuartals (Own~ ()) Ident)~ Exe
					);
					RestoreActiveQ ias (ActiveQuartals NumOfActiveQuartals~)^;
					Done ias (
						RestoreActiveQ~ Exe
						(Deactivate.A releasequartal)^
						Deactivate~ Exe
					);
					Reset ias Done~ Exe;
				);
			);
		);
	);
}
