module Player {
	MagicWorld ias (
		Command ias (
			Format ias (
				ModeIndex ias 0;
				CommandIndex ias 1;
				ParamsIndex ias 3;
				Battle ias (
					UnitIdIndex ias 2;
				);
				Hiring ias (
					RequestIdIndex ias 2;
				);
				Attack ias (
					UnitIdIndex ias 2;
				);
			);
		);
		ModeInfo ias (
			ModeDeal ias deal;
			ModeGarage ias garage;
			ModeBattle ias battle;
			ModeMain ias main;
			ModeResourceMgr ias resourcemanager;
			ModeHiring ias hiring;
			ModeAttack ias attack;
			ModeBanking ias banking;
			AvailableModes ias (ModeMain~ ModeBattle~ ModeDeal~ ModeGarage~ ModeResourceMgr~ ModeHiring~ ModeAttack~ ModeBanking~);
			AvailablePlayerCommandsOnResourceManager ias (hireunit dismissunit takeunit returnunit releaseunit saleunit unitstopped getunits joinunits ackjoinunits rejectjoinunits disjoinunits ackdisjoinunits rejectdisjoinunits exit);
			AvailablePlayerCommandsOnModeHiring  ias (startcarlooking cancelcarlooking carpaymentresult starthiring cancelhiring staffpaymentresult reservegarageresult cancel check reset exit report);
			AvailablePlayerCommandsOnModeBattle  ias (createbf destroybf resetbf selectbf requestbattlestatusbf responsebattlestatusbf);
			AvailablePlayerCommandsOnModeMain    ias (setmode back requeststopplayerworld partclosed playerworldstopped playerworldresetted resettoinitialstate updateaccount updatebusinessconf getbalance qinitialized hainitialized extbattleresult updatecashierconf);
			AvailablePlayerCommandsOnModeDeal    ias (setintention linkquartal unlinkquartal releasequartal releasedquartal resetquartal resettedquartal quartalreport payforunit dealpayment contribution returnpayment rqcalcquantum bdfchange reservegarageplace cancelreservationgarageplace back);
			AvailablePlayerCommandsOnModeGarageDeal ias (reservegarageplace cancelreservationgarageplace invest cancelinvest updategarageconf back);
			AvailablePlayerCommandsOnModeBanking ias (withdraw recharge back);
			AvailablePlayerCommandsOnModeAttack  ias (requestbattlestatusbf responsebattlestatusbf);
			(AvailableModes AvailableModes~ Exe)^
			BattleField.ExportCommands~ Exe
			(AvailablePlayerCommandsOnModeBattle (AvailablePlayerCommandsOnModeBattle~ BattleField.ExportedCommands~) Join)^
			(AvailablePlayerCommandsOnModeAttack (AvailablePlayerCommandsOnModeAttack~ AttackManager.ExportedCommands~) Join)^
		);
		Player ias (
			ResetMode ias false;
			States ias (active nonactive resetted);
			Activities ias (resourcemanager quartals battlefield hiringagency);
			ActiveModes ias (ModeInfo.ModeDeal~ ModeInfo.ModeBattle~ ModeInfo.ModeHiring~);
			Mode ias main;
			Id ias nil;
			Stop ias false;
			State ias nonactive;

			HandlePlayerCommandOnModeBattle ias (
				(BattleManager.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(BattleManager.To (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Battle.UnitIdIndex~) Get)^
				(BattleManager.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				BattleManager~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandOnModeMain ias (
				(StopPlayer false) ias PlayerLifeStep~ Exe;
				(StopPlayer true) ias (
#if (verbose)
					((The player Id~ stopped) Ew.Output~) Do
#endif
				);
				(Main.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Main.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Main~ Exe
				(StopPlayer (Stop~ true) Ident)~ Exe
			);
			HandlePlayerCommandOnModeDeal ias (
				(Deal.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Deal.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Deal~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandOnModeGarageDeal ias (
				(GarageDeal.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(GarageDeal.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				GarageDeal~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandOnModeBanking ias (
				(Banking.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Banking.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Banking~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnResourceManager ias (
				(ResourceManager.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(ResourceManager.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				ResourceManager~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnModeHiring ias (
				(HiringBroker.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(HiringBroker.RequestId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Hiring.RequestIdIndex~) Get)^
				(HiringBroker.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				HiringBroker~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnModeAttack ias (
				(AttackBroker.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(AttackBroker.To (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Attack.UnitIdIndex~) Get)^
				(AttackBroker.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				AttackBroker~ Exe
				PlayerLifeStep~ Exe
			);
			CommandDispatcher ias (
				NonForcedMode ias nil;
				Dispatch ias nil;
				CommandSet ias nil;
				Handler ias nil;
				CheckAndHandleCommand ias (
					Cmd ias nil;
					(RightCommand true) ias Handler~ Exe;
					(RightCommand false) ias (
#if (verbose)
						((The player Id~ received unsupported command Cmd~) Ew.Output~) Do
#endif
						PlayerLifeStep~ Exe
					);
					(Cmd (Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
#if (verbose)
					((The player Id~ received command Dispatch~ to dispatch commands set CommandSet~) Ew.Output~) Do
#endif
					(RightCommand (CommandSet~ Cmd~) In)~ Exe
				);
				(mode main) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeMain~)^
					(Handler HandlePlayerCommandOnModeMain~)^
				);
				(mode deal) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeDeal~)^
					(Handler HandlePlayerCommandOnModeDeal~)^
				);
				(mode garage) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeGarageDeal~)^
					(Handler HandlePlayerCommandOnModeGarageDeal~)^
				);
				(mode banking) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeBanking~)^
					(Handler HandlePlayerCommandOnModeBanking~)^
				);
				(mode battle) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeBattle~)^
					(Handler HandlePlayerCommandOnModeBattle~)^
				);
				(mode resourcemanager) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnResourceManager~)^
					(Handler HandlePlayerCommandsOnResourceManager~)^
				);
				(mode hiring) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeHiring~)^
					(Handler HandlePlayerCommandsOnModeHiring~)^
				);
				(mode attack) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeAttack~)^
					(Handler HandlePlayerCommandsOnModeAttack~)^
				);
				(mode global) ias HandlePlayerGlobalCommand~ Exe;
				(NonForcedMode false) ias (Mode NonForcedMode~)^;
				(NonForcedMode true) ias doNothing;

				(NonForcedMode (Dispatch~ MagicWorld.Command.Format.ModeIndex~) Get)^
				(NonForcedMode (NonForcedMode~ nil) Ident)~ Exe
				(mode Mode~)~ Exe
				CheckAndHandleCommand~ Exe
			);
			/* Player's lifestep */
			PlayerLifeStep ias (
				(ready false) ias (
					(CommandDispatcher.Dispatch nil)^
					PlayerLifeStep~ Exe
				);
				(ready true) ias (
					(CommandDispatcher.Dispatch ((Player Id~) Rx) Gate)^
					CommandDispatcher~ Exe
				);
				(ready (((Player Id~) Ready) Gate true) Ident)~ Exe
			);
			lifeterm = (
				(ResetMode false)^
				(Stop false)^
				(State active)^
				(Activities (resourcemanager quartals battlefield hiringagency))^
#if (verbose)
				((The player Id~ added and active) Ew.Output~) Do
#endif
				((Player Id~) Register blocked) Gate
				(ActiveModes ActiveModes~ Exe)^
#if (verbose)
				((The player Id~ has available modes ModeInfo.AvailableModes~ and active ActiveModes~) Ew.Output~) Do
#endif
				Resources.Init~ Exe
				(Services.SignalUnit (SignalUnit Player Id~)) Born
				PlayerLifeStep~ Exe
				((Services)->(SignalUnit Player Id~)) Release
				((AttackManager Id~)) Release
				((Player Id~) Unregister) Gate
				(State nonactive)^
#if (verbose)
				((The player Id~ deactivated) Ew.Output~) Do
#endif
				(PlayersManager.Players (PlayersManager.Players~ ((Player Id~))) Substruct)^

			) Exe
		);
	);
}
