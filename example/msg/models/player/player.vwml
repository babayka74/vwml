module Player {
	MagicWorld ias (
		Command ias (
			Format ias (
				ModeIndex ias 0;
				CommandIndex ias 1;
				ParamsIndex ias 3;
				Battle ias (
					UnitIdIndex ias 2;
				);
				Hiring ias (
					RequestIdIndex ias 2;
				);
				Attack ias (
					UnitIdIndex ias 2;
				);
			);
		);
		ModeInfo ias (
			ModeDeal ias deal;
			ModeBattle ias battle;
			ModeMain ias main;
			ModeResourceMgr ias resourcemanager;
			ModeHiring ias hiring;
			ModeAttack ias attack;
			ModeBanking ias banking;
			AvailableModes ias (ModeMain~ ModeBattle~ ModeDeal~ ModeResourceMgr~ ModeHiring~ ModeAttack~ ModeBanking~);
			AvailablePlayerCommandsOnResourceManager ias (hireunit dismissunit takeunit returnunit releaseunit unitstopped exit);
			AvailablePlayerCommandsOnModeHiring  ias (starthiring cancelhiring paymentresult exit check report);
			AvailablePlayerCommandsOnModeBattle  ias (createbf destroybf selectbf requestbattlestatusbf responsebattlestatusbf);
			AvailablePlayerCommandsOnModeMain    ias (setmode back requeststopplayerworld partclosed playerworldstopped updateaccount getbalance);
			AvailablePlayerCommandsOnModeDeal    ias (setintention linkquartal unlinkquartal releasequartal quartalreport payforunit payquartalinfo paybribe contribution returnpayment back);
			AvailablePlayerCommandsOnModeBanking ias (withdraw recharge back);
			AvailablePlayerCommandsOnModeAttack  ias (requestbattlestatusbf responsebattlestatusbf);
			(AvailableModes AvailableModes~ Exe)^
			BattleField.ExportCommands~ Exe
			(AvailablePlayerCommandsOnModeBattle (AvailablePlayerCommandsOnModeBattle~ BattleField.ExportedCommands~) Join)^
			(AvailablePlayerCommandsOnModeAttack (AvailablePlayerCommandsOnModeAttack~ AttackManager.ExportedCommands~) Join)^
		);
		Player ias (
			States ias (active nonactive);
			Activities ias (resourcemanager quartals battlefield hiringagency);
			ActiveModes ias (ModeInfo.ModeDeal~ ModeInfo.ModeBattle~ ModeInfo.ModeHiring~);
			Mode ias main;
			Id ias nil;
			Stop ias false;
			State ias nonactive;
			Resources ias (
				/* available units */
				Units ias (
					Hired ias ();
					/* shared entity which stores units' current state (position) */
					UnitsStateSet ias ();
					UnitsStateSetLocker ias nil;
					Init ias (
						(Hired ())^
						((Player Id~ initialized hired units storage) Ew.Output~) Do
					);
				);
				/* controlled/own/visible quartals */
				Quartals ias (
					/* player is owner, at least, of one quartal */
					Own ias ();
					/* set of quartals controlled by player */
					Controlled ias ();
					/* player knows about these quartals but doesn't have control upon them */
					Visible ias ();
					Init ias (
						ActivateQuartal ias (
							(QReady false) ias (
								(Quartal (Quartal (Id~ $~)) defer) Born
#if (verbose)
								((Player Id~ created quartal (Quartal (Id~ $~)) by request) Ew.Output~) Do
#endif
								(QReady true)~ Exe
							);
							// quartal's activation
							(QReady true) ias (
								((Quartal (Id~ $~))->Id (Id~ $~))^
								((Quartal (Id~ $~))->Owner Id~)^
								((Quartal (Id~ $~))) Activate
								// links quartal to given player
								((Player Id~) Tx (ModeInfo.ModeDeal~ linkquartal Id~ ((Id~ $~)))) Gate
							);
							// checks if quartal has already been created
							(QReady (Quartal (Id~ $~)) EI)~ Exe
						);
						(Controlled ())^
						(Visible ())^
						(Own ())^
						(Ew.PlayerAccountConf.QuartalsPerPlayer~ ActivateQuartal~) Repeat
						// create battlefield and associate it with quartal
						((Player Id~) Tx (ModeInfo.ModeBattle~ createbf Id~ ((Id~ 0)))) Gate
						((Player Id~ created and initialized own quartals) Ew.Output~) Do
					);
					Done ias (
						AllOwnQurtalsClosed ias (
							(Own () AllOwnQurtalsClosed~) FinishInterception
							// send message to player about closing all own quartals
							((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (quartals))) Gate
						);
						(NoQuartals true) ias (
						);
						(NoQuartals false) ias (
							// sent 'exit' command and quartal sends 'unlinkquartal' back as response
							(Own () AllOwnQurtalsClosed~) StartInterception
							DeactivateQuartal ias ((Player Id~) Tx (ModeInfo.ModeDeal~ releasequartal Id~ ($~))) Gate;
							(Own~ DeactivateQuartal~) ForEach
						);
						(NoQuartals (Own~ ()) Ident)~ Exe
					);
				);
				BattleFieldDone ias (
					(NotSelectedBF true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (battlefield))) Gate;
					(NotSelectedBF false) ias (
						((Player Id~) Tx (ModeInfo.ModeBattle~ destroybf Id~ ((Id~ 0)))) Gate
					);
					(NotSelectedBF (Resources.SelectedBattle~ nil) Ident)~ Exe 
				);
				ResourceManagerDone ias ((Player Id~) Tx (ModeInfo.ModeResourceMgr~ exit Id~ ())) Gate;
				/* set of player's battles */
				Battles ias ();
				/* Selected battle */
				SelectedBattle ias nil;
				/* Account's information */
				Account ias (
					Value ias nil;
					Result ias false;
					Init ias (
						/* by resource type */
						(Update.From Ew.PlayerAccountConf.ResourceTypes~)^
						Update~ Exe
#if (verbose)
						((Player Id~ initialized account resources) Ew.Output~) Do
#endif
					);
					Update ias (
						From ias nil;
						AssociateByRt ias (
							(Type ($~ 0) Get)^
							((Rt Type~) ($~ 1) Get)^
							((Rt Type~) Account true) Context
#if (verbose)
							((Player Id~ has resource (Rt Type~) (Rt Type~)~) Ew.Output~) Do 
#endif
						);
						(From~ AssociateByRt~) ForEach
					);
					Report ias (
						AccountReport ias (
#if (verbose)
							((Player Id~ has resource (($~ 0) Get (Rt ($~ 0) Get)~)) Ew.OutChannel~) Do
#endif
#if (release)
							(((banking balance done)(player Id~)(($~ 0) Get (Rt ($~ 0) Get)~)) Ew.OutChannel~) Do
#endif
						);
						(Ew.PlayerAccountConf.ResourceTypes~ AccountReport~) ForEach
					);
					Recharge ias (
						(ByRtType (Rt (Value~ 1) Get))^
						(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.Sum~) Do)^
						(Result true)^
#if (verbose)
						((Player Id~ recharged account ByRtType~ on (Value~ 2) Get balance is ByRtType~~) Ew.Output~) Do
#endif
#if (release)
						(((banking recharge done)(player Id~)((ByRtType~ 1) Get (Value~ 2) Get ByRtType~~)) Ew.OutChannel~) Do
#endif
					);
					Withdraw ias (
						(Allow -1) ias (
							(Result false)^
							((Player Id~ does not have enougth resources ByRtType~~ on account ByRtType~ required (Value~ 2) Get) Ew.Output~) Do
						);
						(Allow 0),(Allow 1) ias (
							(Result true)^
							(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.Sub~) Do)^
#if (verbose)
							((Player Id~ withdrawed (Value~ 2) Get balance is ByRtType~~ for account ByRtType~) Ew.Output~) Do
#endif
#if (release)
							(((banking withdraw done)(player Id~)((ByRtType~ 1) Get (Value~ 2) Get ByRtType~~)) Ew.OutChannel~) Do
#endif
						);
						(ByRtType (Rt (Value~ 1) Get))^
						(Allow ((ByRtType~~ (Value~ 2) Get) Ew.Compare~) Do)~ Exe
					);
				);
				Hiring ias (
					Init ias (
						((HiringAgency Id~)->Id Id~)^
						((HiringAgency Id~)->Owner Id~)^
						(HiringAgency Id~)->Init~ Exe
						((HiringAgency Id~)) Activate
					);
					Done ias (
						(HiringBroker.CommandId exit)^
						(HiringBroker.RequestId nil)^
						(HiringBroker.CommandParams ())^
						HiringBroker~ Exe
					);
				);
				Attacking ias (
					Init ias (
						((AttackManager Id~)->Id Id~)^
						((AttackManager Id~)->PlayerId Id~)^
						(AttackManager Id~)->Init~ Exe
					);
				);
				Init ias (
					Units.Init~ Exe
					Account.Init~ Exe
					Hiring.Init~ Exe
					Attacking.Init~ Exe
					Quartals.Init~ Exe
				);
				Done ias (
					BattleFieldDone~ Exe
				);
			);
			HandlePlayerCommandOnModeBattle ias (
				(BattleManager.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(BattleManager.To (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Battle.UnitIdIndex~) Get)^
				(BattleManager.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				BattleManager~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandOnModeMain ias (
				(StopPlayer false) ias PlayerLifeStep~ Exe;
				(StopPlayer true) ias ((The player Id~ stopped) Ew.Output~) Do;
				(Main.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Main.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Main~ Exe
				(StopPlayer (Stop~ true) Ident)~ Exe
			);
			HandlePlayerCommandOnModeDeal ias (
				(Deal.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Deal.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Deal~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandOnModeBanking ias (
				(Banking.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Banking.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Banking~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnResourceManager ias (
				(ResourceManager.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(ResourceManager.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				ResourceManager~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnModeHiring ias (
				(HiringBroker.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(HiringBroker.RequestId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Hiring.RequestIdIndex~) Get)^
				(HiringBroker.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				HiringBroker~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnModeAttack ias (
				(AttackBroker.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(AttackBroker.To (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Attack.UnitIdIndex~) Get)^
				(AttackBroker.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				AttackBroker~ Exe
				PlayerLifeStep~ Exe
			);
			CommandDispatcher ias (
				NonForcedMode ias nil;
				Dispatch ias nil;
				CommandSet ias nil;
				Handler ias nil;
				CheckAndHandleCommand ias (
					Cmd ias nil;
					(RightCommand true) ias Handler~ Exe;
					(RightCommand false) ias (
						((The player Id~ received unsupported command Cmd~) Ew.Output~) Do
						PlayerLifeStep~ Exe
					);
					(Cmd (Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
					((The player Id~ received command Dispatch~ to dispatch commands set CommandSet~) Ew.Output~) Do
					(RightCommand (CommandSet~ Cmd~) In)~ Exe
				);
				(mode main) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeMain~)^
					(Handler HandlePlayerCommandOnModeMain~)^
				);
				(mode deal) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeDeal~)^
					(Handler HandlePlayerCommandOnModeDeal~)^
				);
				(mode banking) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeBanking~)^
					(Handler HandlePlayerCommandOnModeBanking~)^
				);
				(mode battle) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeBattle~)^
					(Handler HandlePlayerCommandOnModeBattle~)^
				);
				(mode resourcemanager) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnResourceManager~)^
					(Handler HandlePlayerCommandsOnResourceManager~)^
				);
				(mode hiring) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeHiring~)^
					(Handler HandlePlayerCommandsOnModeHiring~)^
				);
				(mode attack) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeAttack~)^
					(Handler HandlePlayerCommandsOnModeAttack~)^
				);
				(mode global) ias HandlePlayerGlobalCommand~ Exe;
				(NonForcedMode false) ias (Mode NonForcedMode~)^;
				(NonForcedMode true) ias doNothing;

				(NonForcedMode (Dispatch~ MagicWorld.Command.Format.ModeIndex~) Get)^
				(NonForcedMode (NonForcedMode~ nil) Ident)~ Exe
				(mode Mode~)~ Exe
				CheckAndHandleCommand~ Exe
			);
			/* Player's lifestep */
			PlayerLifeStep ias (
				(ready false) ias (
					(CommandDispatcher.Dispatch nil)^
					PlayerLifeStep~ Exe
				);
				(ready true) ias (
					(CommandDispatcher.Dispatch ((Player Id~) Rx) Gate)^
					CommandDispatcher~ Exe
				);
				(ready (((Player Id~) Ready) Gate true) Ident)~ Exe
			);
			lifeterm = (
				(Stop false)^
				(State active)^
				((The player Id~ added and active) Ew.Output~) Do
				((Player Id~) Register blocked) Gate
				(ActiveModes ActiveModes~ Exe)^
				((The player Id~ has available modes ModeInfo.AvailableModes~ and active ActiveModes~) Ew.Output~) Do
				Resources.Init~ Exe
				(Services.SignalUnit (SignalUnit Player Id~)) Born
				PlayerLifeStep~ Exe
				((Services)->(SignalUnit Player Id~)) Release
				((AttackManager Id~)) Release
				((Player Id~) Unregister) Gate
				(State nonactive)^
			) Exe
		);
	);
}
