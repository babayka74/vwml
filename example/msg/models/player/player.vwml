module Player {
	MagicWorld ias (
		Command ias (
			Format ias (
				ModeIndex ias 0;
				CommandIndex ias 1;
				ParamsIndex ias 3;
				Battle ias (
					UnitIdIndex ias 2;
				);
			);
		);
		ModeInfo ias (
			ModeDeal ias deal;
			ModeBattle ias battle;
			ModeMain ias main;
			ModeResourceMgr ias resourcemanager;
			ModeHiring ias hiring;
			ModeAttack ias attack;
			AvailableModes ias (ModeMain~ ModeBattle~ ModeDeal~ ModeResourceMgr~ ModeHiring~ ModeAttack~);
			AvailablePlayerCommandsOnResourceManager ias (hireunit dismissunit takeunit returnunit releaseunit);
			AvailablePlayerCommandsOnModeHiring ias (starthiring cancelhiring);
			AvailablePlayerCommandsOnModeBattle ias (createbf destroybf selectbf requestbattlestatusbf responsebattlestatusbf);
			AvailablePlayerCommandsOnModeMain   ias (setmode exit back dealstopped battlestopped);
			AvailablePlayerCommandsOnModeDeal   ias (setintention linkquartal unlinkquartal payquartalinfo paybribe contribution stop back);
			AvailablePlayerCommandsOnModeAttack ias (requestbattlestatusbf responsebattlestatusbf);
			(AvailableModes AvailableModes~ Exe)^
			BattleField.ExportCommands~ Exe
			(AvailablePlayerCommandsOnModeBattle (AvailablePlayerCommandsOnModeBattle~ (BattleField.ExportedCommands~)) Join)^
			(AvailablePlayerCommandsOnModeAttack (AvailablePlayerCommandsOnModeAttack~ (AttackManager.ExportedCommands~)) Join)^
		);
		Player ias (
			ActiveModes ias (ModeInfo.ModeDeal~ ModeInfo.ModeBattle~ ModeInfo.ModeHiring~);
			Mode ias main;
			Id ias nil;
			Stop ias false;
			Resources ias (
				/* available units */
				Units ias (
					Hired ias ();
					/* shared entity which stores units' current state (position) */
					UnitsStateSet ias ();
					UnitsStateSetLocker ias nil;
				);
				/* controlled/own/visible quartals */
				Quartals ias (
					/* player is owner, at least, of one quartal */
					Own ias nil;
					/* set of quartals controlled by player */
					Controlled ias ();
					/* player knows about these quartals but doesn't have control upon them */
					Visible ias ();
				);
				/* set of player's battles */
				Battles ias ();
				/* Selected battle */
				SelectedBattle ias nil;
				/* Account's information */
				Account ias (
					Value ias nil;
					Result ias false;
					Init ias (
						/* by resource type */
						AssociateByRt ias (
							(Type ($~ 0) Get)^
							((Rt Type~) ($~ 1) Get)^
							((Rt Type~) Account true) Context
							((Player Id~ initialized with resource (Rt Type~) (Rt Type~)~) Ew.Output~) Do 
						);
						(Ew.QuartalsConf.ResourceTypes~ AssociateByRt~) ForEach
					);
					Recharge ias (
						(ByRtType (Rt (Value~ 1) Get))^
						(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.Sum~) Do)^
						(Result true)^
						((Player Id~ recharged account ByRtType~ on (Value~ 2) Get balance is ByRtType~~) Ew.Output~) Do 
					);
					Withdraw ias (
						(Allow -1) ias (
							(Result false)^
							((Player Id~ does not have enougth resources ByRtType~~ on account ByRtType~ required (Value~ 2) Get) Ew.Output~) Do
						);
						(Allow 0),(Allow 1) ias (
							(Result true)^
							(ByRtType~ ((ByRtType~~ (Value~ 2) Get) Ew.Sub~) Do)^
							((Player Id~ withdrawed (Value~ 2) Get balance is ByRtType~~ for account ByRtType~) Ew.Output~) Do 
						);
						(ByRtType (Rt (Value~ 1) Get))^
						(Allow ((ByRtType~~ (Value~ 2) Get) Ew.Compare~) Do)~ Exe
					);
				);
				Init ias (
					(Quartals.Controlled ())^
					(Quartals.Visible ())^
					(Units.Hired ())^
					Account.Init~ Exe
				);
			);
			HandlePlayerCommandOnModeBattle ias (
				(BattleManager.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(BattleManager.To (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.Battle.UnitIdIndex~) Get)^
				(BattleManager.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				BattleManager~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandOnModeMain ias (
				(StopPlayer false) ias PlayerLifeStep~ Exe;
				(StopPlayer true) ias ((The player Id~ stopped) Ew.Output~) Do;
				(Main.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Main.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Main~ Exe
				(StopPlayer (ActiveModes~ ()) Ident)~ Exe
			);
			HandlePlayerCommandOnModeDeal ias (
				(Deal.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(Deal.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				Deal~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnResourceManager ias (
				(ResourceManager.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(ResourceManager.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				ResourceManager~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnModeHiring ias (
				(HiringBroker.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(HiringBroker.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				HiringBroker~ Exe
				PlayerLifeStep~ Exe
			);
			HandlePlayerCommandsOnModeAttack ias (
				(AttackBroker.CommandId (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get)^
				(AttackBroker.CommandParams (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
				AttackBroker~ Exe
				PlayerLifeStep~ Exe
			);
			CommandDispatcher ias (
				ForcedMode ias nil;
				Dispatch ias nil;
				CommandSet ias nil;
				Handler ias nil;
				CheckAndHandleCommand ias (
					(RightCommand true) ias Handler~ Exe;
					(RightCommand false) ias PlayerLifeStep~ Exe;
					((The player Id~ received command Dispatch~ to dispatch) Ew.Output~) Do
					(RightCommand (CommandSet~ (Dispatch~ MagicWorld.Command.Format.CommandIndex~) Get) In)~ Exe
				);
				(mode main) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeMain~)^
					(Handler HandlePlayerCommandOnModeMain~)^
				);
				(mode deal) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeDeal~)^
					(Handler HandlePlayerCommandOnModeDeal~)^
				);
				(mode battle) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeBattle~)^
					(Handler HandlePlayerCommandOnModeBattle~)^
				);
				(mode resourcemanager) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnResourceManager~)^
					(Handler HandlePlayerCommandsOnResourceManager~)^
				);
				(mode hiring) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeHiring~)^
					(Handler HandlePlayerCommandsOnModeHiring~)^
				);
				(mode attack) ias (
					(CommandSet ModeInfo.AvailablePlayerCommandsOnModeAttack~)^
					(Handler HandlePlayerCommandsOnModeAttack~)^
				);

				(ForcedMode true) ias (Mode ForcedMode~)^;
				(ForcedMode false) ias doNothing;

				(ForcedMode (Dispatch~ MagicWorld.Command.Format.ModeIndex~) Get)^
				(ForcedMode (ForcedMode~ nil) Ident)~ Exe
				(mode Mode~)~ Exe
				CheckAndHandleCommand~ Exe
			);
			/* Player's lifestep */
			PlayerLifeStep ias (
				(ready false) ias (
					(CommandDispatcher.Dispatch nil)^
					PlayerLifeStep~ Exe
				);
				(ready true) ias (
					(CommandDispatcher.Dispatch ((Player Id~) Rx) Gate)^
					CommandDispatcher~ Exe
				);
				(ready (((Player Id~) Ready) Gate true) Ident)~ Exe
			);
			lifeterm = (
				(Stop false)^
				((The player Id~ added and active) Ew.Output~) Do
				(ActiveModes ActiveModes~ Exe)^
				((The player Id~ has available modes ModeInfo.AvailableModes~ and active ActiveModes~) Ew.Output~) Do
				Resources.Init~ Exe
				(Services.SignalUnit Services.(SignalUnit Player Id~)) Born
				PlayerLifeStep~ Exe
			) Exe
		);
	);
}
