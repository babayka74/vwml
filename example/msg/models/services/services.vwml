module Services {
	MagicWorld ias (
		Services ias (
			SignalUnit ias (
				PlayerId ias nil;
				To ias nil;
				CommandId ias nil;
				CommandParams ias nil;
				((Characters)->(Unit To~) Tx (PlayerId~ CommandId~ To~ CommandParams~)) Gate
			);
			PositionChecker ias (
				Init ias doNothing;
				CheckPosition ias (
					(RightPosition true) ias (
						(PosToBeSet~ PosToBeChecked~)^
						(PosToBeChecked~ PosToBeCheckedCtx~ true) Context
					);
					(RightPosition false) ias (
						(PosToBeSet~ nil)^
#if (verbose)
						((The pos PosToBeChecked~ does not belong to battlefield for unit Id~) Ew.Output~) Do
#endif
					);
					PosToBeChecked ias nil;
					PosToBeSet ias nil;
					PosToBeCheckedCtx ias nil;
					OnMainField ias nil;
					(RightPosition (OnMainField~ PosToBeChecked~) In)~ Exe
 				);
				CheckGoalPositions ias (
					Correct ias true;
					T ias nil;
					CheckedCtx ias nil;
					Field ias nil;
					RollbackGoals ias ();
					CheckGoal ias (
						(NotCorrectGoal true) ias (
							(Correct false)^
#if (verbose)
							((The goals Goals~ are invalid for unit Id~) Ew.Output~) Do
#endif
							(Goals RollbackGoals~)^
							($ doNothing)^
						);
						(NotCorrectGoal false) ias doNothing;
						(CheckPosition.PosToBeChecked $~)^
						(CheckPosition.PosToBeSet T)^
						(CheckPosition.PosToBeCheckedCtx CheckedCtx~)^
						(CheckPosition.OnMainField Field~)^
#if (verbose)
						((Checking CheckPosition.PosToBeChecked~) Ew.Output~) Do
#endif
						CheckPosition~ Exe
						(NotCorrectGoal (T~ nil) Ident)~ Exe
					);
					(Goals~ CheckGoal~) ForEach
				);
			);
		);
	);
}
