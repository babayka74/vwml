module HiringAgency {
	MagicWorld ias (
		HiringAgency ias (
			Id ias nil;
			Owner ias nil;
			HiringProcessTime ias nil;
			StopAgency ias false;
			GlobalHiringRequestId ias 0;

			// command format
			CmdFormat ias (
				// information about unit's hiring properties
				RqHiringInfoIndex ias 0;
				// hiring property - cost
				RqCostPropIndex ias 0;
				// hiring property - hiring time
				RqHTimePropIndex ias 1;
				// hiring property - character id
				RqIdPropIndex ias 2;
				// information about hiring unit
				RqCharacterInfoIndex ias 1;
			);

			Init ias (
				(StopAgency false)^
#if (verbose)
				((The hiring agency for player Owner~ initialized) Ew.Output~) Do
#endif
			);
			Done ias (
				((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (hiringagency))) Gate
#if (verbose)
				((The hiring agency for player Owner~ uninitialized) Ew.Output~) Do
#endif
			);
			Agent ias (
				Commands ias (starthiring cancelhiring paymentresult check reset exit report);
				Command ias nil;
				Request ias nil;
				RequestId ias 0;
				RequestsInProgress ias ();
				NewRequestId ias nil;

				CharacterIdInfo ias nil;
				
				GetKindOfUnit ias (
					UnitProps ias nil;
					Kind ias nil;
					FetchKindPropForReport ias (
						(KindProp false) ias doNothing;
						(KindProp true) ias (Kind ($~ 1) Get)^;
						(KindProp (kind ($~ 0) Get) Ident)~ Exe
					);
					(Kind nil)^
					(UnitProps~ FetchKindPropForReport~) ForEach
				);
				CancelHiringRequests ias (
					F ias nil;
					(NoRequestsInProgress true) ias F~ Exe;
					(NoRequestsInProgress false) ias (
						StopHiringRequest ias (
							(CancelHiringRequest.RqId $~)^
							CancelHiringRequest~ Exe
						);
						(RequestsInProgress~ StopHiringRequest~) ForEach
						(RequestsInProgress ())^
						UnblockAndStop~ Exe
					);
					(NoRequestsInProgress (RequestsInProgress~ ()) Ident)~ Exe
				);
				ResetAgencyProcess ias (
					(CancelHiringRequests.F doNothing)^
					CancelHiringRequests~ Exe
					((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (hiringagency))) Gate
#if (verbose)
					((The hiring agency for player Owner~ resetted) Ew.Output~) Do
#endif
				);
				StopAgencyProcess ias (
					UnblockAndStop ias (
						(StopAgency true)^
						((HiringAgency Id~) Tx (check 0 ())) Gate
					);
					(CancelHiringRequests.F UnblockAndStop~)^
					CancelHiringRequests~ Exe
				);
				// starts hiring process when user's payment operation approved
				ActuallyStartHiringRequest ias (
					// confirmed primary request
					(ConfRq (Request~ 1) Get)^
					// getting hiring info (time to hire unit)
					(TimeToHireInfo ((ConfRq~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqHTimePropIndex~) Get)^
					(GlobalHiringRequestId ((GlobalHiringRequestId~) Ew.IncValue~) Do)^
					// generate new request id
					(NewRequestId (Id~ GlobalHiringRequestId~))^
					// save request for processing time (need in case if cancel operation is received)
					(NewRequestId~ ConfRq~)^
					(RequestsInProgress (RequestsInProgress~ (NewRequestId~)) Join)^
					// (HiringInfo~ 1) Get => time needed to hire specified unit
					((TimeToHireInfo~ 1) Get (Hiring Id~ NewRequestId~) ProcessRequest~ nil (NewRequestId~ ConfRq~)) Recall
					// player may use GlobalHiringRequestId~ in order to cancel hiring operation
#if (verbose)
					((The hiring agent Id~ started hiring request NewRequestId~ for player Owner~ ready in (TimeToHireInfo~ 1) Get ms) Ew.Output~) Do
#endif
#if (release)
					(CharacterIdInfo ((ConfRq~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqIdPropIndex~) Get)^
					(GetKindOfUnit.UnitProps (ConfRq~ CmdFormat.RqCharacterInfoIndex~) Get)^
					GetKindOfUnit~ Exe
                                        (UnitId (CharacterIdInfo~ 1) Get)^
					(((hiring starthiring inProgress) (Player Owner~) (unit UnitId~) GetKindOfUnit.Kind~ NewRequestId~) Ew.OutChannel~) Do								
#endif
				);
				CancelHiringRequest ias (
					RqId ias nil;
					(-1 (Hiring Id~ RqId~) nil) Recall
#if (verbose)
					((The hiring agent cancelled request RqId~ for player Owner~) Ew.Output~) Do
#endif
					// player's account must be recharged
					(CostInfo ((RqId~~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqCostPropIndex~) Get)^
					((Player Owner~) Tx (ModeInfo.ModeDeal~ returnpayment Owner~ (Id~ (CostInfo~ 1) Get (CostInfo~ 2) Get))) Gate
#if (release)
					(CharacterIdInfo ((RqId~~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqIdPropIndex~) Get)^
					(GetKindOfUnit.UnitProps (RqId~~ CmdFormat.RqCharacterInfoIndex~) Get)^
					GetKindOfUnit~ Exe
                                        (UnitId (CharacterIdInfo~ 1) Get)^
					(((hiring cancelhiring done) (Player Owner~) (unit UnitId~) GetKindOfUnit.Kind~ RqId~) Ew.OutChannel~) Do								
#endif
				);
 				// cancels existing hiring request which was activated by 'ActuallyStartHiringRequest'
				ActuallyCancelHiringRequest ias (
					(RR true) ias (
#if (verbose)
						((The hiring agent can not cancel request RqId~ for player Owner~ as invalid) Ew.Output~) Do
#endif
#if (release)
						(((hiring cancelhiring failed invalidRequestId) (Player Owner~) (unit UnitId~) RqId~) Ew.OutChannel~) Do								
#endif
					);
					(RR false) ias (
						(CancelHiringRequest.RqId RequestId~)^
						CancelHiringRequest~ Exe
						// remove request from waiting list
						(RequestsInProgress (RequestsInProgress~ (RequestId~)) Substruct)^
					);
					// here RequestId must coincide with one of processed GlobalHiringRequestId~
					(RequestId (RequestsInProgress~ RequestId~) Find)^
					(RR (RequestId~ nil) Ident)~ Exe
				);
				// called when unit's request is ready (aka agent found and hired unit)
				ProcessRequest ias (
					// see StartActualHiring (Recall)
					(RqId ($~ 0) Get)^
					(Rq ($~ 1) Get)^
					(RequestsInProgress (RequestsInProgress~ (RqId~)) Substruct)^
					(CharacterIdInfo ((Rq~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqIdPropIndex~) Get)^
					(CharacterProps (Rq~ CmdFormat.RqCharacterInfoIndex~) Get)^
					(CostInfo ((Rq~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqCostPropIndex~) Get)^
					// creating unit (aka found)
					(UnitId (CharacterIdInfo~ 1) Get)^
#if (verbose)
					((The hiring agent reports about processing request RqId~ for player Owner~ and sets props CharacterProps~ for unit UnitId~) Ew.Output~) Do
#endif
					(Characters.Unit (Unit UnitId~) defer) Born
					((Characters)->(Unit UnitId~)->PlayerId Owner~)^
					((Characters)->(Unit UnitId~)->Id UnitId~)^
					((Characters)->(Unit UnitId~)->CId RqId~)^
					((Characters)->(Unit UnitId~)->Cost CostInfo~)^
					// concrete mechanism of properties setting
					(CharacterProps~ (Characters)->(Unit UnitId~)->PropertySetOperation~) ForEach
					((Characters)->(Unit UnitId~)) Activate
				);
				PrepareReport ias (
					Report ias (
						(ConfRq $~~)^
#if (verbose)
						((The hiring agent Id~ has hiring request ConfRq~ for player Owner~) Ew.Output~) Do
#endif
#if (release)
						(GetKindOfUnit.UnitProps (ConfRq~ CmdFormat.RqCharacterInfoIndex~) Get)^
						GetKindOfUnit~ Exe
						(CharacterIdInfo ((ConfRq~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqIdPropIndex~) Get)^
                                        	(UnitId (CharacterIdInfo~ 1) Get)^
						(((hiring starthiring inProgress) (Player Owner~) (unit UnitId~) GetKindOfUnit.Kind~ $~) Ew.OutChannel~) Do								
#endif
					);
					(RequestsInProgress~ Report~) ForEach
				);
				Behavior ias (
					(RightCommand false) ias doNothing;
					(RightCommand true) ias (
						(Command starthiring) ias (
							// get cost and check if player has enough resources
							(CostInfo ((Request~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqCostPropIndex~) Get)^
							// (cost <resource> <value>)
							// Request => original request
							((Player Owner~) Tx (ModeInfo.ModeDeal~ payforunit Owner~ (Request~ (CostInfo~ 1) Get (CostInfo~ 2) Get))) Gate
						);
						(Command paymentresult) ias (
							(payment confirmed) ias ActuallyStartHiringRequest~ Exe;
							(payment declined) ias (
#if (verbose)
								((Not enough resources for request (Request~ 1) Get) Ew.Output~) Do
#endif
#if (release)
								(CharacterIdInfo ((Request~ CmdFormat.RqHiringInfoIndex~) Get CmdFormat.RqIdPropIndex~) Get)^
								(GetKindOfUnit.UnitProps (Request~ CmdFormat.RqCharacterInfoIndex~) Get)^
								GetKindOfUnit~ Exe
                                                                (UnitId (CharacterIdInfo~ 1) Get)^
								(((hiring starthiring failed noResources) (Player Owner~) (unit UnitId~) GetKindOfUnit.Kind~) Ew.OutChannel~) Do
#endif
							);
							(payment (Request~ 0) Get)~ Exe
						);
						(Command cancelhiring) ias (
							(InProgress false) ias (
#if (verbose)
								((Invalid request id RequestId~) Ew.Output~) Do
#endif
							);
							(InProgress true) ias ActuallyCancelHiringRequest~ Exe;
							(InProgress (RequestsInProgress~ RequestId~) In)~ Exe
						);
						(Command report) ias PrepareReport~ Exe;
						(Command check) ias (
#if (verbose)
							((Hiring agency Id~ received self test ok) Ew.Output~) Do
#endif
						);
						(Command exit) ias StopAgencyProcess~ Exe;
						(Command reset) ias ResetAgencyProcess~ Exe;
						(Command Command~)~ Exe
					);
					(RightCommand (Commands~ Command~) In)~ Exe					
				);
			);

			CommandDispatcher ias (
				Dispatch ias nil;
				// (starthiring | cancelhiring RequestId Request)
				// Request=> (((cost vodka 2000)(hiringtime 20000)(id 2))((kind skeleton | zombie | monster) (attack (yes yes yes)) (defence (no no yes)))
				(Agent.Command (Dispatch~ 0) Get)^
				(Agent.RequestId (Dispatch~ 1) Get)^
				(Agent.Request (Dispatch~ 2) Get)^
				Agent.Behavior~ Exe
			);
			HiringAgencyLifeStep ias (
				(ready false false) ias (
					(CommandDispatcher.Dispatch nil)^
					HiringAgencyLifeStep~ Exe
				);
				(ready true false) ias (
					(CommandDispatcher.Dispatch ((HiringAgency Id~) Rx) Gate)^
#if (verbose)
					((The hiring agency Id~ received CommandDispatcher.Dispatch~) Ew.Output~) Do
#endif
					CommandDispatcher~ Exe
					HiringAgencyLifeStep~ Exe
				);
				(ready false true),(ready true true) ias (
#if (verbose)
					((The hiring agency Id~ of player Owner~ reports about exiting) Ew.Output~) Do
#endif
				);
				(ready (((HiringAgency Id~) Ready) Gate true) Ident StopAgency~)~ Exe
			);
			lifeterm = (
#if (verbose)
				((The hiring agency Id~ activated for owner Owner~) Ew.Output~) Do
#endif
				((HiringAgency Id~) Register blocked) Gate
				((HiringAgency Id~) Tx (check 0 ())) Gate
				((Player Owner~) Tx (ModeInfo.ModeMain~ hainitialized Id~ ())) Gate
				HiringAgencyLifeStep~ Exe
				((HiringAgency Id~) Unregister) Gate
				Done~ Exe
#if (verbose)
				((The hiring agency Id~ deactivated for owner Owner~) Ew.Output~) Do
#endif
			) Exe
		);
	);
}
