module PlayerModeMain {
	MagicWorld ias (
		Player ias (
			Main ias (
				CommandId ias nil;
				CommandParams ias nil;
				NotifyAboutActivitiesStopped ias (
					(Activities () NotifyAboutActivitiesStopped~) FinishInterception
					((Player Id~) Tx (ModeInfo.ModeMain~ playerworldstopped Id~ ())) Gate
				);
				(Handle setmode) ias (
					(RightMode false) ias doNothing;
					(RightMode true) ias (
						(Mode CommandParams~)^
						((The player Id~ mode is Mode~) Ew.Output~) Do
					);
					(RightMode (ModeInfo.AvailableModes~ CommandParams~) In)~ Exe
				);
				(Handle back) ias (
					(Player.Mode main)^
					((The player Id~ stays in main mode) Ew.Output~) Do
				);
				// manager received command to stop the world 
				(Handle requeststopplayerworld) ias (
					((The player Id~ is going to be stopped) Ew.Output~) Do
					(Activities () NotifyAboutActivitiesStopped~) StartInterception
					Resources.Done~ Exe
				);
				(Handle partclosed) ias (
					CA ias nil;
					(CA battlefield) ias Resources.Hiring.Done~ Exe;
					(CA hiringagency) ias Resources.Quartals.Done~ Exe;
					(CA quartals) ias Resources.ResourceManagerDone~ Exe;
                                        (CA resourcemanager) ias doNothing;
					(Params (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
					(CA (Params~ 0) Get)^
					(CA CA~)~ Exe
					((The player Id~ stopped activity CA~ left Activities~) Ew.Output~) Do
					(Activities (Activities~ (CA~)) Substruct)^
				);
				(Handle playerworldstopped) ias (
					(Stop true)^
#if (verbose)
					((The player Id~ all activities stopped) Ew.Output~) Do
#endif
#if (release)
                              		(((playermanagment playerstop ok) (Player Id~)) Ew.OutChannel~) Do
#endif
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}
