module PlayerModeMain {
	MagicWorld ias (
		Player ias (
			Main ias (
				CommandId ias nil;
				CommandParams ias nil;
				ExternalBattleResultProcessing ias (
#if (business)
					WinId ias 0;
					WinCost ias nil;
					Rt ias nil;
					Loss ias 0;

					(WinId (CommandParams~ 0) Get)^
					(Rt ((CommandParams~ 1) Get 1) Get)^
					(Loss ((Resources.Account.(Rt Rt~)~ Resources.Business.LH~) Ew.RecalcBattleResult~) Do)^
					(WinCost (cost Rt~ Loss~))^
#if (verbose)
					((Player Id~ transfers WinCost~ to player WinId~) Ew.Output~) Do
#endif
					((GlobalBanker 0) Tx (transfer starttransfer Id~ (Id~ WinId~ WinCost~))) Gate
#endif // business
				);
				NotifyAboutActivitiesStopped ias (
					(Activities () NotifyAboutActivitiesStopped~) FinishInterception
					((Player Id~) Tx (ModeInfo.ModeMain~ playerworldstopped Id~ ())) Gate
				);
				NotifyAboutActivitiesResetted ias (
					(Activities () NotifyAboutActivitiesResetted~) FinishInterception
					((Player Id~) Tx (ModeInfo.ModeMain~ playerworldresetted Id~ ())) Gate
				);
				(Handle setmode) ias (
					(RightMode false) ias doNothing;
					(RightMode true) ias (
						(Mode CommandParams~)^
#if (verbose)
						((The player Id~ mode is Mode~) Ew.Output~) Do
#endif
					);
					(RightMode (ModeInfo.AvailableModes~ CommandParams~) In)~ Exe
				);
				(Handle back) ias (
					(Player.Mode main)^
#if (verbose)
					((The player Id~ stays in main mode) Ew.Output~) Do
#endif
				);
				// manager received command to stop the world 
				(Handle requeststopplayerworld) ias (
#if (verbose)
					((The player Id~ is going to be stopped) Ew.Output~) Do
#endif
					(Activities () NotifyAboutActivitiesStopped~) StartInterception
					Resources.Done~ Exe
				);
				(Handle resettoinitialstate) ias (
#if (verbose)
					((The player Id~ is going to be resetted) Ew.Output~) Do
#endif
					(ResetMode true)^
					(Activities () NotifyAboutActivitiesResetted~) StartInterception
					Resources.Reset~ Exe
				);
				(Handle qinitialized) ias (
					(Resources.Quartals.Init.ExpectedQuartals ((Resources.Quartals.Init.ExpectedQuartals~) Ew.DecValue~) Do)^
#if (verbose)
					((Resources.Quartals.Init.ExpectedQuartals~ left quartals to initialize player Id~) Ew.Output~) Do
#endif
				);
				(Handle hainitialized) ias (
					(Resources.InitSteps (Resources.InitSteps~ (hiringagency)) Substruct)^
#if (verbose)
					((Hiring agency initialized for player Id~) Ew.Output~) Do
					((Player Id~ left init steps Resources.InitSteps~) Ew.Output~) Do							
#endif
				);
				(Handle partclosed) ias (
					CA ias nil;
					(ResetMode true) ias (
						(CA battlefield) ias Resources.Hiring.Reset~ Exe;
						(CA hiringagency) ias Resources.Quartals.Reset~ Exe;
						(CA quartals) ias Resources.ResourceManagerDone~ Exe;
                                        	(CA resourcemanager) ias doNothing;
						(CA CA~)~ Exe
					);
					(ResetMode false) ias (
						(CA battlefield) ias Resources.Hiring.Done~ Exe;
						(CA hiringagency) ias Resources.Quartals.Done~ Exe;
						(CA quartals) ias Resources.ResourceManagerDone~ Exe;
                                        	(CA resourcemanager) ias doNothing;
						(CA CA~)~ Exe
					);
					(Params (CommandDispatcher.Dispatch~ MagicWorld.Command.Format.ParamsIndex~) Get)^
					(CA (Params~ 0) Get)^
					(ResetMode ResetMode~)~ Exe
#if (verbose)
					((The player Id~ stopped activity CA~ left Activities~) Ew.Output~) Do
#endif
					(Activities (Activities~ (CA~)) Substruct)^
				);
				(Handle playerworldstopped) ias (
					(Stop true)^
#if (verbose)
					((The player Id~ all activities stopped) Ew.Output~) Do
#endif
#if (release)
                              		(((playermanagment playerstop ok) (Player Id~)) Ew.OutChannel~) Do
#endif
				);
				(Handle playerworldresetted) ias (
					(ResetMode false)^
					(State resetted)^
					(Activities (resourcemanager quartals battlefield hiringagency))^
#if (verbose)
					((The player Id~ all activities stopped) Ew.Output~) Do
#endif
#if (release)
                              		(((playermanagment playerreset ok) (Player Id~)) Ew.OutChannel~) Do
#endif
				);
				(Handle updateaccount) ias (
					(Resources.Account.Update.From CommandParams~)^
					Resources.Account.Update~ Exe
#if (verbose)
					((Player Id~ updated accounts resources) Ew.Output~) Do
#endif
#if (release)
					(((main updateaccount ok) (player PlayerId~)) Ew.OutChannel~) Do
#endif
				);
				(Handle updatebusinessconf) ias (
					(Resources.Business.Update.From CommandParams~)^
					Resources.Business.Update~ Exe
#if (verbose)
					((Player Id~ updated business configuration) Ew.Output~) Do
#endif
#if (release)
					(((main updatebusinessconf ok) (player PlayerId~)) Ew.OutChannel~) Do
#endif
				);
				(Handle getbalance) ias Resources.Account.Report~ Exe;
				(Handle extbattleresult) ias ExternalBattleResultProcessing~ Exe;
				(Handle updatecashierconf) ias (
					(Cashier.Setup.Conf CommandParams~)^
					Cashier.Setup~ Exe
#if (verbose)
					((Player Id~ updated cashier configuration) Ew.Output~) Do
#endif
#if (release)
					(((main updatecashierconf ok) (player PlayerId~)) Ew.OutChannel~) Do
#endif
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}
