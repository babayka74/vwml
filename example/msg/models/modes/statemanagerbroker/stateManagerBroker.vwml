module StateManagerBroker {
	MagicWorld ias (
		Player ias (
			StateManagerBroker ias (
				CommandId ias nil;
				CommandParams ias nil;
				CollectFor ias nil;
				Quartals ias 0;
				Units ias 0;
				// quartals accumulated states
				ACQState ias nil;
				// units accumulated states
				ACUState ias nil;
				// hiring agency state
				HAState ias nil;
				// player's state has been collected
				PlayerStateCollected ias (
					State ias nil;
					(CollectFor () PlayerStateCollected~) FinishInterception
					(State (ACQState~ ACUState~ Resources.Garage.CollectState.GCarsStore~ Resources.Business.CollectState.BusinessState~ HAState~))^
#if (verbose)
					((State of player Id~ is State~ and was collected successfully) Ew.Output~) Do						
#endif
				);
				// states of quartals have been collected
				QStateCollected ias (
					(Quartals 0 QStateCollected~) FinishInterception
					(CollectFor (CollectFor~ (rqcsquartals)) Substruct)^
					// initates another
					((Player Id~) Tx (ModeInfo.ModeStateManagerBroker~ (CollectFor~ 0) Get Id~ ())) Gate
				);
				// states of units have been collected
				UStateCollected ias (
					(Units 0 UStateCollected~) FinishInterception
					(CollectFor (CollectFor~ (rqcsunits)) Substruct)^
					((Player Id~) Tx (ModeInfo.ModeStateManagerBroker~ (CollectFor~ 0) Get Id~ ())) Gate
				);
				// state of garage collected
				GarageStateCollected ias (
					(CollectFor (CollectFor~ (rqgarage)) Substruct)^
					((Player Id~) Tx (ModeInfo.ModeStateManagerBroker~ (CollectFor~ 0) Get Id~ ())) Gate
#if (verbose)
					((Collected states of garage Resources.Garage.CollectState.GCarsStore~ of player Id~) Ew.Output~) Do						
#endif
				);
				// state of business collected
				BusinessStateCollected ias (
#if (verbose)
					((Collected states of business Resources.Business.CollectState.BusinessState~ of player Id~) Ew.Output~) Do						
#endif
					(CollectFor (CollectFor~ (rqbusiness)) Substruct)^
					((Player Id~) Tx (ModeInfo.ModeStateManagerBroker~ (CollectFor~ 0) Get Id~ ())) Gate
				);
				Start ias (
					(CollectFor (rqcsquartals rqcsunits rqgarage rqbusiness rqha))^
					(CollectFor () PlayerStateCollected~) StartInterception

#if (verbose)
					((Starting collect state of player Id~ passes are CollectFor~) Ew.Output~) Do						
#endif
					((Player Id~) Tx (ModeInfo.ModeStateManagerBroker~ (CollectFor~ 0) Get Id~ ())) Gate
				);
				// quartal state collector
				QStateCollector ias (
					// sends signal to quartal to collect state
					QCS ias ((Quartal $~) Tx (Id~ collectstate ())) Gate;
					// iterate over all available quartals and requests their states
					(ACQState ())^
					(Quartals 0 QStateCollected~) StartInterception
					(Quartals (Resources.Quartals.Own~) Size)^
#if (verbose)
					((Collecting states of Quartals~ quartals of player Id~) Ew.Output~) Do						
#endif
					(Resources.Quartals.Own~ QCS~) ForEach
				);
				// unit state collector
				UStateCollector ias (
					// sends signal to unit to collect state
					UCS ias (
#if (unitalive)
						((Unit $~) Tx (Id~ collectstate ())) Gate
#else
						(Characters)->(Unit $~)->CollectState~ Exe
#endif // unitalive
					);
					(ACUState ())^
					// iterate over all available units and requests their states
					(Units 0 UStateCollected~) StartInterception
					(Units (Resources.Units.Hired~) Size)^
#if (verbose)
					((Collecting states of Units~ units of player Id~) Ew.Output~) Do						
#endif
					(Resources.Units.Hired~ UCS~) ForEach
				);
				// garage state collector
				GarageStateCollector ias (
#if (verbose)
					((Collecting states of garage of player Id~) Ew.Output~) Do						
#endif
					Resources.Garage.CollectState~ Exe
					GarageStateCollected~ Exe
				);
				// business state collector
				BusinessStateCollector ias (
#if (verbose)
					((Collecting states of business of player Id~) Ew.Output~) Do						
#endif
					Resources.Business.CollectState~ Exe
					BusinessStateCollected~ Exe
				);
				HiringAgencyStateCollector ias (
#if (verbose)
					((Collecting states of hiring agency of player Id~) Ew.Output~) Do						
#endif
					((Player Id~) Tx (ModeInfo.ModeHiring~ collectstate nil ())) Gate
				);
				// request to collect states of player's entities
				(Handle collectstate) ias Start~ Exe;
				// request to collect quartals' state
				(Handle rqcsquartals) ias QStateCollector~ Exe;
				// request to collect units' state
				(Handle rqcsunits) ias UStateCollector~ Exe;
				// request to collect garage's state
				(Handle rqgarage) ias GarageStateCollector~ Exe;
				// request to collect business's state
				(Handle rqbusiness) ias BusinessStateCollector~ Exe;
				// request to collect hiring agency state
				(Handle rqha) ias HiringAgencyStateCollector~ Exe;
				// quartal's response on intention about its state (response on collectstate, see above)
				(Handle rspquartalstate) ias (
					(ACQState (ACQState~ (CommandParams~)) Join)^
					(Quartals ((Quartals~) Ew.DecValue~) Do)^
				);
				// unit's state, response on collectstate
				(Handle rspunitstate) ias (
					(ACUState (ACUState~ (CommandParams~)) Join)^
					(Units ((Units~) Ew.DecValue~) Do)^
#if (verbose)
					((Unit state CommandParams~ of player Id~ and remained Units~) Ew.Output~) Do						
#endif
				);
				// hiring agency responded with its state
				(Handle rspcsha) ias (
					(HAState CommandParams~)^
#if (verbose)
					((Hiring agency state HAState~ of player Id~) Ew.Output~) Do						
#endif
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}

