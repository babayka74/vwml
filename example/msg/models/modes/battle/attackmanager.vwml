module AttackManager {
	MagicWorld ias (
		AttackManager ias (
			CommandId ias nil;
			To ias nil;
			CommandParams ias nil;
			Id ias nil;
			PlayerId ias nil;
			ExportedCommands ias (prepareinvasion invasion recruitunit recruitedunit rejectedunit dismissunit reset battlestatus);

			AttackingUnits ias ();
			// initialization steps
			Init ias (
				(AttackingUnits ())^
				((The attack manager of player PlayerId~ initialized) Ew.Output~) Do
			);
			// adds unit to attacking group
			AddUnitToAttackingGroup ias (
				(AttackingUnits (AttackingUnits~ (To~)) Join)^
				((The unit To~ recruited to attacking group AttackingUnits~ of player PlayerId~) Ew.Output~) Do
			);
			// returns recruited unit to player's resources
			RemoveUnitFromAttackingGroup ias (
				U ias nil;
				(UnitExist true) ias (
					(AttackingUnits (AttackingUnits~ (U~)) Substruct)^
					((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ returnunit PlayerId~ (U~))) Gate
					((The unit U~ dismissed from attacking group AttackingUnits~ of player PlayerId~) Ew.Output~) Do
				);
				(UnitExist false) ias (
					((The unit U~ does not belong to attacking group of player PlayerId~) Ew.Output~) Do
				);
				(UnitExist (AttackingUnits~ U~) In)~ Exe
			);
			// returns all units which belong to attacking group back to player's resources
			RemoveAllUnitsFromAttackingGroup ias (
				ReturnUnit ias (
					(RemoveUnitFromAttackingGroup.U $~)^
					RemoveUnitFromAttackingGroup~ Exe
				);
				(AttackingUnits~ ReturnUnit~) ForEach
			);
			// Player is going to attack another player (attack is allowed only in case if opponent's battlestatus is readyforattack)
			// see EvaluateReadinessOnInvasion
			PrepareInvasion ias (
				(AttackingUnitsNotReady true) ias (
					((Player PlayerId~ must create attacking group before) Ew.Output~) Do
				);
				(AttackingUnitsNotReady false) ias (
					(AttackHimself false) ias (
						((Player AttackedPlayerId~) Tx (ModeInfo.ModeBattle~ requestbattlestatusbf AttackedPlayerId~ (PlayerId~ ModeInfo.ModeAttack~))) Gate
					);
					(AttackHimself true) ias (
						((Player PlayerId~ can not attack himself) Ew.Output~) Do
					);
					// attacked player id
					(AttackedPlayerId (CommandParams~ 0) Get)^
					// check attack correctness
					(AttackHimself (AttackedPlayerId~ PlayerId~) Ident)~ Exe
				);
				(AttackingUnitsNotReady (AttackingUnits~ ()) Ident)~ Exe
			);
			// response on battle status request of attacked player
			EvaluateReadinessOnInvasion ias (
				(OpponentReadyForAttack false) ias (
					((Can not attack player AttackedPlayerId~ since it has not built defence yet) Ew.Output~) Do
				);
				(OpponentReadyForAttack true) ias (
					((Player PlayerId~ attacks AttackedPlayerId~ by units AttackingUnits~) Ew.Output~) Do
					// reaction is defined by 'Invasion' on AttackedPlayerId~
					((Player AttackedPlayerId~) Tx (ModeInfo.ModeAttack~ invasion AttackedPlayerId~ (PlayerId~ AttackingUnits~))) Gate
					(AttackingUnits ())^
				);
				(AttackedPlayerId (CommandParams~ 0) Get)^
				(AttackedPlayerBattleStatus (CommandParams~ 1) Get)^
				(OpponentReadyForAttack (AttackedPlayerBattleStatus~ readyforattack) Ident)~ Exe
			);
			// another player attacks
			Invasion ias (
				(AttackingPlayerId (CommandParams~ 0) Get)^
				(InvasiveGroup (CommandParams~ 1) Get)^
				((Player Id~ reports about invasion of player AttackingPlayerId~ with units InvasiveGroup~) Ew.Output~) Do
				((BattleField (Player PlayerId~)->(Resources)->SelectedBattle~)->PlayerAttackerId AttackingPlayerId~)^
				// triggering attack mode
				((Player PlayerId~) Tx (ModeInfo.ModeBattle~ setmode attack ())) Gate
				// adds attacking units to the battlefield
				((Player PlayerId~) Tx (ModeInfo.ModeBattle~ setupattackers PlayerId~ InvasiveGroup~)) Gate
				// ... and attack !!!
				((Player PlayerId~) Tx (ModeInfo.ModeBattle~ attack PlayerId~ ())) Gate
			);
			(Handle recruitunit) ias ((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ takeunit PlayerId~ (To~ attacker attack))) Gate;
			// positive response on request unit
			(Handle recruitedunit) ias AddUnitToAttackingGroup~ Exe;
			// negative response on requestunit
			(Handle rejectedunit) ias (
				((The unit To~ can not be recruited by player PlayerId~) Ew.Output~) Do
			);
			// unit is returned to player's resources
			(Handle dismissunit) ias (
				(RemoveUnitFromAttackingGroup.U To~)^
				RemoveUnitFromAttackingGroup~ Exe
			);
			// resets attacking group by returning all units back to player's resources
			(Handle reset) ias RemoveAllUnitsFromAttackingGroup~ Exe;
			// selects battlefield for attack
			(Handle prepareinvasion) ias PrepareInvasion~ Exe;
			// sent on request requestbattlestatusbf which is sent during invasion's preparation steps
			(Handle responsebattlestatusbf) ias EvaluateReadinessOnInvasion~ Exe;
			(Handle invasion) ias Invasion~ Exe;
			// result of invasion
			(Handle battlestatus) ias (
				(BattleStatus (CommandParams~ 0) Get)^
				((The attacker PlayerId~ finished with status BattleStatus~) Ew.Output~) Do
			);
			(Handle CommandId~)~ Exe
		);
	);
}