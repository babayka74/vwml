module BattleField {
	MagicWorld ias (
		BattleField ias (
			Modes ias (none builddefence attack);
			// BattleField's id (may coincide with Quartal)
			Id ias nil;
			// belongs to player identified by id
			PlayerId ias nil;
			// who attacks player identified by PlayerId
			PlayerAttackerId ias nil;
			// to which quartal battlefield belongs
			Quartal ias nil;
			BattleStatus ias none;
			// command to be parsed
			CommandId ias nil;
			Destination ias nil;
			CommandParams ias nil;
			// default mode on start
			Mode ias none;
			// battle cost
			BattleCost ias 0;
			// exported commands, filled by ExportCommands term
			ExportedCommands ias ();
			ExportCommands ias (
				(ExportedCommands ())^
				Fill ias (
					F ias (ExportedCommands (ExportedCommands~ ($~)) Join)^;
					($~~ F~) ForEach
				);
				((BuildDefenceModeAvailableCommands AttackModeAvailableCommands NoneModeAvailableCommands) Fill~) ForEach
				(ExportedCommands (ExportedCommands~) Squeeze)^
				((The battlefields exported commands are ExportedCommands~) Ew.Output~) Do
			);
			// battlefield's zones
			// 1. Attack - player which attacks sets his units to 'Nodes'. 'Nodes' must be subgraph of 'Main' graph
			// 2. Defence - player which defends quartal sets his units to 'Nodes'. 'Nodes' must be subgraph of 'Main' graph
			Fields ias (
				Attack ias (
					/* nodes marked as 'attacking' */
					Nodes ias ();
				);
				Defence ias (
					/* nodes marked as 'defence' */
					Nodes ias ();
				);
				Main ias (
					/* all battlefields'/mainfield's nodes */
					Nodes ias ();
				);
				Build ias (
					LockOnBattleFieldBuilding [
						(Ew.BattleField.AttackZone Fields.Attack.Nodes)^
						(Ew.BattleField.AttackZoneCtx Fields.Attack.Nodes)^
						(Ew.BattleField.DefenceZone Fields.Defence.Nodes)^
						(Ew.BattleField.DefenceZoneCtx Fields.Defence.Nodes)^
						(Ew.BattleField.MainZone Fields.Main.Nodes)^
						(Ew.BattleField.MainZoneCtx Fields.Main.Nodes)^
						Ew.BattleField.Build~ Exe
					LockOnBattleFieldBuilding ]
				);
			);
			// commands available on 'builddefence', 'attack' and 'none' modes
			BuildDefenceModeAvailableCommands ias (buildfield linktoquartal unlinkfromquartal apply reset startpos setprops dismissunit recruitunit recruitedunit rejectedunit battlecost);
			AttackModeAvailableCommands ias (setupattackers startpos setprops movetopos go stop select getpos kill battlestatus unitkilled battlecost surrender);
			NoneModeAvailableCommands ias (setmode);
			// battle's participants
			Participants ias (
				NumOfAttackers ias 0;
				NumOfDefenders ias 0;
				Units ias ();
			);
			Init ias (
				(BattleStatus none)^
				(Mode none)^
				(PlayerAttackerId nil)^
				((The battlefield for player PlayerId~ linked to quartal Quartal~ has id Id~ battle status BattleStatus~) Ew.Output~) Do
			);
			SetModeAndBattleStatus ias (
				(Mode Destination~)^
				(BattleStatus Mode~)^
				((The battlefield Id~ of player PlayerId~ changed mode to Mode~) Ew.Output~) Do
			);
			// Unit is added to battlefield
			AddUnitToBattleField ias (
				(added attacker) ias (Participants.NumOfAttackers ((Participants.NumOfAttackers~) Ew.IncValue~) Do)^;
				(added defender) ias (Participants.NumOfDefenders ((Participants.NumOfDefenders~) Ew.IncValue~) Do)^;
				((Characters)->(Unit Destination~)->(AssociateWithBattleField)->BFId Id~)^
				(Characters)->(Unit Destination~)->AssociateWithBattleField~ Exe
				(Participants.Units (Participants.Units~ (Destination~)) Join)^
				(added (Characters)->(Unit Destination~)->Type~)~ Exe 
				((The battlefield Id~ has attackers Participants.NumOfAttackers~ and defenders Participants.NumOfDefenders~) Ew.Output~) Do
			);
			// unit is removed from battlefield when mode 'builddefence' is active
			RemoveFromBattleField ias (
				U ias nil;
				PId ias nil;
				RetAs ias nil;
				(CorrectUnit false) ias ((The unit U~ was not recruited to battlefield Id~ of player PId~) Ew.Output~) Do;
				(CorrectUnit true) ias (
					(removed attacker) ias (Participants.NumOfAttackers ((Participants.NumOfAttackers~) Ew.DecValue~) Do)^;
					(removed defender) ias (Participants.NumOfDefenders ((Participants.NumOfDefenders~) Ew.DecValue~) Do)^;
					((Characters)->(Unit U~)->(AssociateWithBattleField)->BFId nil)^
					(Characters)->(Unit U~)->AssociateWithBattleField~ Exe
					(Participants.Units (Participants.Units~ (U~)) Substruct)^
					(removed (Characters)->(Unit U~)->Type~)~ Exe
					((Unit U~ of player PId~ returned to resource manager as RetAs~) Ew.Output~) Do
					((Player PId~) Tx (ModeInfo.ModeResourceMgr~ RetAs~ PId~ (U~))) Gate
					((The battlefield Id~ has attackers Participants.NumOfAttackers~ and defenders Participants.NumOfDefenders~) Ew.Output~) Do
				);
				(CorrectUnit (Participants.Units~ U~) In)~ Exe
			);
			// Add set of units (attackers in our case)
			AddSetOfUnitsToBattleField ias (
				AddUnit ias (
					(Destination $~)^
					AddUnitToBattleField~ Exe
				);
				(CommandParams~ AddUnit~) ForEach
			);
			// checks battle's status
			CheckBattleStatus ias (
				(AttackersDestroyed true) ias (
					(BattleStatus stopped)^
					((Player PlayerId~) Tx (ModeInfo.ModeBattle~ battlestatus Id~ (won))) Gate
					((Player PlayerAttackerId~) Tx (ModeInfo.ModeAttack~ battlestatus Id~ (loose PlayerId~ BattleCost~))) Gate
				);
				(AttackersDestroyed false) ias doNothing;
				(DefendersDestroyed true) ias (
					(BattleStatus stopped)^
					((Player PlayerId~) Tx (ModeInfo.ModeBattle~ battlestatus Id~ (loose))) Gate
					((Player PlayerAttackerId~) Tx (ModeInfo.ModeAttack~ battlestatus Id~ (won PlayerId~ BattleCost~))) Gate
				);
				(DefendersDestroyed false) ias doNothing;
				(AttackersDestroyed (Participants.NumOfAttackers~ 0) Ident)~ Exe
				(DefendersDestroyed (Participants.NumOfDefenders~ 0) Ident)~ Exe
			);
			// sends command to concrete unit
			PropagateCommandToUnit ias (
				(BattleStarted true) ias ((Characters)->(Unit Destination~) Tx (Quartal~ CommandId~ Destination~ CommandParams~)) Gate;
				(BattleStarted false) ias ((The command can not be propagated to unit Destination~ player PlayerId~ since battle was not started) Ew.Output~) Do;
				(BattleStarted (BattleStatus~ attaked) Ident)~ Exe
			);
			// all units which belong to given user are returned to player's pool
			ReturnUnit ias (
				U ias nil;
				PId ias nil;
				(PId (Characters)->(Unit U~)->PlayerId~)^
				(RemoveFromBattleField.U U~)^
				(RemoveFromBattleField.PId PId~)^
				(RemoveFromBattleField.RetAs returnunit)^
				RemoveFromBattleField~ Exe
				((The unit U~ removed from battlefield Id~ to player PId~ from player PlayerId~ units Participants.Units~) Ew.Output~) Do
			);
			// battlefield's cost is passed to player who won battle
			SetBattleCost ias (
				(BattleCost (CommandParams~ 0) Get)^
				((The battlefield Id~ of player PlayerId~ has cost BattleCost~) Ew.Output~) Do
			);
			// initial mode
			(Mode none) ias (
				(RightCommand false) ias doNothing;
				(RightCommand true) ias (
					// setting mode is allowed for all modes
					(Handle setmode) ias SetModeAndBattleStatus~ Exe;
					(Handle CommandId~)~ Exe
				);
				(RightCommand (NoneModeAvailableCommands~ CommandId~) In)~ Exe
			);
			// building defence
			(Mode builddefence) ias (
				(RightCommand false) ias doNothing;
				(RightCommand true) ias (
					// builds battlefield's map
					(Handle buildfield) ias (
						((The battlefield for player PlayerId~ is being built) Ew.Output~) Do
						Fields.Build~ Exe
					);
					// links battlefield with quartal
					(Handle linktoquartal) ias (Quartal Destination~)^;
					// unlinks battlefield from the quartal and sets mode to 'none'
					(Handle unlinkfromquartal) ias (
						(Quartal nil)^
						(Mode none)^
					);
					// battlefield is published to all players and marked as ready for attack by other players
					(Handle apply) ias (
						(BattleStatus readyforattack)^
						(Mode none)^
						((The battlefield Id~ for player PlayerId~ is ready for attack) Ew.Output~) Do
					);
					// battlefield is became invisible for players and can't be attacked by other players
					(Handle reset),(Handle fullback) ias (
						ReturnUnits ias (
							(ReturnUnit.U $~)^
							ReturnUnit~ Exe
						);
						(BattleStatus none)^
						(Mode none)^
						(Participants.Units~ ReturnUnits~) ForEach
						((The battlefield Id~ for player PlayerId~ was resetted to initial state) Ew.Output~) Do
					);
					// player requests unit from resource manager to participate in battle, for defence.
					// the unit is identified by Destination~
					(Handle recruitunit) ias (
						((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ takeunit PlayerId~ (Destination~ defender battle))) Gate
					);
					// positive response on request unit
					(Handle recruitedunit) ias (
						AddUnitToBattleField~ Exe
						((The unit Destination~ recruited to battlefield Id~ player PlayerId~ units Participants.Units~) Ew.Output~) Do
					);
					// negative response on requestunit
					(Handle rejectedunit) ias (
						((The unit Destination~ can not be recruited to battlefield Id~ player PlayerId~) Ew.Output~) Do
					);
					// returned - returned to player's resources
					(Handle dismissunit) ias (
						(ReturnUnit.U Destination~)^
						ReturnUnit~ Exe
					);
					(Handle battlecost) ias SetBattleCost~ Exe;
					// setups units on battlefield's map (attackers and defenders)
					(Handle startpos),(Handle setprops) ias PropagateCommandToUnit~ Exe;
					(Handle CommandId~)~ Exe
				);
				(RightCommand (BuildDefenceModeAvailableCommands~ CommandId~) In)~ Exe
			);
			// attack
			(Mode attack) ias (
				(RightCommand false) ias doNothing;
				(RightCommand true) ias (
					(Handle movetopos),(Handle go),(Handle stop),(Handle select),(Handle setprops),(Handle getpos),(Handle kill) ias PropagateCommandToUnit~ Exe;
					(Handle setupattackers) ias AddSetOfUnitsToBattleField~ Exe;
					(Handle battlecost) ias SetBattleCost~ Exe;
					(Handle attack) ias (
						(BattleStatus attacked)^
						((The battle between players PlayerId~ and PlayerAttackerId~ started) Ew.Output~) Do
					);
					(Handle unitkilled) ias (
						// unit is removed from player's resources
						(PId (Characters)->(Unit Destination~)->PlayerId~)^
						(RemoveFromBattleField.U Destination~)^
						(RemoveFromBattleField.PId PId~)^
						(RemoveFromBattleField.RetAs releaseunit)^
						RemoveFromBattleField~ Exe
						CheckBattleStatus~ Exe
					);
					// sent from CheckBattleStatus when either attackers or defenders
					(Handle battlestatus) ias (
						(status won),(status loose) ias (
							// performs resource transfer from loose side to winner side (PlayerId won)
							((The battle between players PlayerId~ and PlayerAttackerId~ finished with status BattleStatus~) Ew.Output~) Do
							(BattleStatus finished)^
							(Mode none)^
						);
						// status is sent by implementation of concrete battlefield
						(BattleStatus (CommandParams~ 0) Get)^
						(status BattleStatus~)~ Exe
					);
					// all units (attackers in this case) are returned to player's resource pool (attacker lost battle)
					(Handle surrender) ias (
						FA ias (
							(t attacker) ias (
								(ReturnUnit.U $~)^
								ReturnUnit~ Exe
							);
							(t defender) ias doNothing;
							(t (Characters)->(Unit $~)->Type~)~ Exe
						);
						(Participants.Units~ FA~) ForEach
						(Mode none)^
						(Participants.NumOfAttackers 0)^
						CheckBattleStatus~ Exe
					);
					(Handle CommandId~)~ Exe
				);
				(RightCommand (AttackModeAvailableCommands~ CommandId~) In)~ Exe
			);
			(Mode Mode~)~ Exe
		);
	);
}