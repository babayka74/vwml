module PlayerGarage {
	MagicWorld ias (
		Player ias (
			GarageDeal ias (
				// current upgrade transaction
				CT ias nil;
				CommandId ias nil;
				CommandParams ias nil;

				GetInvestTimerState ias (
					State ias nil;
					(IIP true) ias doNothing;
					(IIP false) ias (State (CT~ ((GInv Id~)) TState))^;
					// IIP => Investment In Progress
					(State nil)^
					(IIP (CT~ nil) Ident)~ Exe
				);

				StartInvestTimer ias (
					// transaction value
					TID ias nil;
					// timer value
					TV ias nil;
					V ias nil;
					// save current transaction; need to save in order to rollback in case of 'cancelinvest' command is received
					(CT TID~)^
#if (verbose)
					((Player Id~ started garage upgrade to CT~ in TV~ ms) Ew.Output~) Do
#endif
					(TV~ (GInv Id~) SetGarageClass~ nil CT~) Recall
#if (release)
					(V (CT~ 0) Get)^
					(((garage invest inProgress) (player Id~) garage (V~) (CT~)) Ew.OutChannel~) Do
#endif
				);

				InstantInvestTimer ias (
					V ias nil;

					(T true) ias (
#if (release)
						(V (CT~ 0) Get)^
						(((garage instantinvest failed) (player Id~) garage (V~) (CT~)) Ew.OutChannel~) Do
#endif
					);
					(T false) ias (
						(-2 (GInv Id~) SetGarageClass~ nil CT~) Recall
#if (release)
						(V (CT~ 0) Get)^
						(((garage instantinvest done) (player Id~) garage (V~) (CT~)) Ew.OutChannel~) Do
#endif
					);
					(T (((GInv Id~)) TState nil) Ident)~ Exe
				);

				PayForUpgrade ias (
					C ias nil;
					V ias nil;
					T ias nil;
					(Result false) ias (
#if (release)
						(((garage invest failed noResources) (player Id~) (prc Resources.Account.Withdraw.PRC~)) Ew.OutChannel~) Do
#endif
					);
					(Result true) ias (
						// save current transaction; need to save in order to rollback in case of 'cancelinvest' command is received
						(StartInvestTimer.TID (C~ V~))^
						(StartInvestTimer.TV T~)^
						StartInvestTimer~ Exe
					);
					(Resources.Account.Value V~)^
					Resources.Account.Withdraw~ Exe
					(Result Resources.Account.Result~)~ Exe
				);

				SetGarageClass ias (
					V ias nil;
					(Resources.Garage.SetClass.C ($~ 0) Get)^
					Resources.Garage.SetClass~ Exe
#if (release)
					(V (CT~ 0) Get)^
					(((garage invest done) (player Id~) garage (V~)) Ew.OutChannel~) Do
#endif
					(CT nil)^

				);

				ProcessInvest ias (
					// investment value
					IV ias nil;
					// investment duration
					IT ias nil;
					// right value - trying to invest
					(IA true) ias (
						WC ias nil;
						(C 1) ias (
							// value to pay
							(PayForUpgrade.V IV~)^
							// duration
							(PayForUpgrade.T IT~)^
							// desired class
							(PayForUpgrade.C WC~)^
							PayForUpgrade~ Exe
						);
						(C 0),(C -1) ias (
#if (verbose)
							((Can not invest to garage of player Id~ since capacity clazz WC~ lower than current Resources.Garage.Class~) Ew.Output~) Do
#endif
#if (release)
							(((garage invest failed invalidInvestValue) (player Id~) garage) Ew.OutChannel~) Do
#endif
						);
						// get wished capacity class
						(WC Resources.Garage.(G IV~)~)^
						(C ((WC~ Resources.Garage.Class~) Ew.Compare~) Do)~ Exe
					);
					// invalid value - investment is not allowed
					(IA false) ias (
#if (verbose)
						((Can not invest to garage of player Id~ since IV~ does not belong to Resources.Garage.InvestV~) Ew.Output~) Do
#endif
#if (release)
						(((garage invest failed invalidInvestValue) (player Id~) garage) Ew.OutChannel~) Do
#endif
					);
					(IV (CommandParams~ 0) Get)^
					(IT (CommandParams~ 1) Get)^
					// check if passed right value from defined range
					(IA (Resources.Garage.InvestV~ IV~) In)~ Exe
				);
				ProcessCancelInvest ias (
					V ias nil;
					(-1 (GInv Id~) SetGarageClass~) Recall
					(Resources.Account.Value (CT~ 1) Get)^
					Resources.Account.Recharge~ Exe
#if (release)
					(V (CT~ 0) Get)^
					(((garage cancelinvest done) (player Id~) garage (V~) (CT~)) Ew.OutChannel~) Do
#endif
					(CT nil)^
				);
				(Handle reservegarageplace) ias (
					RespCmd ias nil;
					OrigRequest ias nil;
					(Result true) ias ((Player Id~) Tx (ModeInfo.ModeHiring~ RespCmd~ Id~ (confirmed OrigRequest~))) Gate;
					(Result false) ias ((Player Id~) Tx (ModeInfo.ModeHiring~ RespCmd~ Id~ (declined OrigRequest~))) Gate;
					(OrigRequest (CommandParams~ 1) Get)^
					(RespCmd (CommandParams~ 2) Get)^
					// reserv places
					(Resources.Garage.Reserve.Place (CommandParams~ 0) Get)^
					Resources.Garage.Reserve~ Exe
					(Result Resources.Garage.Reserve.Result~)~ Exe
				);
				(Handle cancelreservationgarageplace) ias (
					(Resources.Garage.CancelReserve.Place (CommandParams~ 0) Get)^
					Resources.Garage.CancelReserve~ Exe
				);
				(Handle invest) ias (
					(PI false) ias (
#if (verbose)
						((The garage of player Id~ is in under upgrade CT~) Ew.Output~) Do
#endif
#if (release)
						(((garage invest failed underUpgrade) (player Id~)) Ew.OutChannel~) Do
#endif
					);
					(PI true) ias ProcessInvest~ Exe;
					(PI (CT~ nil) Ident)~ Exe
				);
				(Handle cancelinvest) ias (
					(PI true) ias (
#if (verbose)
						((The garage of player Id~ is not under upgrade) Ew.Output~) Do
#endif
#if (release)
						(((garage cancelinvest failed notUnderUpgrade) (player Id~)) Ew.OutChannel~) Do
#endif
					);
					(PI false) ias ProcessCancelInvest~ Exe;
					(PI (CT~ nil) Ident)~ Exe
				);
				(Handle instantinvest) ias (
					(PI true) ias (
#if (verbose)
						((The garage of player Id~ is not under upgrade) Ew.Output~) Do
#endif
#if (release)
						(((garage instantinvest failed notUnderUpgrade) (player Id~)) Ew.OutChannel~) Do
#endif
					);
					(PI false) ias InstantInvestTimer~ Exe;
					(PI (CT~ nil) Ident)~ Exe
				);
				(Handle updategarageconf) ias (
					(Resources.Garage.Update.Conf CommandParams~)^
					Resources.Garage.Update~ Exe
#if (verbose)
					((Player Id~ updated garage configuration) Ew.Output~) Do
#endif
#if (release)
					(((garage updategarageconf ok) (player PlayerId~)) Ew.OutChannel~) Do
#endif
				);
				// redirecting processing to resource manager
				(Handle upgradecar) ias ((Player Id~) Tx (ModeInfo.ModeResourceMgr~ upgradeunit Id~ CommandParams~)) Gate;
				(Handle instantupgradecar) ias ((Player Id~) Tx (ModeInfo.ModeResourceMgr~ instantupgradeunit Id~ CommandParams~)) Gate;
				(Handle cancelupgradecar) ias ((Player Id~) Tx (ModeInfo.ModeResourceMgr~ cancelupgradeunit Id~ CommandParams~)) Gate;
				(Handle back) ias (
					(Player.Mode main)^
#if (verbose)
					((The player Id~ returned to main mode) Ew.Output~) Do
#endif
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}