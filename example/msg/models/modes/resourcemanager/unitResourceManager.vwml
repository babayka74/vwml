module PlayerResourceManager {
	MagicWorld ias (
		Player ias (
			ResourceManager ias (
				CommandId ias nil;
				CommandParams ias nil;
				HiredUnitId ias nil;
				UnitsInAction ias 0;
				StopRM ias false;
				Kind ias nil;
				Class ias nil;
				Cost ias nil;
				Contain ias nil;
				RT ias nil;
				// real-time removed units
				RTUnits ias ();

				Init ias (
					(StopRM false)^
				);
				// send exit signal to unit to stop its activity
				ExitUnit ias (
					U ias nil;
					C ias nil;
#if (unitalive)
					((MagicWorld)->(Characters)->(Unit U~) Tx (nil exit U~ ())) Gate
#else
					(StopRM false) ias ((Player Id~) Tx (ModeInfo.ModeResourceMgr~ unitstopped U~ (U~))) Gate;
					(StopRM true) ias doNothing;
					((MagicWorld)->(Characters)->(Unit U~)) Release
					(StopRM StopRM~)~ Exe
#if (verbose)
					((Unit U~ released) Ew.Output~) Do
#endif
#endif // unitalive
				);
				// recalculates partial GDev and Contain(Hospitality) factors
				RecalcFactors ias (
					Op ias nil;
					(Resources.Business.(Gdf RT~) ((Resources.Business.(Gdf RT~)~ (Cost~ 2) Get) Op~) Do)^
					(Resources.Business.(Ctf RT~) ((Resources.Business.(Ctf RT~)~ (Contain~ 1) Get) Op~) Do)^
					// assembles integrated GDevelop
					Resources.Business.AssembleGDevelop~ Exe
					// update rating based on new factors
					(MagicWorld)->(Player Id~)->(Main)->RecalcRating~ Exe
				);
				// notifies battlefield about returning all remained units to base
				NotifyAboutFBComplete ias (
					(StopRM false) ias doNothing;
					(StopRM true) ias (
						(UnitsInAction 0) FinishInterception
						((Player Id~) Tx (ModeInfo.ModeMain~ partclosed 0 (battlefield))) Gate
					);
					(StopRM StopRM~)~ Exe
#if (verbose)
					((All remained units of player Id~ have been returned) Ew.Output~) Do
#endif
				);
				// stops all hired units. 
				// The unit sends 'unitstopped' command to resource manager in order to notify about stopping activity
				StopAllUnits ias (
					NotifyAboutExiting ias (
						(Resources.Units.Hired ()) FinishInterception
						((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (resourcemanager))) Gate
					);
					(NoHired true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (resourcemanager))) Gate;
					(NoHired false) ias (
						StopUnit ias (
							(DismissUnit.U $~)^
							DismissUnit~ Exe
						);
						(Resources.Units.Hired () NotifyAboutExiting~) StartInterception
						(Resources.Units.Hired~ StopUnit~) ForEach
					);
					(NoHired (Resources.Units.Hired~ ()) Ident)~ Exe
#if (unitalive)
#esle
					(Resources.Units.Hired ())^
#endif
				);

				ComplexDisjoin ias (
					U ias nil;
					ActionOnDisjoin ias none;
					 
					(NJ true) ias (
						(NDJ true) ias (
							(ADJ none) ias doNothing;
							(ADJ exit) ias (					
								(ExitUnit.U U~)^
								ExitUnit~ Exe
							);
							(ADJ ActionOnDisjoin~)~ Exe
						);
						// unit joined with another units
						(NDJ false) ias (
							DJU ias (
								(DisjoinUnits.U $~)^
								(DisjoinUnits.UD none)^
								DisjoinUnits~ Exe
							);
							(ADJ none) ias doNothing;
							(ADJ exit) ias (
								// taking into consideration that units are disjoined in async way,
								// so we have to store unit id and send 'exit' when all units joined with it have been disjoined
								(RTUnits (RTUnits~ (U~)) Join)^
								((MagicWorld)->(Characters)->(Unit U~)->DisjoinCbk NotifyWhenDJFinished~)^
								(MagicWorld)->(Characters)->(Unit U~)->InitDisjoinAllUnitsInterceptor~ Exe
							);
							(ADJ ActionOnDisjoin~)~ Exe
							((MagicWorld)->(Characters)->(Unit U~)->Joined~ DJU~) ForEach
						);
						(NDJ ((MagicWorld)->(Characters)->(Unit U~)->Joined~ ()) Ident)~ Exe
					);
					(NJ false) ias (
						(DisjoinUnits.U U~)^
						(DisjoinUnits.UD ActionOnDisjoin~)^
						DisjoinUnits~ Exe
					);
					(IsGarageUnit false) ias doNothing;
					(IsGarageUnit true) ias (
						(Resources.Garage.CancelReserve.Place (MagicWorld)->(Player Id~)->(Resources)->(Garage)->(P Kind~ Class~)~)^
						Resources.Garage.CancelReserve~ Exe
					); 
					(Kind (MagicWorld)->(Characters)->(Unit U~)->Kind~)^
					(Class (MagicWorld)->(Characters)->(Unit U~)->Class~)^
					// free place to garage in case if unit is car
					(IsGarageUnit ((MagicWorld)->(Characters)->(Unit U~)->Container~ garage) Ident)~ Exe
					// dismiss unit, taking into consideration that unit may be joined with others
					(NJ ((MagicWorld)->(Characters)->(Unit U~)->JoinedWith~ none) Ident)~ Exe
				);

				DismissUnit ias (
					U ias nil;
					NotifyWhenDJFinished ias (
						FE ias (
							(MagicWorld)->(Characters)->(Unit $~)->DoneDisjoinAllUnitsInterceptor~ Exe
							(ExitUnit.U $~)^
							ExitUnit~ Exe
						);
						(RTUnits~ FE~) ForEach
						(RTUnits ())^
					);
					(CorrectUnit false) ias (
#if (verbose)
						((Unit U~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
#if (business)
						(Kind (MagicWorld)->(Characters)->(Unit U~)->Kind~)^
						(Class (MagicWorld)->(Characters)->(Unit U~)->Class~)^
						(Cost (MagicWorld)->(Characters)->(Unit U~)->Cost~)^
						(Contain (MagicWorld)->(Characters)->(Unit U~)->Contain~)^
#endif
						(ComplexDisjoin.U U~)^
						(ComplexDisjoin.ActionOnDisjoin exit)^
						ComplexDisjoin~ Exe
						
						(Resources.Units.Hired (Resources.Units.Hired~ (U~)) Substruct)^
#if (business)
						// resource type
						(RT (Cost~ 1) Get)^

						// decrements number of units of specific kind
						(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.DecValue~) Do)^
						(RecalcFactors.Op Ew.SubF~)^
						RecalcFactors~ Exe
#if (verbose)
						((clazz (MagicWorld)->(Player Id~)->(Resources)->(Business)->(Q Kind~ Class~)~ ctf (MagicWorld)->(Player Id~)->(Resources)->(Business)->(Ctf RT~)~ part dev (Resources)->(Business)->(Gdf RT~)~ for player Id~) Ew.Output~) Do
#endif
#endif // business

#if (release)
						(((resourcemanager releaseunit done) (player Id~) (unit U~) Kind~) Ew.OutChannel~) Do
#endif
#if (verbose)
						((Player Id~ dismissed unit U~) Ew.Output~) Do
#endif
					);
					(CorrectUnit (Resources.Units.Hired~ U~) In)~ Exe
				);

				MarkAsFreeAndDismissUnit ias (
					MarkUnitAsFree~ Exe
					(DismissUnit.U (CommandParams~ 0) Get)^
					DismissUnit~ Exe
				);

				SaleUnit ias (
					U ias nil;
					K ias nil;
					// unit's id
					(U (CommandParams~ 0) Get)^
					(K (MagicWorld)->(Characters)->(Unit U~)->Kind~)^
					// fetch unit's cost
					(Resources.Account.Value (MagicWorld)->(Characters)->(Unit U~)->Cost~)^
					// perform bank transaction
					Resources.Account.Recharge~ Exe
					// unit is marked as free and released (stopped and deactivated)
					MarkAsFreeAndDismissUnit~ Exe
#if (release)
					(((resourcemanager saleunit done) (player Id~) (unit U~) K~) Ew.OutChannel~) Do
#endif
				);

				UpdateFactorsFromParams ias (
					Params ias nil;
					Op ias nil;
					// increments/decrements number of units of specific kind
					(Op plus) ias (
						(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.IncValue~) Do)^
						(RecalcFactors.Op Ew.SumF~)^
						RecalcFactors~ Exe
					);
					(Op minus) ias (
						(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.DecValue~) Do)^
						(RecalcFactors.Op Ew.SubF~)^
						RecalcFactors~ Exe
					);
					(HiredUnitId (Params~ 0) Get)^
					(Kind (Params~ 1) Get)^
					(Class (Params~ 2) Get)^
					(Cost (Params~ 3) Get)^
					(Contain (Params~ 4) Get)^
					// resource type
					(RT (Cost~ 1) Get)^
					(Op Op~)~ Exe
				);

				TakeOnBoardUnit ias (
					(UpdateFactorsFromParams.Params CommandParams~)^
					(UpdateFactorsFromParams.Op plus)^
					UpdateFactorsFromParams~ Exe
#if (verbose)
					((clazz ($$)->(Resources)->(Business)->(Q Kind~ Class~)~ ctf ($$)->(Resources)->(Business)->(Ctf RT~)~ part dev ($$)->(Resources)->(Business)->(Gdf RT~)~ for player Id~) Ew.Output~) Do
#endif
					(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Join)^
#if (verbose)
					((Player Id~ added unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
#if (release)
					(((resourcemanager hireunit done) (player Id~) (unit HiredUnitId~) (MagicWorld)->(Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
				);
				
				PushOutUnit ias (
					(CorrectUnit false) ias doNothing;
					(CorrectUnit true) ias (
						(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Substruct)^
#if (verbose)
						((Player Id~ removed unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				DisjoinUnits ias (
					U ias nil;
					// user data; used when some data should be passed through all processing chain
					UD ias nil;
#if (unitalive)
					((MagicWorld)->(Characters)->(Unit U~) Tx (Id~ disjoin 0 ((U~ cancel UD~)))) Gate
#if (verbose)
					((Unit U~ initiated disjoin of player Id~) Ew.Output~) Do
#endif
#else // unitalive
					((MagicWorld)->(Characters)->(Unit U~)->(DisjoinUnit)->Actions ((U~ cancel UD~)))^
					(MagicWorld)->(Characters)->(Unit U~)->DisjoinUnit~ Exe
#endif // unitalive
				);

				ExitAfterDisjoin ias (
					U ias nil;
					E ias nil;
					(E false) ias doNothing;
					(E true) ias (
						(ExitUnit.U U~)^
						ExitUnit~ Exe
					);
					(E (E~ exit) Ident)~ Exe
				);

				AckDisjoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager disjoinunits done) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
					(ExitAfterDisjoin.U (R~ 1) Get)^
					(ExitAfterDisjoin.E (R~ 3) Get)^
					ExitAfterDisjoin~ Exe
				);

				RejectDisjoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager disjoinunits failed (R~ 3) Get) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
					(ExitAfterDisjoin.U (R~ 1) Get)^
					(ExitAfterDisjoin.E (R~ 3) Get)^
					ExitAfterDisjoin~ Exe
				);

				JoinUnits ias (
					// U1 is joined with U2 (U2 <- U1)
					U1 ias nil;
					U2 ias nil;
					// join not allowed
					(NJ true) ias (
#if (verbose)
						((Unit U1~ can not be joined with U2~ of player Id~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager joinunits failed) (player Id~) (unit U1~) (unit U2~)) Ew.OutChannel~) Do
#endif
					);
					// join allowed
					(NJ false) ias (
#if (unitalive)
						// 1. U1~ receives 'join'
						// 2. fetches 0 element and processes 'invite'
						// 3. Sends remained to U2~
						// 4. U2~ performs the same steps, but processes 'ack' (sets JoinedWith)
						// 5. Sends 'ackjoin' to player's resourcemanager to commit 'transaction'
						((MagicWorld)->(Characters)->(Unit U2~) Tx (Id~ join 0 ((U1~ invite)(U1~ ack U2~)(Id~ U1~ U2~ ackjoinunits)))) Gate
#if (verbose)
						((Unit U1~ initiated join with U2~ of player Id~) Ew.Output~) Do
#endif
#else // unitalive
						((MagicWorld)->(Characters)->(Unit U2~)->(JoinUnit)->Actions ((U1~ invite)(U1~ ack U2~)(Id~ U1~ U2~ ackjoinunits)))^
						(MagicWorld)->(Characters)->(Unit U2~)->JoinUnit~ Exe
#if (verbose)
						((Unit U1~ joined to U2~ of player Id~) Ew.Output~) Do
#endif
#endif // unitalive
					);
					(U1 (CommandParams~ 0) Get)^
					(U2 (CommandParams~ 1) Get)^
					(NJ ((MagicWorld)->(Characters)->(Unit U2~)->Capacity~ 0) Ident)~ Exe
				);

				AckJoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager joinunits done) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
				);

				RejectJoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager joinunits failed (R~ 3) Get) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
				);

				MarkUnitAsIsInAction ias (
					(CorrectUnit false) ias (
#if (verbose)
						((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						(UnitInAction true) ias ((Player Id~) Tx ((CommandParams~ 2) Get rejectedunit HiredUnitId~ ())) Gate;
						(UnitInAction false) ias (
							(FirstUnit true) ias (UnitsInAction 0 NotifyAboutFBComplete~) StartInterception;
							(FirstUnit false) ias doNothing;
							((MagicWorld)->(Characters)->(Unit HiredUnitId~)->Type (CommandParams~ 1) Get)^
							(MagicWorld)->(Characters)->(Unit HiredUnitId~)->CreateConcreteUnitByType~ Exe
							((MagicWorld)->(Characters)->(Unit HiredUnitId~)->InAction true)^
							(UnitsInAction ((UnitsInAction~) Ew.IncValue~) Do)^
							((Player Id~) Tx ((CommandParams~ 2) Get recruitedunit HiredUnitId~ ())) Gate
#if (release)
							(((resourcemanager recruitunit done inAction) (player Id~) (unit HiredUnitId~) (MagicWorld)->(Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
							(FirstUnit (UnitsInAction~ 1) Ident)~ Exe
						);
						(UnitInAction (MagicWorld)->(Characters)->(Unit HiredUnitId~)->InAction~)~ Exe
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				MarkUnitAsFree ias (
					(CorrectUnit false) ias (
#if (verbose)
						((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						(IA false) ias doNothing;
						(IA true) ias (
							((MagicWorld)->(Characters)->(Unit HiredUnitId~)->InAction false)^
							(MagicWorld)->(Characters)->(Unit HiredUnitId~)->ReleaseConcreteUnit~ Exe
							(UnitsInAction ((UnitsInAction~) Ew.DecValue~) Do)^
#if (verbose)
							((Player Id~ returned unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
#if (release)
							(((resourcemanager returnunit done free) (player Id~) (unit HiredUnitId~) (MagicWorld)->(Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
						);
						(IA (MagicWorld)->(Characters)->(Unit HiredUnitId~)->InAction~)~ Exe
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);
				// upgrades unit's properties
				UpgradeUnit ias (
					Credentials ias nil;
					Props ias nil;
					Params ias nil;
					UId ias nil;
					// time value
					TV ias nil;
					// the interpretation of entity can be deferred in time
					UpgradeRequest ias (
						F ias nil;
						C ias nil;
						P ias nil;
						(C (F~ 0) Get)^
						(P (F~ 1) Get)^
						// upgrade unit props
						(U ((C~ 2) Get 1) Get)^
						// (UnitId kind class cost contain)
						(UpdateFactorsFromParams.Params (U~
										   (MagicWorld)->(Characters)->(Unit U~)->Kind~
										   (MagicWorld)->(Characters)->(Unit U~)->Class~
										   (MagicWorld)->(Characters)->(Unit U~)->Cost~
										   (MagicWorld)->(Characters)->(Unit U~)->Contain~)
										)^
						(UpdateFactorsFromParams.Op minus)^
						UpdateFactorsFromParams~ Exe
#if (unitalive)                                 	
						((Unit U~) Tx (Id~ setprops 0 (P~))) Gate
#else
						(P~ (MagicWorld)->(Characters)->(Unit U~)->PropertySetOperation~) ForEach
#endif // unitalive
						// sends command to itself to reclaculate factors
						// (UnitId kind class cost contain)
						(UpdateFactorsFromParams.Params (U~ ((P~ 0) Get 1) Get ((P~ 1) Get 1) Get (C~ 0) Get (P~ 3) Get))^
						(UpdateFactorsFromParams.Op plus)^
						UpdateFactorsFromParams~ Exe
#if (release)
						(((resourcemanager upgradeunit done)
							(player Id~)
							(unit U~)
							(MagicWorld)->(Characters)->(Unit U~)->Kind~
							(clazz (MagicWorld)->(Characters)->(Unit U~)->Class~)
							(capacity (MagicWorld)->(Characters)->(Unit U~)->Capacity~)
							)
						Ew.OutChannel~) Do
#endif
					);
					DefUpgradeRequest ias (
						(UpgradeRequest.F $~)^
						UpgradeRequest~ Exe
					);
					// payment succeeded
					(R true) ias (
						(NUT false) ias (
#if (release)
							(((resourcemanager upgradeunit inProgress) (player Id~) (unit UId~) (MagicWorld)->(Characters)->(Unit UId~)->Kind~) Ew.OutChannel~) Do
#endif
 							(TV~ (U Id~ UId~) DefUpgradeRequest~ nil Params~) Recall
							((U Id~ UId~) Params~)^
							((U Id~ UId~) ResourceManager true) Context
						);
						(NUT true) ias (
							(UpgradeRequest.F Params~)^
							UpgradeRequest~ Exe
						);
						// checks updatetime (NUT - No Update Time)
						(NUT (TV~ 0) Ident)~ Exe
					);
					// payment failed
					(R false) ias (
						// fail - no resources
#if (release)
						(((resourcemanager upgradeunit failed noResources) (player Id~) (unit UId~) (MagicWorld)->(Characters)->(Unit UId~)->Kind~) Ew.OutChannel~) Do
#endif
					);

					(Credentials (Params~ 0) Get)^
					(Props (Params~ 1) Get)^
					// unit id
					(UId ((Credentials~ 2) Get 1) Get)^
					// time value
					(TV ((Credentials~ 1) Get 1) Get)^
					(Resources.Account.Value (Credentials~ 0) Get)^
					Resources.Account.Withdraw~ Exe
					(R Resources.Account.Result~)~ Exe
				);

				InstantUpgradeUnit ias (
					Params ias nil;
					UId ias nil;
					(UT true) ias (
#if (verbose)
						((Player Id~ does not have unit (MagicWorld)->(Player Id~)->(ResourceManager)->(U Id~ UId~) under upgrade) Ew.Output~) Do
#endif
					);
					(UT false) ias (
						(-2 (U Id~ UId~) UpgradeUnit.DefUpgradeRequest~ nil (MagicWorld)->(Player Id~)->(ResourceManager)->(U Id~ UId~)~) Recall
#if (release)
						(((resourcemanager instantupgradeunit done) (player Id~) (unit UId~) (MagicWorld)->(Characters)->(Unit UId~)->Kind~) Ew.OutChannel~) Do
#endif
					);
					(UId (Params~ 0) Get)^
					(UT (((MagicWorld)->(Player Id~)->(ResourceManager)->(U Id~ UId~)) TState nil) Ident)~ Exe
				);

				CancelUpgradeUnit ias (
					Params ias nil;
					UId ias nil;

					(UId (Params~ 0) Get)^
#if (release)
					(((resourcemanager cancelupgradeunit done) (player Id~) (unit UId~) (MagicWorld)->(Characters)->(Unit UId~)->Kind~) Ew.OutChannel~) Do
#endif
 					(-1 (U Id~ UId~) DefUpgradeRequest~) Recall
				);

				// unit has been hired and must be associated with player
				(Handle hireunit) ias (
					TakeOnBoardUnit~ Exe
#if (verbose)
					((Player Id~ hired unit HiredUnitId~) Ew.Output~) Do
#endif
				);
				// unit's functionality doesn't need to player
				(Handle dismissunit),(Handle releaseunit) ias MarkAsFreeAndDismissUnit~ Exe;
				(Handle saleunit) ias (
#if (business)
					SaleUnit~ Exe
#endif
				);
				// join unit with another if capacity isn't 0
				(Handle joinunits) ias JoinUnits~ Exe;
				(Handle ackjoinunits) ias AckJoinUnitsCallback~ Exe;
				(Handle rejectjoinunits) ias RejectJoinUnitsCallback~ Exe;
				// disjoins previously joined units
				(Handle disjoinunits) ias (
					(ComplexDisjoin.U (CommandParams~ 0) Get)^
					(ComplexDisjoin.ActionOnDisjoin none)^
					ComplexDisjoin~ Exe
				);
				(Handle ackdisjoinunits) ias AckDisjoinUnitsCallback~ Exe;
				(Handle rejectdisjoinunits) ias RejectDisjoinUnitsCallback~ Exe;
				// unitstopped is sent when command exit is sent to unit and unit finishes its work
				(Handle unitstopped) ias PushOutUnit~ Exe;
				// unit is in action (battle for example)
				(Handle takeunit) ias MarkUnitAsIsInAction~ Exe;
				// unit is returned from action, if wasn't killed
				(Handle returnunit) ias MarkUnitAsFree~ Exe;
				// upgrade unit's properties
				(Handle upgradeunit) ias (
					(UpgradeUnit.Params CommandParams~)^
					UpgradeUnit~ Exe
				);
				(Handle instantupgradeunit) ias (
					(InstantUpgradeUnit.Params CommandParams~)^
					InstantUpgradeUnit~ Exe
				);
				// cancel upgrade operation
				(Handle cancelupgradeunit) ias (
					(CancelUpgradeUnit.Params CommandParams~)^
					CancelUpgradeUnit~ Exe
				);
				// get list of hired units
				(Handle getunits) ias (
					Report ias (
#if (verbose)
						((Player Id~ has unit (unit $~) and its kind is (MagicWorld)->(Characters)->(Unit $~)->Kind~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager getunits done) (player Id~) (unit $~) (MagicWorld)->(Characters)->(Unit $~)->Kind~) Ew.OutChannel~) Do
#endif
					);
					(Resources.Units.Hired~ Report~) ForEach
				);
				// stop all hired units
				(Handle exit) ias (
					(StopRM true)^
					StopAllUnits~ Exe
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}
