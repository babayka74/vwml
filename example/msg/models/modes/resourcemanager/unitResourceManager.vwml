module PlayerResourceManager {
	MagicWorld ias (
		Player ias (
			ResourceManager ias (
				CommandId ias nil;
				CommandParams ias nil;
				HiredUnitId ias nil;

				TakeOnBoardUnit ias (
					(HiredUnitId (CommandParams~ 0) Get)^
					(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Join)^
					((Player Id~ added unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
				);
				
				PushOutUnit ias (
					(HiredUnitId (CommandParams~ 0) Get)^
					(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Substruct)^
					((Player Id~ removed unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
				);

				MarkUnitAsIsInAction ias (
					(CorrectUnit false) ias ((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do;
					(CorrectUnit true) ias (
						(UnitInAction true) ias ((Player Id~) Tx (ModeInfo.ModeBattle~ rejectedunit HiredUnitId~ ())) Gate;
						(UnitInAction false) ias (
							((Characters)->(Unit HiredUnitId~)->Type (CommandParams~ 1) Get)^
							(Characters)->(Unit HiredUnitId~)->CreateConcreteUnitByType~ Exe
							((Characters)->(Unit HiredUnitId~)->InAction true)^
							((Player Id~) Tx (ModeInfo.ModeBattle~ recruitedunit HiredUnitId~ ())) Gate
						);
						(UnitInAction (Characters)->(Unit HiredUnitId~)->InAction~)~ Exe
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				MarkUnitAsFree ias (
					(CorrectUnit false) ias ((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do;
					(CorrectUnit true) ias (
						((Characters)->(Unit HiredUnitId~)->InAction false)^
						(Characters)->(Unit HiredUnitId~)->ReleaseConcreteUnit~ Exe
						((Player Id~ returned unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				// unit has been hired and must be associated with player
				(Handle hireunit) ias (
					TakeOnBoardUnit~ Exe
					((Player Id~ hired unit HiredUnitId~) Ew.Output~) Do
				);
				// unit's functionality doesn't need to player
				(Handle dismissunit) ias (
					(CorrectUnit false) ias ((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do;
					(CorrectUnit true) ias (
						PushOutUnit~ Exe
						((Characters)->(Unit HiredUnitId~)->StopUnit true)^
						((Player Id~ dismissed unit HiredUnitId~) Ew.Output~) Do
					);
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);
				// remove stopped unit which was killed and stopped
				(Hanlde releaseunit) ias PushOutUnit~ Exe;
				// unit is in action (battle for example)
				(Handle takeunit) ias MarkUnitAsIsInAction~ Exe;
				// unit is returned from action, if wasn't killed
				(Handle returnunit) ias MarkUnitAsFree~ Exe;

				(Handle CommandId~)~ Exe
			);
		);
	);
}
