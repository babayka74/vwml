module PlayerResourceManager {
	MagicWorld ias (
		Player ias (
			ResourceManager ias (
				CommandId ias nil;
				CommandParams ias nil;
				HiredUnitId ias nil;
				UnitsInAction ias 0;
				StopRM ias false;
				Kind ias nil;
				Class ias nil;
				Cost ias nil;
				Contain ias nil;
				RT ias nil;

				Init ias (
					(StopRM false)^
				);
				// recalculates partial GDev and Contain(Hospitality) factors
				RecalcFactors ias (
					// calculating partial GDevelop factor for specific unit's kind and class and resource
					(Resources.Business.(Gdf RT~) ((Resources.Business.(Q Kind~ Class~)~ (Cost~ 2) Get) Ew.Mul~) Do)^
					// contain (hospitality) per resource
					(Resources.Business.(Ctf RT~) ((Resources.Business.(Q Kind~ Class~)~ (Contain~ 1) Get) Ew.Mul~) Do)^
					// assembles integrated GDevelop
					Resources.Business.AssembleGDevelop~ Exe
				);
				// notifies battlefield about returning all remained units to base
				NotifyAboutFBComplete ias (
					(StopRM false) ias doNothing;
					(StopRM true) ias (
						(UnitsInAction 0 NotifyAboutFBComplete~) FinishInterception
						((Player Id~) Tx (ModeInfo.ModeMain~ partclosed 0 (battlefield))) Gate
					);
					(StopRM StopRM~)~ Exe
#if (verbose)
					((All remained units of player Id~ have been returned) Ew.Output~) Do
#endif
				);
				// stops all hired units. 
				// The unit sends 'unitstopped' command to resource manager in order to notify about stopping activity
				StopAllUnits ias (
					NotifyAboutExiting ias (
						(Resources.Units.Hired () NotifyAboutExiting~) FinishInterception
						((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (resourcemanager))) Gate
					);
					(NoHired true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (resourcemanager))) Gate;
					(NoHired false) ias (
						StopUnit ias (
							(DismissUnit.U $~)^
							DismissUnit~ Exe
						);
						(Resources.Units.Hired () NotifyAboutExiting~) StartInterception
						(Resources.Units.Hired~ StopUnit~) ForEach
					);
					(NoHired (Resources.Units.Hired~ ()) Ident)~ Exe
				);

				DismissUnit ias (
					U ias nil;
					(CorrectUnit false) ias (
#if (verbose)
						((Unit U~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						(NJ true) ias ((Characters)->(Unit U~) Tx (nil exit $~ ())) Gate;
						(NJ false) ias (
							(DisjoinUnits.U U~)^
							(DisjoinUnits.UD exit)^
							DisjoinUnits~ Exe
						); 
						
						(Resources.Units.Hired (Resources.Units.Hired~ (U~)) Substruct)^
#if (business)
						(Kind (Characters)->(Unit U~)->Kind~)^
						(Class (Characters)->(Unit U~)->Class~)^
						(Cost (Characters)->(Unit U~)->Cost~)^
						(Contain (Characters)->(Unit U~)->Contain~)^
						// resource type
						(RT (Cost~ 1) Get)^

						// decrements number of units of specific kind
						(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.DecValue~) Do)^
						RecalcFactors~ Exe
#if (verbose)
						((clazz ($$)->(Resources)->(Business)->(Q Kind~ Class~)~ ctf ($$)->(Resources)->(Business)->(Ctf RT~)~ part dev ($$)->(Resources)->(Business)->(Gdf RT~)~ for player Id~) Ew.Output~) Do
#endif
#endif // business

#if (release)
						(((resourcemanager releaseunit done) (player Id~) (unit U~) (Characters)->(Unit U~)->Kind~) Ew.OutChannel~) Do
#endif
						(NJ ((Characters)->(Unit U~)->JoinedWith~ nil) Ident)~ Exe
#if (verbose)
						((Player Id~ dismissed unit U~) Ew.Output~) Do
#endif
					);
					(CorrectUnit (Resources.Units.Hired~ U~) In)~ Exe
				);

				MarkAsFreeAndDismissUnit ias (
					MarkUnitAsFree~ Exe
					(DismissUnit.U (CommandParams~ 0) Get)^
					DismissUnit~ Exe
				);

				SaleUnit ias (
					U ias nil;
					K ias nil;
					// unit's id
					(U (CommandParams~ 0) Get)^
					(K (Characters)->(Unit U~)->Kind~)^
					// fetch unit's cost
					(Resources.Account.Value (Characters)->(Unit U~)->Cost~)^
					// perform bank transaction
					Resources.Account.Recharge~ Exe
					// unit is marked as free and released (stopped and deactivated)
					MarkAsFreeAndDismissUnit~ Exe
#if (release)
					(((resourcemanager saleunit done) (player Id~) (unit U~) K~) Ew.OutChannel~) Do
#endif
				);

				TakeOnBoardUnit ias (
					(HiredUnitId (CommandParams~ 0) Get)^
#if (business)
					(Kind (CommandParams~ 1) Get)^
					(Class (CommandParams~ 2) Get)^
					(Cost (CommandParams~ 3) Get)^
					(Contain (CommandParams~ 4) Get)^
					// resource type
					(RT (Cost~ 1) Get)^
#if (verbose)
					((Unit HiredUnitId~ cost Cost~ contain Contain~ clazz Class~ for player Id~) Ew.Output~) Do
#endif
					// increments number of units of specific kind
					(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.IncValue~) Do)^
					RecalcFactors~ Exe
#if (verbose)
					((clazz ($$)->(Resources)->(Business)->(Q Kind~ Class~)~ ctf ($$)->(Resources)->(Business)->(Ctf RT~)~ part dev ($$)->(Resources)->(Business)->(Gdf RT~)~ for player Id~) Ew.Output~) Do
#endif
#endif /* business */
					(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Join)^
#if (verbose)
					((Player Id~ added unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
#if (release)
					(((resourcemanager hireunit done) (player Id~) (unit HiredUnitId~) (Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
				);
				
				PushOutUnit ias (
					(CorrectUnit false) ias doNothing;
					(CorrectUnit true) ias (
						(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Substruct)^
#if (verbose)
						((Player Id~ removed unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				DisjoinUnits ias (
					U ias nil;
					// user data; used when some data should be passed through all processing chain
					UD ias nil;
					((Characters)->(Unit U~) Tx (Id~ disjoin 0 ((U~ cancel UD~)))) Gate
#if (verbose)
					((Unit U~ initiated disjoin of player Id~) Ew.Output~) Do
#endif
				);

				ExitAfterDisjoin ias (
					U ias nil;
					E ias nil;
					(E false) ias doNothing;
					(E true) ias ((Characters)->(Unit U~) Tx (nil exit $~ ())) Gate;
					(E (E~ exit) Ident)~ Exe
				);

				AckDisjoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager disjoinunits done) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
					(ExitAfterDisjoin.U (R~ 1) Get)^
					(ExitAfterDisjoin.E (R~ 3) Get)^
					ExitAfterDisjoin~ Exe
				);

				RejectDisjoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager disjoinunits failed (R~ 3) Get) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
					(ExitAfterDisjoin.U (R~ 1) Get)^
					(ExitAfterDisjoin.E (R~ 3) Get)^
					ExitAfterDisjoin~ Exe
				);

				JoinUnits ias (
					// U1 is joined with U2 (U2 <- U1)
					U1 ias nil;
					U2 ias nil;
					// join not allowed
					(NJ true) ias (
#if (verbose)
						((Unit U1~ can not be joined with U2~ of player Id~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager joinunits failed) (player Id~) (unit U1~) (unit U2~)) Ew.OutChannel~) Do
#endif
					);
					// join allowed
					(NJ false) ias (
						// 1. U1~ receives 'join'
						// 2. fetches 0 element and processes 'invite'
						// 3. Sends remained to U2~
						// 4. U2~ performs the same steps, but processes 'ack' (sets JoinedWith)
						// 5. Sends 'ackjoin' to player's resourcemanager to commit 'transaction'
						((Characters)->(Unit U2~) Tx (Id~ join 0 ((U1~ invite)(U1~ ack U2~)(Id~ U1~ U2~ ackjoinunits)))) Gate
#if (verbose)
						((Unit U1~ initiated join with U2~ of player Id~) Ew.Output~) Do
#endif
					);
					(U1 (CommandParams~ 0) Get)^
					(U2 (CommandParams~ 1) Get)^
					(NJ ((Characters)->(Unit U2~)->Capacity~ 0) Ident)~ Exe
				);

				AckJoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager joinunits done) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
				);

				RejectJoinUnitsCallback ias (
					(R (CommandParams~ 0) Get)^
#if (release)
					(((resourcemanager joinunits failed (R~ 3) Get) (player Id~) (unit (R~ 1) Get) (unit (R~ 2) Get)) Ew.OutChannel~) Do
#endif
				);

				MarkUnitAsIsInAction ias (
					(CorrectUnit false) ias (
#if (verbose)
						((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						(UnitInAction true) ias ((Player Id~) Tx ((CommandParams~ 2) Get rejectedunit HiredUnitId~ ())) Gate;
						(UnitInAction false) ias (
							(FirstUnit true) ias (UnitsInAction 0 NotifyAboutFBComplete~) StartInterception;
							(FirstUnit false) ias doNothing;
							((Characters)->(Unit HiredUnitId~)->Type (CommandParams~ 1) Get)^
							(Characters)->(Unit HiredUnitId~)->CreateConcreteUnitByType~ Exe
							((Characters)->(Unit HiredUnitId~)->InAction true)^
							(UnitsInAction ((UnitsInAction~) Ew.IncValue~) Do)^
							((Player Id~) Tx ((CommandParams~ 2) Get recruitedunit HiredUnitId~ ())) Gate
#if (release)
							(((resourcemanager recruitunit done inAction) (player Id~) (unit HiredUnitId~) (Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
							(FirstUnit (UnitsInAction~ 1) Ident)~ Exe
						);
						(UnitInAction (Characters)->(Unit HiredUnitId~)->InAction~)~ Exe
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				MarkUnitAsFree ias (
					(CorrectUnit false) ias (
#if (verbose)
						((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						((Characters)->(Unit HiredUnitId~)->InAction false)^
						(Characters)->(Unit HiredUnitId~)->ReleaseConcreteUnit~ Exe
						(UnitsInAction ((UnitsInAction~) Ew.DecValue~) Do)^
#if (verbose)
						((Player Id~ returned unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager returnunit done free) (player Id~) (unit HiredUnitId~) (Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				// unit has been hired and must be associated with player
				(Handle hireunit) ias (
					TakeOnBoardUnit~ Exe
#if (verbose)
					((Player Id~ hired unit HiredUnitId~) Ew.Output~) Do
#endif
				);
				// unit's functionality doesn't need to player
				(Handle dismissunit),(Handle releaseunit) ias MarkAsFreeAndDismissUnit~ Exe;
				(Handle saleunit) ias (
#if (business)
					SaleUnit~ Exe
#endif
				);
				// join unit with another if capacity isn't 0
				(Handle joinunits) ias JoinUnits~ Exe;
				(Handle ackjoinunits) ias AckJoinUnitsCallback~ Exe;
				(Handle rejectjoinunits) ias RejectJoinUnitsCallback~ Exe;
				// disjoins previously joined units
				(Handle disjoinunits) ias (
					(DisjoinUnits.U (CommandParams~ 0) Get)^
					DisjoinUnits~ Exe
				);
				(Handle ackdisjoinunits) ias AckDisjoinUnitsCallback~ Exe;
				(Handle rejectdisjoinunits) ias RejectDisjoinUnitsCallback~ Exe;
				// unitstopped is sent when command exit is sent to unit and unit finishes its work
				(Handle unitstopped) ias PushOutUnit~ Exe;
				// unit is in action (battle for example)
				(Handle takeunit) ias MarkUnitAsIsInAction~ Exe;
				// unit is returned from action, if wasn't killed
				(Handle returnunit) ias MarkUnitAsFree~ Exe;
				// get list of hired units
				(Handle getunits) ias (
					Report ias (
#if (verbose)
						((Player Id~ has unit (unit $~) and its kind is (Characters)->(Unit $~)->Kind~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager getunits done) (player Id~) (unit $~) (Characters)->(Unit $~)->Kind~) Ew.OutChannel~) Do
#endif
					);
					(Resources.Units.Hired~ Report~) ForEach
				);
				// stop all hired units
				(Handle exit) ias (
					(StopRM true)^
					StopAllUnits~ Exe
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}
