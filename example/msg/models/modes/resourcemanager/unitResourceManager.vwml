module PlayerResourceManager {
	MagicWorld ias (
		Player ias (
			ResourceManager ias (
				CommandId ias nil;
				CommandParams ias nil;
				HiredUnitId ias nil;
				UnitsInAction ias 0;
				StopRM ias false;
				Init ias (
					(StopRM false)^
				);
				// notifies battlefield about returning all remained units to base
				NotifyAboutFBComplete ias (
					(StopRM false) ias doNothing;
					(StopRM true) ias (
						(UnitsInAction 0 NotifyAboutFBComplete~) FinishInterception
						((Player Id~) Tx (ModeInfo.ModeMain~ partclosed 0 (battlefield))) Gate
					);
					(StopRM StopRM~)~ Exe
#if (verbose)
					((All remained units of player Id~ have been returned) Ew.Output~) Do
#endif
				);
				// stops all hired units. 
				// The unit sends 'unitstopped' command to resource manager in order to notify about stopping activity
				StopAllUnits ias (
					NotifyAboutExiting ias (
						(Resources.Units.Hired () NotifyAboutExiting~) FinishInterception
						((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (resourcemanager))) Gate
					);
					(NoHired true) ias ((Player Id~) Tx (ModeInfo.ModeMain~ partclosed Id~ (resourcemanager))) Gate;
					(NoHired false) ias (
						StopUnit ias (
							(DismissUnit.U $~)^
							DismissUnit~ Exe
						);
						(Resources.Units.Hired () NotifyAboutExiting~) StartInterception
						(Resources.Units.Hired~ StopUnit~) ForEach
					);
					(NoHired (Resources.Units.Hired~ ()) Ident)~ Exe
				);

				DismissUnit ias (
					U ias nil;
					(CorrectUnit false) ias (
#if (verbose)
						((Unit U~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						(Resources.Units.Hired (Resources.Units.Hired~ (U~)) Substruct)^
#if (business)
						(Kind (Characters)->(Unit U~)->Kind~)^
						(Class (Characters)->(Unit U~)->Class~)^
						(Cost (Characters)->(Unit U~)->Cost~)^
						(Contain (Characters)->(Unit U~)->Contain~)^

						(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.DecValue~) Do)^
						(TH ((Resources.Business.(Q Kind~ Class~)~ (Cost~ 2) Get) Ew.Mul~) Do)^
						(TC ((Resources.Business.(Q Kind~ Class~)~ (Contain~ 2) Get) Ew.Mul~) Do)^
						// calculating partial GDevelop factor for specific unit's kind and class
						(Resources.Business.GDevelop ((Resources.Business.GDevelop~ TH~) Ew.Dec~) Do)^
						(Resources.Business.GContain ((Resources.Business.GContain~ TC~) Ew.Dec~) Do)^
#if (verbose)
						((Business factors (qclazz gdevelop gcontain) changed (Resources.Business.(Q Kind~ Class~)~ Resources.Business.GDevelop~ Resources.Business.GContain~) for player Id~) Ew.Output~) Do
#endif
#endif // business

#if (release)
						(((resourcemanager releaseunit done) (player Id~) (unit U~) (Characters)->(Unit U~)->Kind~) Ew.OutChannel~) Do
#endif

						((Characters)->(Unit U~) Tx (nil exit $~ ())) Gate
#if (verbose)
						((Player Id~ dismissed unit U~) Ew.Output~) Do
#endif
					);
					(CorrectUnit (Resources.Units.Hired~ U~) In)~ Exe
				);

				TakeOnBoardUnit ias (
					(HiredUnitId (CommandParams~ 0) Get)^
#if (business)
					(Kind (CommandParams~ 1) Get)^
					(Class (CommandParams~ 2) Get)^
					(Cost (CommandParams~ 3) Get)^
					(Contain (CommandParams~ 4) Get)^
					// increments number of units of specific kind
					(Resources.Business.(Q Kind~ Class~) ((Resources.Business.(Q Kind~ Class~)~) Ew.IncValue~) Do)^
					(TH ((Resources.Business.(Q Kind~ Class~)~ (Cost~ 2) Get) Ew.Mul~) Do)^
					(TC ((Resources.Business.(Q Kind~ Class~)~ (Contain~ 2) Get) Ew.Mul~) Do)^
					// calculating partial GDevelop factor for specific unit's kind and class
					(Resources.Business.GDevelop ((Resources.Business.GDevelop~ TH~) Ew.Sum~) Do)^
					(Resources.Business.GContain ((Resources.Business.GContain~ TC~) Ew.Sum~) Do)^
#if (verbose)
					((Business factors (qclazz gdevelop gcontain) changed (Resources.Business.(Q Kind~ Class~)~ Resources.Business.GDevelop~ Resources.Business.GContain~) for player Id~) Ew.Output~) Do
#endif
#endif /* business */
					(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Join)^
#if (verbose)
					((Player Id~ added unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
#if (release)
					(((resourcemanager hireunit done) (player Id~) (unit HiredUnitId~) (Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
				);
				
				PushOutUnit ias (
					(CorrectUnit false) ias doNothing;
					(CorrectUnit true) ias (
						(Resources.Units.Hired (Resources.Units.Hired~ (HiredUnitId~)) Substruct)^
#if (verbose)
						((Player Id~ removed unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				MarkUnitAsIsInAction ias (
					(CorrectUnit false) ias (
#if (verbose)
						((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						(UnitInAction true) ias ((Player Id~) Tx ((CommandParams~ 2) Get rejectedunit HiredUnitId~ ())) Gate;
						(UnitInAction false) ias (
							(FirstUnit true) ias (UnitsInAction 0 NotifyAboutFBComplete~) StartInterception;
							(FirstUnit false) ias doNothing;
							((Characters)->(Unit HiredUnitId~)->Type (CommandParams~ 1) Get)^
							(Characters)->(Unit HiredUnitId~)->CreateConcreteUnitByType~ Exe
							((Characters)->(Unit HiredUnitId~)->InAction true)^
							(UnitsInAction ((UnitsInAction~) Ew.IncValue~) Do)^
							((Player Id~) Tx ((CommandParams~ 2) Get recruitedunit HiredUnitId~ ())) Gate
#if (release)
							(((resourcemanager recruitunit done inAction) (player Id~) (unit HiredUnitId~) (Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
							(FirstUnit (UnitsInAction~ 1) Ident)~ Exe
						);
						(UnitInAction (Characters)->(Unit HiredUnitId~)->InAction~)~ Exe
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				MarkUnitAsFree ias (
					(CorrectUnit false) ias (
#if (verbose)
						((Unit HiredUnitId~ is unavailable hired units Resources.Units.Hired~) Ew.Output~) Do
#endif
					);
					(CorrectUnit true) ias (
						((Characters)->(Unit HiredUnitId~)->InAction false)^
						(Characters)->(Unit HiredUnitId~)->ReleaseConcreteUnit~ Exe
						(UnitsInAction ((UnitsInAction~) Ew.DecValue~) Do)^
#if (verbose)
						((Player Id~ returned unit HiredUnitId~ available units Resources.Units.Hired~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager returnunit done free) (player Id~) (unit HiredUnitId~) (Characters)->(Unit HiredUnitId~)->Kind~) Ew.OutChannel~) Do
#endif
					);
					(HiredUnitId (CommandParams~ 0) Get)^
					(CorrectUnit (Resources.Units.Hired~ HiredUnitId~) In)~ Exe
				);

				// unit has been hired and must be associated with player
				(Handle hireunit) ias (
					TakeOnBoardUnit~ Exe
#if (verbose)
					((Player Id~ hired unit HiredUnitId~) Ew.Output~) Do
#endif
				);
				// unit's functionality doesn't need to player
				(Handle dismissunit),(Handle releaseunit) ias (
					MarkUnitAsFree~ Exe
					(DismissUnit.U (CommandParams~ 0) Get)^
					DismissUnit~ Exe
				);
				// unitstopped is sent when command exit is sent to unit and unit finishes its work
				(Handle unitstopped) ias PushOutUnit~ Exe;
				// unit is in action (battle for example)
				(Handle takeunit) ias MarkUnitAsIsInAction~ Exe;
				// unit is returned from action, if wasn't killed
				(Handle returnunit) ias MarkUnitAsFree~ Exe;
				// get list of hired units
				(Handle getunits) ias (
					Report ias (
#if (verbose)
						((Player Id~ has unit (unit $~) and its kind is (Characters)->(Unit $~)->Kind~) Ew.Output~) Do
#endif
#if (release)
						(((resourcemanager getunits done) (player Id~) (unit $~) (Characters)->(Unit $~)->Kind~) Ew.OutChannel~) Do
#endif
					);
					(Resources.Units.Hired~ Report~) ForEach
				);
				// stop all hired units
				(Handle exit) ias (
					(StopRM true)^
					StopAllUnits~ Exe
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}
