module PlayerDeal {
	MagicWorld ias (
		Player ias (
			Deal ias (
				CommandId ias nil;
				CommandParams ias nil;
				QuartalId ias nil;
				UnlinkQ ias (
					(MyEconomicQ true) ias (Resources.Quartals.Own (Resources.Quartals.Own~ (QuartalId~)) Substruct)^;
					(MyEconomicQ false) ias (Resources.Quartals.Visible (Resources.Quartals.Visible~ (QuartalId~)) Substruct)^;
					((Quartal QuartalId~)->Linked false)^
					((Quartal QuartalId~)->Owner nil)^
					// if quartal belongs to the player then quartal is considered as player's economic and should be considered separately
					(MyEconomicQ (Id~ (QuartalId~ 0) Get) Ident)~ Exe
					((The player Id~ in mode deal and linked quartals are Resources.Quartals.Visible~ and Resources.Quartals.Own~) Ew.Output~) Do
				);
				// (player 0 setintention (quartalId intention (...)))
 				(Handle setintention) ias (
					(QuartalId (CommandParams~ 0) Get)^
					(Intention (CommandParams~ 1) Get)^
					(IntentionParams (CommandParams~ 2) Get)^
					((The player Id~ in mode deal processes CommandId~ for quartal QuartalId~ intention Intention~ and params IntentionParams~) Ew.Output~) Do
					// propagate to quartal
					((Quartal QuartalId~) Tx (Id~ Intention~ IntentionParams~)) Gate
				);
				(Handle linkquartal) ias (
					(MyEconomicQ true) ias (Resources.Quartals.Own (Resources.Quartals.Own~ (QuartalId~)) Join)^;
					(MyEconomicQ false) ias (Resources.Quartals.Visible (Resources.Quartals.Visible~ (QuartalId~)) Join)^;
					(QuartalId (CommandParams~ 0) Get)^
					((Quartal QuartalId~)->Linked true)^
					((Quartal QuartalId~)->Owner Id~)^
					// if quartal belongs to the player then quartal is considered as player's economic and should be considered separately
					(MyEconomicQ (Id~ (QuartalId~ 0) Get) Ident)~ Exe
					((The player Id~ in mode deal and linked quartals are Resources.Quartals.Visible~ and Resources.Quartals.Own~) Ew.Output~) Do
				);
				(Handle unlinkquartal) ias (
					(QuartalId (CommandParams~ 0) Get)^
					UnlinkQ~ Exe
				);
				(Handle releasequartal) ias (
					(QuartalId (CommandParams~ 0) Get)^
					UnlinkQ~ Exe
					((Quartal QuartalId~) Tx (Id~ exit ())) Gate
				);
				(Handle paybribe),(Handle payquartalinfo) ias (
					(Result true) ias ((Quartal QuartalId~) Tx (Id~ paymentresult (confirmed))) Gate;
					(Result false) ias ((Quartal QuartalId~) Tx (Id~ paymentresult (declined))) Gate;
					(QuartalId (CommandParams~ 0) Get)^
					(Resources.Account.Value CommandParams~)^
					Resources.Account.Withdraw~ Exe
					(Result Resources.Account.Result~)~ Exe
				);
				(Handle payforunit) ias (
					OrigRequest ias nil;
					(Result true) ias ((Player Id~) Tx (ModeInfo.ModeHiring~ paymentresult Id~ (confirmed OrigRequest~))) Gate;
					(Result false) ias ((Player Id~) Tx (ModeInfo.ModeHiring~ paymentresult Id~ (declined OrigRequest~))) Gate;
					(OrigRequest (CommandParams~ 0) Get)^
					(Resources.Account.Value CommandParams~)^
					Resources.Account.Withdraw~ Exe
					(Result Resources.Account.Result~)~ Exe
				);
				(Handle contribution),(Handle returnpayment) ias (
					(Resources.Account.Value CommandParams~)^
					Resources.Account.Recharge~ Exe
				);
				(Handle back) ias (
					(Player.Mode main)^
					((The player Id~ returned to main mode) Ew.Output~) Do
				);
				(Handle CommandId~)~ Exe
			);
		);
	);
}