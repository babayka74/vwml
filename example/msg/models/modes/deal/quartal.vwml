module Quartal {
	MagicWorld ias (
		Quartal ias (
			/* each quartal has own uniq id */
			Id ias nil;
			/* player who owns quartal */
			Owner ias nil;
			/* false means that quartal owned but not linked to specific player */
			Linked ias false;
			/* 'true' in case if quartal is not active */
			StopQuartal ias false;
			/* last sender */
			Source ias nil;
			/* last opened quartal info */
			QInfo ias nil;
			/* last invested resource quantum */
			LInvestQuantum ias nil;
			/* last stored quartal state (not stored) */
			LSQState ias nil;
			/* last restored state (not stored) */
			RSState ias nil;
			/* quartal's resource type (configured) */
			Resource ias (
				Type ias nil;
				/* contribution to player's account */
				Quantum ias 0;
				/* period  */
				Period ias 100; // ms
				/* number */
				Quantums ias 0;
				/* transition cnp -> op; permitted time */
				OpenTime ias 1000; // ms
				/* requester - who initiated creation of quartal */
				Requester ias nil;
				/* desired price set by sherif to open information about quartal */
				DesiredOpenInfoPrice ias 100;
				/* number of zones (see MatchMaking documents) */
				Znumber ias 0;
				/* initial value of quantums */
				IQuantums ias 0;
				/* quantum received upon rspcalc... response  */
				PostponedQuantum ias 0;

				CreateQInfo ias (QInfo (Type~ Quantum~ Period~ Quantums~ OpenTime~ DesiredOpenInfoPrice~ Sherif.DesiredBribe~ Sherif.BattleZones~))^;
				Update ias (
					QConf ias nil;
					BribeR ias nil;
					(NZnumber false) ias Sherif.SetupBattleZones~ Exe;
					(NZnumber true) ias (Znumber 0)^;

					(Type (QConf~ 0) Get)^
					(Quantum (QConf~ 1) Get)^
                                        (Period (QConf~ 2) Get)^
					(Quantums (QConf~ 3) Get)^
					(OpenTime (QConf~ 4) Get)^
					(DesiredOpenInfoPrice (QConf~ 5) Get)^
					(Znumber (QConf~ 6) Get)^
					(Sherif.DesiredBribe BribeR~)^
					(NZnumber (Znumber~ nil) Ident)~ Exe
					(IQuantums Quantums~)^
					(PostponedQuantum Quantum~)^
				);
				/* resource initialization point */
				Init ias (
					(Update.QConf Ew.QuartalsConf.Resources~ Random)^
					(Update.BribeR Ew.QuartalsConf.SherifBribeRanges~ Random)^
					Update~ Exe
					CreateQInfo~ Exe
#if (verbose)
					((The quartal Id~ initialized with configuration (Type~ Quantum~ Period~ Quantums~ OpenTime~ DesiredOpenInfoPrice~ Sherif.DesiredBribe~)) Ew.Output~) Do					
#endif
				);
				/* sets quartal's resources by initial data */
				Setup ias (
					(NU true) ias Init~ Exe;
					(NU false) ias (
						Update~ Exe
						CreateQInfo~ Exe
#if (verbose)
						((The quartal Id~ initialized with configuration (Type~ Quantum~ Period~ Quantums~ OpenTime~ DesiredOpenInfoPrice~ Sherif.DesiredBribe~)) Ew.Output~) Do					
#endif
					);
					(NU (Update.QConf~ nil) Ident)~ Exe
					((Quartal Id~) Tx (Id~ check ())) Gate
				);
				Link ias (
					(R Player),(R nil) ias (
						((Player Owner~) Tx (ModeInfo.ModeDeal~ linkquartal Id~ (Id~))) Gate
						((Player Owner~) Tx (ModeInfo.ModeMain~ qinitialized Id~ (Id~))) Gate
					);
					(R Boss) ias (
						((Player Owner~) Tx (ModeInfo.ModeBossOfDistrict~ linkquartal (Requester~ 1) Get (Id~))) Gate
						((Player Owner~) Tx (ModeInfo.ModeBossOfDistrict~ qinitialized (Requester~ 1) Get (Id~))) Gate
					);
					(R (Requester~ 0) Get)~ Exe
				);
				Unlink ias (
					(R Player),(R nil) ias ((Player Owner~) Tx (Player Owner~)->(Resources)->(Quartals)->(OnExitC)->(ReleaseRQ Id~)~) Gate;
					(R Boss) ias ((Player Owner~) Tx (Player Owner~)->(Resources)->(Quartals)->(OnExitC)->(ReleaseBQ Id~)~) Gate;
					(R (Requester~ 0) Get)~ Exe
				);
				Reset ias (
					(R Player),(R nil) ias ((Player Owner~) Tx (ModeInfo.ModeDeal~ resettedquartal Id~ (Id~))) Gate;
					(R Boss) ias ((Player Owner~) Tx (ModeInfo.ModeBossOfDistrict~ resettedquartal (Requester~ 1) Get (Id~))) Gate;
					(State onp)^
					Sherif.Banker.CancelContribution~ Exe
					(R (Requester~ 0) Get)~ Exe
				);
			);
			/* one sherif is associated with one quartal; the banker is aux. entity */
			Sherif ias (
				FormerIntention ias nil;
				Intention ias nil;
				IntentionParams ias nil;
				DesiredBribe ias nil;
				ProposedBribe ias nil;
				PostpondBribe ias 0;
				PayInvestValue ias nil;
				PostpondInvest ias 0;
				BattleZones ias ();
				SetupBattleZones ias (
					S ias (
						((BZ Id~ $~) nil)^
						((BZ Id~ $~) Sherif true) Context
						(BattleZones (BattleZones~ ((BZ Id~ $~))) Join)^
#if (verbose)
						((The sherif of quartal Id~ of player Owner~ generated battle zone (BZ Id~ $~) to (BZ Id~ $~)~ BattleZones~) Ew.Output~) Do
#endif
					);
					(BattleZones ())^
					(Resource.Znumber~ S~) Repeat
				);
				Banker ias (
					OnSuccessPayment ias nil;
					OnFailedPayment ias nil;
					Value ias 0;
					Account ias 0;
					ApplyPayment ias (
						(Account ((Account~ Value~) Ew.Sum~) Do)^
#if (verbose)
						((The sherif of quartal Id~ has following sum Banker.Account~ on account) Ew.Output~) Do
#endif
					);
					AskPayment ias (
						((Player Owner~) Tx (ModeInfo.ModeDeal~ dealpayment Owner~ (Id~ (Value~ 1) Get (Value~ 2) Get))) Gate
					);
					Pay ias (
						(NoQuantums true) ias (
							((Quartal Id~) Tx (Owner~ requestdone ())) Gate
#if (verbose)
							((The banker of sherif of quartal Id~ payed to player Owner~ all requested resources) Ew.Output~) Do
#endif
#if (release)
							(((deal setintention done) (player Owner~) (quartal Id~) Behavior.State~ (pay finished)) Ew.OutChannel~) Do
#endif
						);
						(NoQuantums false) ias (
							(Resource.Quantums ((Resource.Quantums~) Ew.DecValue~) Do)^
#if (verbose)
							((The banker of sherif of quartal Id~ pays to player Owner~ resource (Id~ Resource.Type~ Resource.Quantum~) and left Resource.Quantums~ payments) Ew.Output~) Do
#endif
							/* sending contribution message to player */
							((Player Owner~) Tx (ModeInfo.ModeDeal~ contribution Owner~ (Id~ Resource.Type~ Resource.Quantum~))) Gate
							/* re-activates contribution */
							(Resource.Period~ (Pay Id~) Pay~) Recall
						);
						(NoQuantums (Resource.Quantums~ 0) Ident)~ Exe
					);
					CancelContribution ias (
						(-1 (Pay Id~) Pay~) Recall
#if (verbose)
						((The banker of sherif of quartal Id~ cancels contibution procedure) Ew.Output~) Do
#endif
					);
				);
				OpenInfo ias (
					Resource.CreateQInfo~ Exe
#if (verbose)
					((The sherif of quartal Id~ opens information about quartal QInfo~) Ew.Output~) Do
#endif
#if (release)                                   
					(((deal setintention done) (player Owner~) (quartal Id~) Behavior.State~ (open QInfo~)) Ew.OutChannel~) Do
#endif
				);
				UpdateBDevelopFactor ias (
					Op ias plus; // plus or minus
					/* sending business development factor message to player */
					((Player Owner~) Tx (ModeInfo.ModeDeal~ bdfchange Owner~ (Id~ Resource.Type~ Resource.Quantum~ Op~))) Gate
				);
				Behavior ias (
					// initial state
					State ias onp;
					// template of sherif's and quartal's states
					(TQRState (Resource.Type Resource.Requester Resource.Quantum Resource.Period Resource.Quantums Resource.OpenTime Resource.DesiredOpenInfoPrice))^
					// conditional request for bribe
					PayBribeRequest ias (
						(Banker.Value ProposedBribe~)^
						(Banker.OnSuccessPayment SuccessPaymentForBribeRequest~)^
						(Banker.OnFailedPayment FailedPaymentForBribeRequest~)^
						Banker.AskPayment~ Exe
						(State wtp)^
					);
					// cancells bribe request timer
					CancelPayBribeRequest ias (-1 (PPB Id~) PayBribeRequest~) Recall;
					// conditional request for investment
					PayInvestRequest ias (
#if (verbose)
						((The quartal Id~ belongs to Owner~ is in state State~ and investment allowed) Ew.Output~) Do					
#endif
						(LInvestQuantum PayInvestValue~)^
						(Banker.Value LInvestQuantum~)^
						(Banker.OnSuccessPayment SuccessPaymentForInvestment~)^
						(Banker.OnFailedPayment FailedPaymentForInvestment~)^
						Banker.AskPayment~ Exe
						(State wtp)^
					);
					// cancells bribe request timer
					CancelPayInvestRequest ias (-1 (PPI Id~) StartContribution~) Recall;
					// instantiates invest request
					InstantPayInvestRequest ias (
						(T true) ias (
#if (release)
							(((deal setintention failed) (player Owner~) (quartal Id~) State~ (ipi)) Ew.OutChannel~) Do
#endif
						);
						(T false) ias (
							(-2 (PPI Id~) StartContribution~) Recall
#if (verbose)
							((The sherif of quartal Id~ which belongs to player Owner~ instants investment request) Ew.Output~) Do
#endif
#if (release)
							(((deal setintention done) (player Owner~) (quartal Id~) State~ (ipi)) Ew.OutChannel~) Do
#endif
						);
						(T (((PPI Id~)) TState nil) Ident)~ Exe
					);
					// build and restore state
					BuildQRState ias (
						S ias ();
						B ias (S (S~ ($~~)) Join)^;
						(S ())^
						(TQRState~ B~) ForEach
					);
					RestoreQRState ias (
						I ias 0;
						S ias nil;
						R ias (
							(V (TQRState~ I~) Get)^
							(V~ $~)^
							(V~ Resource true) Context
							(I ((I~) Ew.IncValue~) Do)^
						);
						(I 0)^
						(S~ K~) ForEach
					);
					// activate contribution timer
					ACTimer ias (
						// timer state
						S ias nil;
						(A true) ias doNothing;
						(A false) ias ((S~ 0) Get (Pay Id~) Banker.Pay~) Recall;
						(A (S~ nil) Ident)~ Exe
					);
					// activates open info timer
					OITimer ias (
						// timer state
						S ias nil;
						(A true) ias doNothing;
						(A false) ias ((S~ 0) Get (Cnp Id~) OnCnpTimer~) Recall;
						(A (S~ nil) Ident)~ Exe
					);
					// called when (Cnp Id~) timer expired
					OnCnpTimer ias ((Quartal Id~) Tx (Owner~ close ())) Gate;
					// restores state after investment's payment
					RStateAfterInvest ias (
						(WState true) ias (State op)^;
						(WState false) ias doNothing;
						// restore state if needed
						(WState (State~ wtp) Ident)~ Exe
					);

					SuccessPaymentForInvestment ias (
						RStateAfterInvest~ Exe
#if (verbose)
						((The investment for quartal Id~ succeeded for player Owner~) Ew.Output~) Do
#endif
						/* sending business development factor message to player */
						(UpdateBDevelopFactor.Op minus)^
						UpdateBDevelopFactor~ Exe
						// stop contribution timer and reset contribution counter
						Banker.CancelContribution~ Exe
						// calculates new Quantum based on last investment
						((Player Owner~) Tx (ModeInfo.ModeDeal~ rqcalcquantum Owner~ (Id~ (LInvestQuantum~ 1) Get Resource.Quantum~ (LInvestQuantum~ 2) Get))) Gate
					);

					FailedPaymentForInvestment ias (
						T ias nil;
						RStateAfterInvest~ Exe
						(LInvestQuantum nil)^
#if (verbose)
						((The investment for quartal Id~ failed for player Owner~ with result not enough resources) Ew.Output~) Do
#endif
#if (release)
						(T (Sherif.IntentionParams~ 1) Get)^
						(((deal setintention failed) (player Owner~) (quartal Id~) State~ (invest notEnoughResources) (prc T~)) Ew.OutChannel~) Do
#endif
					);

					SuccessPaymentForOpenInfo ias (
						(State onp)^
						Banker.ApplyPayment~ Exe
						OpenInfo~ Exe
						// starts timer; when timer is finished quartal is moved to state cnp
						(Resource.OpenTime~ (Cnp Id~) OnCnpTimer~) Recall
#if (verbose)
						((The sherif of quartal Id~ provided information to player Owner~ and cnp timer activated for Resource.OpenTime~ ms) Ew.Output~) Do
#endif
					);
					FailedPaymentForOpenInfo ias (
						T ias nil;
						(State cnp)^
#if (verbose)
						((The sherif of quartal Id~ did not provide information to player Owner~ since payment was failed) Ew.Output~) Do
#endif
#if (release)
						(T (Sherif.IntentionParams~ 1) Get)^
						(((deal setintention failed) (player Owner~) (quartal Id~) State~ (open notEnoughResources) (prc T~)) Ew.OutChannel~) Do
#endif

					);
					StartContribution ias (
						(Resource.Quantums Resource.IQuantums~)^
						(Resource.Quantum Resource.PostponedQuantum~)^
						Resource.CreateQInfo~ Exe
						(State op)^
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (pay QInfo~)) Ew.OutChannel~) Do
#endif
						// starts timer of contribution period (player's bank account will being updated during this period)
						(Resource.Period~ (Pay Id~) Banker.Pay~) Recall
						/* sending business development factor message to player */
						(UpdateBDevelopFactor.Op plus)^
						UpdateBDevelopFactor~ Exe
					);
					SuccessPaymentForBribeRequest ias (
						(P true) ias StartContribution~ Exe;
						(P false) ias (
#if (verbose)
							((The quartal Id~ belongs to Owner~ postponds payment of bribe for PostpondBribe~ ms) Ew.Output~) Do					
#endif
							(PostpondBribe~ (PPB Id~) StartContribution~) Recall
							(PostpondBribe 0)^
						);
#if (verbose)
						((The sherif of quartal Id~ took bribe ProposedBribe~) Ew.Output~) Do
#endif
						Banker.ApplyPayment~ Exe
						(P (PostpondBribe~ 0) Ident)~ Exe
						(State op)^
					);
					FailedPaymentForBribeRequest ias (
						T ias nil;
						(State onp)^
#if (verbose)
						((The sherif of quartal Id~ did not get bribe payment from player Owner~ since payment was failed) Ew.Output~) Do
#endif
#if (release)
						(T (Sherif.IntentionParams~ 1) Get)^
						(((deal setintention failed) (player Owner~) (quartal Id~) State~ (pay notEnoughResources) (prc T~)) Ew.OutChannel~) Do
#endif
					);
					/* payment */
					(paymentresult wtp) ias (
						(paymentresult confirmed) ias Banker.OnSuccessPayment~ Exe;
						(paymentresult declined) ias Banker.OnFailedPayment~ Exe;
						(paymentresult (Sherif.IntentionParams~ 0) Get)~ Exe
					);
					(open wtp),(close wtp),(pay wtp),(requestdone wtp),(notrequestdone wtp),(invest wtp) ias (
						// remember messages which were received during payment operation
				        	((Quartal Id~) Tx (Source~ Sherif.Intention~ Sherif.IntentionParams~)) Gate
					);
					// provides information about how much should be payed in order to get information about quartal
					(open cnp) ias (
						(OpenQInfo 0),(OpenQInfo 1) ias (
							(Banker.Value ProposedPrice~)^
							(Banker.OnSuccessPayment SuccessPaymentForOpenInfo~)^
							(Banker.OnFailedPayment FailedPaymentForOpenInfo~)^
							Banker.AskPayment~ Exe
							(State wtp)^
						);
						(OpenQInfo -1) ias (
#if (verbose)
							((The sherif of quartal Id~ did not allow to open info ProposedPrice~ desired price is Resource.DesiredOpenInfoPrice~) Ew.Output~) Do
#endif
#if (release)
							(((deal setintention failed) (player Owner~) (quartal Id~) State~ (open toSmall ProposedPrice~ Resource.DesiredOpenInfoPrice~)) Ew.OutChannel~) Do
#endif
						);
						(ProposedPrice ((Sherif.IntentionParams~ 0) Get 2) Get)^
						// sherif's bribe
						(OpenQInfo ((ProposedPrice~ Resource.DesiredOpenInfoPrice~) Ew.Compare~) Do)~ Exe
					);
					(open onp),(open op),(open cp) ias (
#if (verbose)
						((The sherif of quartal Id~ has already opened information about quartal) Ew.Output~) Do
#endif
						OpenInfo~ Exe
					);
					(close onp) ias (
						(State onp)^
#if (verbose)
						((The sherif of quartal Id~ closed information no bribe got) Ew.Output~) Do
#endif
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (open closed)) Ew.OutChannel~) Do
#endif
					);
					// 
					(close op) ias (
						(State cp)^
#if (verbose)
						((The sherif of quartal Id~ closed information bribe was got) Ew.Output~) Do
#endif
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (open closed)) Ew.OutChannel~) Do
#endif
					);
					(close cnp),(close cp) ias (
#if (verbose)
						((The sherif of quartal Id~ has already closed information about quartal) Ew.Output~) Do
#endif
					);
					// player payes bribe and started getting resources and back payements from quartal
					(pay onp) ias (
						(TakeBribe 0),(TakeBribe 1) ias PayBribeRequest~ Exe;
						(TakeBribe -1) ias (
#if (verbose)
							((The sherif of quartal Id~ did not take bribe ProposedBribe~ desired bribe is DesiredBribe~) Ew.Output~) Do
#endif
#if (release)
							(((deal setintention failed) (player Owner~) (quartal Id~) State~ (pay toSmall ProposedBribe~ DesiredBribe~)) Ew.OutChannel~) Do
#endif
						);
						(CPB false) ias doNothing;
						(CPB true) ias (PostpondBribe 0)^;
						(ProposedBribe (Sherif.IntentionParams~ 0) Get)^
						(PostpondBribe (Sherif.IntentionParams~ 1) Get)^
						// correct postpond bribe value
						(CPB (PostpondBribe~ nil) Ident)~ Exe
						// sherif's bribe
						(TakeBribe ((((Sherif.IntentionParams~ 0) Get 2) Get DesiredBribe~) Ew.Compare~) Do)~ Exe
					);
					(pay cnp),(pay op),(pay cp) ias (
#if (verbose)
						((The sherif of quartal Id~ has already got bribe or qaurtal is closed and payment is impossible) Ew.Output~) Do
#endif
					);
					(requestdone cp),(requestdone op) ias (
						(State onp)^
					);
					(requestdone cnp),(requestdone onp) ias (
#if (verbose)
						((The sherif of quartal Id~ got invalid message from banker) Ew.Output~) Do
#endif
					);
					(notrequestdone op) ias (
						(State op)^
					);
					(notrequestdone cp) ias (
						(State cp)^
					);
					(notrequestdone cnp),(notrequestdone onp) ias (
#if (verbose)
						((The sherif of quartal Id~ got invalid message from banker) Ew.Output~) Do
#endif
					);
					(exit op),(exit cnp),(exit onp),(exit wtp) ias (
						(StopQuartal true)^
						(-1 (Pay Id~) Banker.Pay~) Recall
						// unblocks quartal's gate
						((Quartal Id~) Tx nil) Gate
#if (verbose)
						((The sherif of quartal Id~ got message to exit) Ew.Output~) Do
#endif
					);
					(check op),(check cnp),(check onp),(check wtp) ias (
#if (verbose)
						((The sherif of quartal Id~ which belongs to player Owner~ got self test message) Ew.Output~) Do
#endif
					);
					(cppb op),(cppb cnp),(cppb onp),(cppb wtp),(cppb cp) ias (
						CancelPayBribeRequest~ Exe
#if (verbose)
						((The sherif of quartal Id~ which belongs to player Owner~ cancelled paybribe request) Ew.Output~) Do
#endif
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (cppb)) Ew.OutChannel~) Do
#endif
					);
					(collectstate op),(collectstate cnp),(collectstate onp),(collectstate wtp),(collectstate cp) ias (
						// quartal resource info
						BuildQRState~ Exe
						// sherif's state
						(QSherifState (FormerIntention~ State~ IntentionParams~ DesiredBribe~))^
						// state of contribution timer
						(CTimerState ((Pay Id~)) TState)^
						// open info timer state
						(OITimerState ((Cnp Id~)) TState)^
						// last stored quartal state
						(LSQState (Id~ CTimerState~ OITimerState~ BuildQRState.S~ QSherifState~))^
						// delegate to player
						((Player Owner~) Tx (ModeInfo.ModeStateManagerBroker~ rspquartalstate Id~ LSQState~)) Gate
					);
					(restorestate op),(restorestate cnp),(restorestate onp),(restorestate wtp),(restorestate cp) ias (
						(RSState IntentionParams~)^
						// restore quartal's state
						(RestoreQRState.S (RSState~ 3) Get)^
						RestoreQRState~ Exe
						// restore sherif's state
						(QSherifState (RSState~ 4) Get)^
						(FormerIntention (QSherifState~ 0) Get)^
						(Intention FormerIntention~)^
						(State (QSherifState~ 1) Get)^
						(IntentionParams (QSherifState~ 2) Get)^
						(DesiredBribe (QSherifState~ 3) Get)^
						// re-activate contribution timer, if needed
						(ACTimer.S (RSState~ 1) Get)^
						ACTimer~ Exe
						// re-activates open info timer, if needed
						(OITimer.S (RSState~ 2) Get)^
						OITimer~ Exe
						// delegate to player
						((Player Owner~) Tx (ModeInfo.ModeStateManagerBroker~ rsprquartalstate Id~ ())) Gate
					);
					(updateconf op),(updateconf cnp),(updateconf onp),(updateconf wtp),(updateconf cp) ias (
						(OldBZones BattleZones~)^
						(Resource.Update.QConf (IntentionParams~ 0) Get)^
						(Resource.Update.BribeR (IntentionParams~ 1) Get)^
						Resource.Update~ Exe
						Resource.CreateQInfo~ Exe
						// delegate to player
						((Player Owner~) Tx (ModeInfo.ModeDeal~ updatebzones Owner~ (OldBZones~ BattleZones~))) Gate

#if (verbose)
						((The quartal Id~ updated with configuration QInfo~) Ew.Output~) Do					
#endif						
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (updateconf QInfo~)) Ew.OutChannel~) Do
#endif
					);
					(getstate op),(getstate cnp),(getstate onp),(getstate wtp),(getstate cp) ias (
#if (verbose)
						((The quartal Id~ is in state State~ and belongs to Owner~) Ew.Output~) Do					
#endif
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (getstate QInfo~)) Ew.OutChannel~) Do
#endif
					);
					// resource quantum has already been changed by last investment
					(rspcalcquantum op),(rspcalcquantum cnp),(rspcalcquantum onp),(rspcalcquantum wtp),(rspcalcquantum cp) ias (
						(P false) ias (
#if (verbose)
							((The quartal Id~ belongs to Owner~ postponds renewed quantum of contribution for PostpondInvest~ ms) Ew.Output~) Do					
#endif
							(PostpondInvest~ (PPI Id~) StartContribution~) Recall
							(PostpondInvest 0)^
						);
						(P true) ias StartContribution~ Exe;
						(Resource.PostponedQuantum (Sherif.IntentionParams~ 0) Get)^
#if (verbose)
						((The quartal Id~ updated with recalculated quantum QInfo~) Ew.Output~) Do					
#endif
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (invest QInfo~)) Ew.OutChannel~) Do
#endif
						(P (PostpondInvest~ 0) Ident)~ Exe
					);
					// investement allowed during contribution active phase only
					(invest op) ias (
						(CPI false) ias doNothing;
						(CPI true) ias (PostpondInvest 0)^;
						(PayInvestValue (Sherif.IntentionParams~ 0) Get)^
						(PostpondInvest (Sherif.IntentionParams~ 1) Get)^
						(CPI (PostpondInvest~ nil) Ident)~ Exe
						PayInvestRequest~ Exe
					);
					// cancels investement request
					(cpi op) ias (
						CancelPayInvestRequest~ Exe
#if (verbose)
						((The sherif of quartal Id~ which belongs to player Owner~ cancelled investment request) Ew.Output~) Do
#endif
#if (release)
						(((deal setintention done) (player Owner~) (quartal Id~) State~ (cpi QInfo~)) Ew.OutChannel~) Do
#endif
					);
					// ignore 'cpi' intention for other states
					(cpi cnp),(cpi onp),(cpi wtp),(cpi cp) ias doNothing;
					// instant investment request
					(ipi op) ias InstantPayInvestRequest~ Exe;
					// ignore 'ipi' intention for other states
					(ipi cnp),(ipi onp),(ipi wtp),(ipi cp) ias doNothing;
					// invest isn't allowed
				        (invest cnp),(invest onp),(invest wtp),(invest cp) ias (
#if (verbose)
						((The quartal Id~ belongs to Owner~ is in state State~ and investment not allowed) Ew.Output~) Do					
#endif
						(((deal setintention failed) (player Owner~) (quartal Id~) State~ (invest QInfo~)) Ew.OutChannel~) Do
					);
					// reset
					(reset op),(reset cnp),(reset onp),(reset cp) ias Resource.Reset~ Exe;
					(reset wtp) ias (
						// remember messages which were received during payment operation
				        	((Quartal Id~) Tx (Source~ Sherif.Intention~ Sherif.IntentionParams~)) Gate
					);
					(FakedI true) ias doNothing;
					(FakedI false) ias (Intention~ State~)~ Exe;
					(FakedI (Intention~ nil) Ident)~ Exe
				);
			);
			CommandDispatcher ias (
				Dispatch ias nil;
				// (Id~ Intention~ IntentionParams~)
				(Source (Dispatch~ 0) Get)^
				(FormerIntention Sherif.Intention~)^
				(Sherif.Intention (Dispatch~ 1) Get)^
				(Sherif.IntentionParams (Dispatch~ 2) Get)^
				Sherif.Behavior~ Exe
			);
			QuartalLifeStep ias (
				(ready false false) ias (
					(CommandDispatcher.Dispatch nil)^
					QuartalLifeStep~ Exe
				);
				(ready true false) ias (
					(CommandDispatcher.Dispatch ((Quartal Id~) Rx) Gate)^
#if (verbose)
					((The quartal Id~ received CommandDispatcher.Dispatch~) Ew.Output~) Do
#endif
					CommandDispatcher~ Exe
					QuartalLifeStep~ Exe
				);
				(ready false true),(ready true true) ias (
#if (verbose)
					((The sherif of quartal Id~ reports about exiting) Ew.Output~) Do
#endif
				);
				CommandDispatcher.Dispatch~ Recycle
				(ready (((Quartal Id~) Ready) Gate true) Ident StopQuartal~)~ Exe
			);
			lifeterm = (
#if (verbose)
				((The quartal Id~ added and active for owner Owner~) Ew.Output~) Do
#endif
				((Quartal Id~) Register blocked) Gate
				// initial resource setup
				Resource.Setup~ Exe
				// links quartal to given player
				Resource.Link~ Exe
				QuartalLifeStep~ Exe
				((Quartal Id~) Unregister) Gate
				// unlinks quartal from given player
				Resource.Unlink~ Exe
			) Exe
		);
	);
}


