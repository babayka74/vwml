module Characters {
	MagicWorld ias (
		Characters ias (
			/* general game unit */
			Unit ias (
				Properties ias (kind type attack defence contain clazz capacity);
				/* available unit's types  */
				Types ias (attacker defender);
				/* default type is attacker */
				Type ias attacker;
				/* kind of unit */
				Kind ias skeleton;
				/* some units may include other units */
				Capacity ias 0;
				/* container for joined units */
				Joined ias ();
				JoinedWith ias nil;
				
#if (business)
				/* unit's class (0, 1, 2 ... N) */
				Class ias 0;
				/* initial cost */
				Cost ias 0;
				/* contain (<resource> <quantum> <period>)  */
				Contain ias 0;
#endif
				/* unit's id */
				Id ias nil;
				/* creational id (set by unit's creator) */
				CId ias nil;
				/* associated with player */
				PlayerId ias nil;
				/* concrete unit (defines unit's specific logic => attacker or defender) */
				ConcreteUnit ias nil;
				/* switched unit's entity */
				SwitchedConcreteUnit ias nil;
				/* unit's current position */
				CurrentPosition ias nil;
				/* true in case if unit should be stopped */
				StopUnit ias false;
				/* true in case if marked as killed, but not destroyed yet */
				MarkedAsKilled ias false;
				/* units participates in battle on given battlefield */
				BattleFieldId ias nil;
				/* true in case if unit is involved to some action */
				InAction ias false;
				/* container's (to which container unit belongs) id */
				Container ias nil;
				/* configuted ids for some purpouses */
				UnitReadyNotify ias nil;
				/* template */
				TUCState ias (Id Type Kind Capacity Joined JoinedWith Class Cost Contain CId PlayerId MarkedAsKilled InAction Container UnitReadyNotify);
				/* Performs initialization steps */
				Init ias (
					(CurrentPosition nil)^
					(StopUnit false)^
					(MarkedAsKilled false)^
					(BattleFieldId nil)^
					(InAction false)^
					(Joined ())^
					(JoinedWith nil)^
					(Container nil)^
					((Unit Id~) Tx (PlayerId~ check Id~ ())) Gate
				);
				BuildUCState ias (
					S ias ();
					B ias (S (S~ ($~~)) Join)^;
					(S ())^
					(TUCState~ B~) ForEach
				);
				RestoreUCState ias (
					S ias nil;
					I ias 0;
					R ias (
						((TUCState~ I~) Get $~)^
						(I ((I~) Ew.IncValue~) Do)^
					);
					(I 0)^
					(S~ R~) ForEach
				);
				RestoreState ias (
					(RestoreUCState.S UnitCommandParams~)^
					RestoreUCState~ Exe
#if (verbose)
					((The unit Id~ restored state) Ew.Output~) Do
#endif
					((Player PlayerId~) Tx (ModeInfo.ModeStateManagerBroker~ rsprunitstate Id~ ())) Gate
				);
				CollectState ias (
					BuildUCState~ Exe
					((Player PlayerId~) Tx (ModeInfo.ModeStateManagerBroker~ rspunitstate Id~ BuildUCState.S~)) Gate
				);
				StopActivity ias (
					(StopUnit true)^
					((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ unitstopped Id~ (Id~))) Gate
#if (verbose)
					((The unit Id~ is going to be stopped StopUnit~) Ew.Output~) Do
#endif
				);
				/* each unit has following properties: power of attack and defence */
				Power ias (
					Attack ias ();
					Defence ias ();
				);
				/* activates 'stay' command */
				Stay ias (CommandDispatcher.UnitCommandId stay)^;
				/* to be attacker */
				UnitAsAttacker ias (
					Create ias (
						(Attacker (Attacker Id~)) Born
						((Attacker Id~)->Id Id~)^
						((Attacker Id~)->PlayerId PlayerId~)^
						(ConcreteUnit (Characters)->(Attacker Id~))^
#if (verbose)
						((The attacker Id~ created) Ew.Output~) Do
#endif
					);
					Destroy ias (
						(MarkedAsKilled true)^
						((Player PlayerId~) Tx (ModeInfo.ModeBattle~ unitkilled Id~ (BattleFieldId~ attaker))) Gate
#if (verbose)
						((The attacker Id~ destroyed) Ew.Output~) Do
#endif
					);
				);
				/* to be defender */
				UnitAsDefender ias (
					Create ias (
						(Defender (Defender Id~)) Born
						((Defender Id~)->Id Id~)^
						((Defender Id~)->PlayerId PlayerId~)^
						(ConcreteUnit (Characters)->(Defender Id~))^
#if (verbose)
						((The defender Id~ created) Ew.Output~) Do
#endif
					);
					Destroy ias (
						(MarkedAsKilled true)^
						((Player PlayerId~) Tx (ModeInfo.ModeBattle~ unitkilled Id~ (BattleFieldId~ defender))) Gate
#if (verbose)
						((The defender Id~ destroyed) Ew.Output~) Do
#endif
					);
				);
				/* sets unit's property  */
				PropertySetOperation ias (
					Prop ias nil;
					Value ias nil;
					(RightProp false) ias (
#if (verbose)
						((The unit Id~ can not set invalid property named by Prop~) Ew.Output~) Do
#endif
					);
					(RightProp true) ias (
						(Pass true) ias doNothing;
						(Pass false) ias (
							(Property capacity) ias (
								(Capacity Value~)^
#if (verbose)
								((The unit Id~ has capacity Capacity~) Ew.Output~) Do
#endif
							);
							(Property kind) ias (
								(Kind Value~)^
#if (verbose)
								((The unit Id~ has kind Kind~) Ew.Output~) Do
#endif
							);
#if (business)
							(Property clazz) ias (
								(Class Value~)^
								((The unit Id~ has clazz Class~) Ew.Output~) Do
							);
							(Property contain) ias (
								(Contain Value~)^
								((The unit Id~ has contain by resources Contain~) Ew.Output~) Do
							);
#endif
							(Property type) ias (
								(Type Value~)^
								CreateConcreteUnitByType~ Exe
							);
							(Property attack) ias (
								(Power.Attack Value~)^
#if (verbose)
								((The unit Id~ has attack power Power.Attack~) Ew.Output~) Do
#endif
							);
							(Property defence) ias (
								(Power.Defence Value~)^
#if (verbose)
								((The unit Id~ has defence power Power.Defence~) Ew.Output~) Do
#endif
							);
							(Property Prop~)~ Exe
						);
						(Value ($~ 1) Get)^
#if (verbose)
						((The unit Id~ processes property Prop~ and value Value~) Ew.Output~) Do
#endif
						(Pass (Value~ nil) Ident)~ Exe
					);
					(Prop ($~ 0) Get)^
#if (verbose)
					((The unit Id~ received property Prop~) Ew.Output~) Do
#endif
					(RightProp (Properties~ Prop~) In)~ Exe 
				);
				GetCurrentPosition ias (
					(CurrentPositionNil true) ias (CurrentPosition (ConcreteUnit~)->(ActivityStrategy)->(Movement)->PrevState~)^;
					(CurrentPositionNil false) ias doNothing;
					(CurrentPosition (ConcreteUnit~)->(ActivityStrategy)->(Movement)->State~)^
					(CurrentPositionNil (CurrentPosition~ nil) Ident)~ Exe
				);
				AssociateWithBattleField ias (
					BFId ias nil;
					(NotCreatedYet true) ias doNothing;
					(NotCreatedYet false) ias (
						(BattleFieldId BFId~)^
						((ConcreteUnit~)->BattleFieldId BFId~)^
					);
					(NotCreatedYet (ConcreteUnit~ nil) Ident)~ Exe
				);
				CreateConcreteUnitByType ias (
					(Create attacker) ias UnitAsAttacker.Create~ Exe;
					(Create defender) ias UnitAsDefender.Create~ Exe;
					(Create Type~)~ Exe
					((ConcreteUnit~)->BattleFieldId BattleFieldId~)^
					(ConcreteUnit~)->Init~ Exe
#if (verbose)
					((The concrete unit ConcreteUnit~ created) Ew.Output~) Do
#endif
				);
				ReleaseConcreteUnit ias (
					(CU true) ias doNothing;
					(CU false) ias (
						((ConcreteUnit~)->BattleFieldId nil)^
						(ConcreteUnit~)->Done~ Exe
						(ConcreteUnit~) Release
						(ConcreteUnit nil)^
#if (verbose)
						((The concrete unit ConcreteUnit~ released) Ew.Output~) Do
#endif
					);
					(CU (ConcreteUnit~ nil) Ident)~ Exe
				);
				NotifyOwner ias (
#if (verbose)
					((The unit Id~ belong to player PlayerId~ got self check message) Ew.Output~) Do
#endif
					// notify player about success hiring operation
#if (business)
					((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ hireunit PlayerId~ (Id~ Kind~ Class~ Cost~ Contain~))) Gate
#else
					((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ hireunit PlayerId~ (Id~))) Gate
#endif

#if (release)
	#if (business)
					(((hiring UnitReadyNotify~ done) (Player PlayerId~) (unit Id~) Kind~ CId~ Class~ Cost~ Contain~) Ew.OutChannel~) Do

	#else                   	
					(((hiring UnitReadyNotify~ done) (Player PlayerId~) (unit Id~) Kind~ CId~) Ew.OutChannel~) Do
	#endif
#endif
				);

				/* unit receives commands in deferred manner */
				CommandDispatcher ias (
					Dispatch ias nil;
					LastUnitCommandId ias stay;
					UnitCommandId ias stay;
					UnitId ias nil;
					UnitCommandParams ias nil;
					// concrete unit's type not specialized
					(ns true) ias (
						(Handle collectstate) ias CollectState~ Exe;
						(Handle restorestate) ias (
							(RestoreUCState.S UnitCommandParams~)^
							RestoreUCState~ Exe
						);
						(Handle join) ias (
							(JoinUnit.Actions UnitCommandParams~)^
							JoinUnit~ Exe
						);
						(Handle disjoin) ias (
							(DisjoinUnit.Actions UnitCommandParams~)^
							DisjoinUnit~ Exe
						);
						(Handle check) ias (
							NotifyOwner~ Exe
						);
						(Handle stop) ias (
#if (verbose)
							((The unit Id~ received command stop) Ew.Output~) Do
#endif
						);
						(Handle setprops) ias (UnitCommandParams~ PropertySetOperation~) ForEach;
						(Handle exit) ias StopActivity~ Exe;
                                                (Handle stay),(Handle kill),(Handle go),(Handle movetopos),(Handle startpos),(Handle getpos),(Handle select) ias doNothing;
						(Handle UnitCommandId~)~ Exe
						(UnitCommandId stay)^
						UnitLifeStep~ Exe
					);
					// concrete unit's type specialized
					(ns false) ias (
						(Handle collectstate) ias CollectState~ Exe;
						(Handle restorestate) ias (
							(RestoreUCState.S UnitCommandParams~)^
							RestoreUCState~ Exe
						);
						(Handle join) ias (
							(JoinUnit.Actions UnitCommandParams~)^
							JoinUnit~ Exe
						);
						(Handle disjoin) ias (
							(DisjoinUnit.Actions UnitCommandParams~)^
							DisjoinUnit~ Exe
						);
						(Handle check) ias NotifyOwner~ Exe;
						(Handle stay) ias doNothing;
						(Handle stop) ias (
#if (verbose)
							((The unit Id~ received command stop) Ew.Output~) Do
#endif
						);
						(Handle setprops) ias (UnitCommandParams~ PropertySetOperation~) ForEach;
						(Handle kill) ias (ConcreteUnit~)->(ActivityStrategy)->Kill~ Exe;
						(Handle go) ias (
							(ConcreteUnit~)->(ActivityStrategy)->(Movement)->CheckAndStart~ Exe
							UnitLifeStep~ Exe
						);
						(Handle movetopos) ias (ConcreteUnit~)->(ActivityStrategy)->(Movement)->SetMoveToPos~ Exe;
						(Handle startpos) ias (ConcreteUnit~)->(ActivityStrategy)->(Movement)->SetStartPos~ Exe;
						(Handle getpos) ias (
							UpdateCurrentPosition~ Exe
#if (verbose)
							((The unit Id~ has position CurrentPosition~) Ew.Output~) Do
#endif
						);
						(Handle select) ias (UnitCommandId LastUnitCommandId~)^;
						(Handle exit) ias StopActivity~ Exe;
						(Handle UnitCommandId~)~ Exe
						(UnitCommandId stay)^
						UnitLifeStep~ Exe
					);
					(NothingToDispatch true) ias doNothing;
					(NothingToDispatch false) ias (
						(LastUnitCommandId UnitCommandId~)^
						(UnitCommandId (Dispatch~ 1) Get)^
						(UnitId (Dispatch~ 2) Get)^
						(UnitCommandParams (Dispatch~ 3) Get)^
					);
					(NothingToDispatch (Dispatch~ nil) Ident)~ Exe
					(ns (ConcreteUnit~ nil) Ident)~ Exe
				);
				/* unit's lifestep */
				UnitLifeStep ias (
					(Stop false) ias (
						(ready false) ias (
							(CommandDispatcher.Dispatch nil)^
						);
						(ready true) ias (
							(CommandDispatcher.Dispatch ((Unit Id~) Rx) Gate)^
#if (verbose)
							((The unit Id~ received CommandDispatcher.Dispatch~) Ew.Output~) Do
#endif
						);
						(ready (((Unit Id~) Ready) Gate true) Ident)~ Exe
						CommandDispatcher~ Exe
					);
					(Stop true) ias (
#if (verbose)
						((The unit Id~ stopped) Ew.Output~) Do
#endif
					);
					CommandDispatcher.Dispatch~ Recycle
					(Stop StopUnit~)~ Exe
				);

				lifeterm = (
#if (verbose)
					((The unit Id~ was born) Ew.Output~) Do
#endif
					((Unit Id~) Register blocked) Gate
					Init~ Exe
					UnitLifeStep~ Exe
					((Unit Id~) Unregister) Gate
#if (verbose)
					((The unit Id~ exited) Ew.Output~) Do
#endif
				) Exe
			);
		);
	);
}