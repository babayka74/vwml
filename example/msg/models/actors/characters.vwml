module Characters {
	MagicWorld ias (
		Characters ias (
			/* general game unit */
			Unit ias (
				Properties ias (kind type attack defence);
				/* available unit's types  */
				Types ias (attacker defender);
				/* default type is attacker */
				Type ias attacker;
				/* kind of unit */
				Kind ias skeleton;
				/* unit's id */
				Id ias nil;
				/* associated with player */
				PlayerId ias nil;
				/* concrete unit (defines unit's specific logic => attacker or defender) */
				ConcreteUnit ias nil;
				/* switched unit's entity */
				SwitchedConcreteUnit ias nil;
				/* unit's current position */
				CurrentPosition ias nil;
				/* true in case if unit should be stopped */
				StopUnit ias false;
				/* true in case if marked as killed, but not destroyed yet */
				MarkedAsKilled ias false;
				/* units participates in battle on given battlefield */
				BattleFieldId ias nil;
				/* true in case if unit is involved to some action */
				InAction ias false;
				/* Performs initialization steps */
				Init ias (
					(Type attacker)^
					(Kind skeleton)^
					(ConcreteUnit nil)^
					(CurrentPosition nil)^
					(StopUnit false)^
					(MarkedAsKilled false)^
					(BattleFieldId nil)^
					(InAction false)^
					((Unit Id~) Tx (PlayerId~ check Id~ ())) Gate
				);
				StopActivity ias (
					(StopUnit true)^
#if (verbose)
					((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ unitstopped Id~ (Id~))) Gate
#endif
				);
				/* each unit has following properties: power of attack and defence */
				Power ias (
					Attack ias ();
					Defence ias ();
				);
				/* activates 'stay' command */
				Stay ias (CommandDispatcher.UnitCommandId stay)^;
				/* to be attacker */
				UnitAsAttacker ias (
					Create ias (
						(Attacker (Attacker Id~)) Born
						((Attacker Id~)->Id Id~)^
						((Attacker Id~)->PlayerId PlayerId~)^
						(ConcreteUnit (Characters)->(Attacker Id~))^
#if (verbose)
						((The attacker Id~ created) Ew.Output~) Do
#endif
					);
					Destroy ias (
						(MarkedAsKilled true)^
						((Player PlayerId~) Tx (ModeInfo.ModeBattle~ unitkilled Id~ (BattleFieldId~ attaker))) Gate
#if (verbose)
						((The attacker Id~ destroyed) Ew.Output~) Do
#endif
					);
				);
				/* to be defender */
				UnitAsDefender ias (
					Create ias (
						(Defender (Defender Id~)) Born
						((Defender Id~)->Id Id~)^
						((Defender Id~)->PlayerId PlayerId~)^
						(ConcreteUnit (Characters)->(Defender Id~))^
#if (verbose)
						((The defender Id~ created) Ew.Output~) Do
#endif
					);
					Destroy ias (
						(MarkedAsKilled true)^
						((Player PlayerId~) Tx (ModeInfo.ModeBattle~ unitkilled Id~ (BattleFieldId~ defender))) Gate
#if (verbose)
						((The defender Id~ destroyed) Ew.Output~) Do
#endif
					);
				);
				/* sets unit's property  */
				PropertySetOperation ias (
					Prop ias nil;
					Value ias nil;
					(RightProp false) ias (
#if (verbose)
						((The unit Id~ can not set invalid property named by Prop~) Ew.Output~) Do
#endif
					);
					(RightProp true) ias (
						(Pass true) ias doNothing;
						(Pass false) ias (
							(Property kind) ias (
								(Kind Value~)^
#if (verbose)
								((The unit Id~ has kind Kind~) Ew.Output~) Do
#endif
							);
							(Property type) ias (
								(Type Value~)^
								CreateConcreteUnitByType~ Exe
							);
							(Property attack) ias (
								(Power.Attack Value~)^
#if (verbose)
								((The unit Id~ has attack power Power.Attack~) Ew.Output~) Do
#endif
							);
							(Property defence) ias (
								(Power.Defence Value~)^
#if (verbose)
								((The unit Id~ has defence power Power.Defence~) Ew.Output~) Do
#endif
							);
							(Property Prop~)~ Exe
						);
						(Value ($~ 1) Get)^
#if (verbose)
						((The unit Id~ processes property Prop~ and value Value~) Ew.Output~) Do
#endif
						(Pass (Value~ nil) Ident)~ Exe
					);
					(Prop ($~ 0) Get)^
#if (verbose)
					((The unit Id~ received property Prop~) Ew.Output~) Do
#endif
					(RightProp (Properties~ Prop~) In)~ Exe 
				);
				GetCurrentPosition ias (
					(CurrentPositionNil true) ias (CurrentPosition (ConcreteUnit~)->(ActivityStrategy)->(Movement)->PrevState~)^;
					(CurrentPositionNil false) ias doNothing;
					(CurrentPosition (ConcreteUnit~)->(ActivityStrategy)->(Movement)->State~)^
					(CurrentPositionNil (CurrentPosition~ nil) Ident)~ Exe
				);
				AssociateWithBattleField ias (
					BFId ias nil;
					(NotCreatedYet true) ias doNothing;
					(NotCreatedYet false) ias (
						(BattleFieldId BFId~)^
						((ConcreteUnit~)->BattleFieldId BFId~)^
					);
					(NotCreatedYet (ConcreteUnit~ nil) Ident)~ Exe
				);
				CreateConcreteUnitByType ias (
					(Create attacker) ias UnitAsAttacker.Create~ Exe;
					(Create defender) ias UnitAsDefender.Create~ Exe;
					(Create Type~)~ Exe
					((ConcreteUnit~)->BattleFieldId BattleFieldId~)^
					(ConcreteUnit~)->Init~ Exe
#if (verbose)
					((The concrete unit ConcreteUnit~ created) Ew.Output~) Do
#endif
				);
				ReleaseConcreteUnit ias (
					((ConcreteUnit~)->BattleFieldId nil)^
					(ConcreteUnit~)->Done~ Exe
					(ConcreteUnit~) Release
					(ConcreteUnit nil)^
#if (verbose)
					((The concrete unit ConcreteUnit~ released) Ew.Output~) Do
#endif
				);
				/* unit receives commands in deferred manner */
				CommandDispatcher ias (
					Dispatch ias nil;
					LastUnitCommandId ias stay;
					UnitCommandId ias stay;
					UnitId ias nil;
					UnitCommandParams ias nil;
					// concrete unit's type not specialized
					(ns true) ias (
						(Handle check) ias (
#if (verbose)
							((The unit Id~ belongs to player PlayerId~ self test ok) Ew.Output~) Do
#endif
							Stay~ Exe
							UnitLifeStep~ Exe
						);
						(Handle stay) ias (
							UnitLifeStep~ Exe
						);
						(Handle stop) ias (
							((The unit Id~ received command stop) Ew.Output~) Do	
							(UnitCommandId stay)^
							UnitLifeStep~ Exe
						);
						(Handle setprops) ias (
							(UnitCommandParams~ PropertySetOperation~) ForEach
							UnitLifeStep~ Exe
						);
						(Handle exit) ias StopActivity~ Exe;
                                                (Handle kill),(Handle go),(Handle movetopos),(Handle startpos),(Handle getpos),(Handle select) ias doNothing;
						(Handle UnitCommandId~)~ Exe
					);
					// concrete unit's type specialized
					(ns false) ias (
						(Handle check) ias (
#if (verbose)
							((The unit Id~ belongs to player PlayerId~ self test ok) Ew.Output~) Do
#endif
							Stay~ Exe
							UnitLifeStep~ Exe
						);
						(Handle stay) ias (
							UnitLifeStep~ Exe
						);
						(Handle stop) ias (
							((The unit Id~ received command stop) Ew.Output~) Do	
							(UnitCommandId stay)^
							UnitLifeStep~ Exe
						);
						(Handle setprops) ias (
							(UnitCommandParams~ PropertySetOperation~) ForEach
							UnitLifeStep~ Exe
						);
						(Handle kill) ias (
							(ConcreteUnit~)->(ActivityStrategy)->Kill~ Exe
							(UnitCommandId stay)^
							UnitLifeStep~ Exe
						);
						(Handle go) ias (
							(ConcreteUnit~)->(ActivityStrategy)->(Movement)->CheckAndStart~ Exe
							UnitLifeStep~ Exe
						);
						(Handle movetopos) ias (
							(ConcreteUnit~)->(ActivityStrategy)->(Movement)->SetMoveToPos~ Exe
							UnitLifeStep~ Exe
						);
						(Handle startpos) ias (
							(ConcreteUnit~)->(ActivityStrategy)->(Movement)->SetStartPos~ Exe
							UnitLifeStep~ Exe
						);
						(Handle getpos) ias (
							UpdateCurrentPosition~ Exe
#if (verbose)
							((The unit Id~ has position CurrentPosition~) Ew.Output~) Do
#endif
							UnitLifeStep~ Exe
						);
						(Handle select) ias (
							(UnitCommandId LastUnitCommandId~)^
							UnitLifeStep~ Exe
						);
						(Handle exit) ias StopActivity~ Exe;
						(Handle UnitCommandId~)~ Exe
					);
					(NothingToDispatch true) ias doNothing;
					(NothingToDispatch false) ias (
						(LastUnitCommandId UnitCommandId~)^
						(UnitCommandId (Dispatch~ 1) Get)^
						(UnitId (Dispatch~ 2) Get)^
						(UnitCommandParams (Dispatch~ 3) Get)^
					);
					(NothingToDispatch (Dispatch~ nil) Ident)~ Exe
					(ns (ConcreteUnit~ nil) Ident)~ Exe
				);
				/* unit's lifestep */
				UnitLifeStep ias (
					(Stop false) ias (
						(ready false) ias (
							(CommandDispatcher.Dispatch nil)^
						);
						(ready true) ias (
							(CommandDispatcher.Dispatch ((Unit Id~) Rx) Gate)^
#if (verbose)
							((The unit Id~ received CommandDispatcher.Dispatch~) Ew.Output~) Do
#endif
						);
						(ready (((Unit Id~) Ready) Gate true) Ident)~ Exe
						CommandDispatcher~ Exe
					);
					(Stop true) ias (
						((The unit Id~ stopped) Ew.Output~) Do
					);
					(Stop StopUnit~)~ Exe
				);

				lifeterm = (
#if (verbose)
					((The unit Id~ was born) Ew.Output~) Do
#endif
					((Unit Id~) Register blocked) Gate
					Init~ Exe
					UnitLifeStep~ Exe
					((Unit Id~) Unregister) Gate
				) Exe
			);
		);
	);
}