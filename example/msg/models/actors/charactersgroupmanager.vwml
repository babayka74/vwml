module CharactersGroupManager {
	MagicWorld ias (
		Characters ias (
			/* general game unit */
			Unit ias (
				// called when Joined became '()'
				DisjoinCbk ias nil;
				InitDisjoinAllUnitsInterceptor ias (
					(Joined ()) StartInterception
				);
				DoneDisjoinAllUnitsInterceptor ias (
					(Joined ()) FinishInterception
				);
				DisjoinUnit ias (
					Action ias nil;
					Actions ias nil;
					U ias nil;
					// user data
					UD ias nil;
					(Cmd cancel) ias (
						// disjoin not allowed
						(NAJ true) ias (
#if (verbose)
							((Unit U~ not joined of player PlayerId~) Ew.Output~) Do
#endif
							((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ rejectdisjoinunits PlayerId~ ((PlayerId~ U~ nil notJoined UD~)))) Gate
						);
						// disjoin allowed
						(NAJ false) ias (
#if (unitalive)
							((Characters)->(Unit JoinedWith~) Tx (Id~ disjoin 0 ((Id~ remove UD~)))) Gate
#if (verbose)
							((Unit Id~ disjoined from JoinedWith~ of player PlayerId~) Ew.Output~) Do
#endif
							(JoinedWith nil)^
#else // unitalive
							((Characters)->(Unit JoinedWith~)->Joined ((Characters)->(Unit JoinedWith~)->Joined~ (Id~)) Substruct)^
#if (verbose)
							((Unit Id~ disjoined from JoinedWith~ of player PlayerId~) Ew.Output~) Do
#endif							
							((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ ackdisjoinunits PlayerId~ ((PlayerId~ Id~ JoinedWith~ UD~)))) Gate
							(JoinedWith nil)^
							
#endif // unitalive
						);
						(NAJ (JoinedWith~ nil) Ident)~ Exe
					);
					(Cmd remove) ias (
						(Joined (Joined~ (U~)) Substruct)^
#if (verbose)
						((Unit Id~ disjoins unit U~ and units are Joined~ of player PlayerId~) Ew.Output~) Do
#endif
						((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ ackdisjoinunits PlayerId~ ((PlayerId~ U~ Id~ UD~)))) Gate
					);
					(Action (Actions~ 0) Get)^
					(U (Action~ 0) Get)^
					(UD (Action~ 2) Get)^
					(Cmd (Action~ 1) Get)~ Exe
				);

				JoinUnit ias (
					Action ias nil;
					Actions ias nil;
					GetLastAction ias (
						(Actions (Actions~ (Action~)) Substruct)^
						// next action in chain
						(Action (Actions~ 0) Get)^
					);
					U ias nil;
					(Cmd invite) ias (
						// join not allowed
						(NAJ true) ias (
#if (verbose)
							((Unit U~ already joined with Id~ of player PlayerId~) Ew.Output~) Do
#endif
							((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ rejectjoinunits PlayerId~ ((U~ Id~ alreadyJoined)))) Gate
						);
						// join allowed
						(NAJ false) ias (
							(NoPlace true) ias (
#if (verbose)
								((Unit U~ can not join with Id~ since no place of player PlayerId~) Ew.Output~) Do
#endif
								((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ rejectjoinunits PlayerId~ ((U~ Id~ noPlace)))) Gate
							);
							(NoPlace false) ias (
								(Joined (Joined~ (U~)) Join)^
#if (unitalive)
								(Actions (Actions~ (Action~)) Substruct)^
								// next action in chain
								(Action (Actions~ 0) Get)^
								// next unit
								(U (Action~ 0) Get)^
								((Characters)->(Unit U~) Tx (Id~ join 0 Actions~)) Gate

#if (verbose)
								((Unit Id~ joined with U~ and units are Joined~ of player PlayerId~ and actions Actions~ sent to unit U~) Ew.Output~) Do
#endif
#else // unitalive
								((Characters)->(Unit U~)->JoinedWith Id~)^
								GetLastAction~ Exe
								GetLastAction~ Exe
								((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ (Action~ 3) Get (Action~ 0) Get Actions~)) Gate
#endif // unitalive
							);
							(NoPlace ((Joined~) Size Capacity~) Ident)~ Exe
						);
						(NAJ (Joined~ U~) In)~ Exe
					);
					(Cmd ack) ias (
						(JoinedWith (Action~ 2) Get)^
#if (verbose)
						((Unit Id~ acks join with JoinedWith~ of player PlayerId~) Ew.Output~) Do
#endif
						GetLastAction~ Exe
						((Player PlayerId~) Tx (ModeInfo.ModeResourceMgr~ (Action~ 3) Get (Action~ 0) Get Actions~)) Gate
#if (verbose)
						((Unit Id~ sends successful ack Actions~ to player PlayerId~) Ew.Output~) Do
#endif
					);
					(Action (Actions~ 0) Get)^
					(U (Action~ 0) Get)^
					(Cmd (Action~ 1) Get)~ Exe
				);
			);
		);
	);
}
