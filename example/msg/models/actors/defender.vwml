module Defender {
	MagicWorld ias (
		Characters ias (
			Defender ias (
				// unit id
				Id ias nil;
				// player id
				PlayerId ias nil;
				/* unit selected by player */
				Selected ias false;
				// belongs to battlefield
				BattleFieldId ias nil;

				Init ias (
					ActivityStrategy.Init~ Exe
					((The defender Id~ for user PlayerId~ initialized) Ew.Output~) Do
				);
				Done ias (
					ActivityStrategy.Done~ Exe
					((The defender Id~ for user PlayerId~ uninitialized) Ew.Output~) Do
				);
				ActivityStrategy ias (
					// initialization steps
					Init ias (
						(Services.PositionChecker (PositionChecker Id~)) Born
						(Services.SignalUnit (SignalUnit Id~)) Born
						(DpfSearchMkAParallelEx (DpfSearchMkAParallelEx Id~)) Born
					);
					Done ias (
						((Services)->(PositionChecker Id~)) Release
						((Services)->(SignalUnit Id~)) Release
						((DpfSearchMkAParallelEx Id~)) Release
					);
					Actions ias (
						Defence ias (
							AttackedAttacker ias nil;
							OnFire ias ();
							SelectAttackerAndAttack ias (
								(NoAttack true) ias doNothing;
								(NoAttack false) ias (
									(AttackerKilled no) ias ((The defender Id~ did not kill attacker AttackedAttacker~ and continues observing) Ew.Output~) Do;
									(AttackerKilled yes) ias (
										((The defender Id~ killed attacker AttackedAttacker~ and continues observing) Ew.Output~) Do
										((Unit AttackedAttacker~)->MarkedAsKilled true)^
										(Unit AttackedAttacker~)->Stay~ Exe
										// sends signal to defender that it was killed
										(Services.(SignalUnit Id~)->PlayerId PlayerId~)^
										(Services.(SignalUnit Id~)->To AttackedAttacker~)^
										(Services.(SignalUnit Id~)->CommandId kill)^
										(Services.(SignalUnit Id~)->CommandParams ())^
										Services.(SignalUnit Id~)~ Exe
									);
									((The defender Id~ can attack following attackers OnFire~) Ew.Output~) Do
									(AttackedAttacker OnFire~ Random)^
									((The defender Id~ found attackers OnFire~ which can be attacked and selected AttackedAttacker~) Ew.Output~) Do
									(AttackPower (Characters)->(Unit Id~)->(Power)->Attack~)^
									(DefencePower (Characters)->(Unit AttackedAttacker~)->(Power)->Defence~)^
									((The defender Id~ attacks with AttackPower~ and attacked attacker AttackedAttacker~ defends with DefencePower~) Ew.Output~) Do
									(AttackResult (AttackPower~ DefencePower~) Join Random)^
									(AttackerKilled AttackResult~)~ Exe
								);
								(NoAttack (OnFire~ ()) Ident)~ Exe
							);
							Observe ias (
								Position ias nil;	
								CheckFireZone ias (
									(Unit defender) ias doNothing;
									(Unit attacker) ias (
										(AsKilled true) ias doNothing;
										(AsKilled false) ias (
											(OnFire false) ias doNothing;
											(OnFire true) ias (
												(OnFire (OnFire~ ($~)) Join)^
												((The attacker $~ can be attacked by defender Id~) Ew.Output~) Do
											);
											(Unit $~)->GetCurrentPosition~ Exe
											(OnFire (Position~ (Unit $~)->CurrentPosition~) Ident)~ Exe
										);
										(AsKilled (Unit $~)->MarkedAsKilled~)~ Exe
									);
									(Unit (Unit $~)->Type~)~ Exe
								);
								(Position $~)^
								((BattleField BattleFieldId~)->(Participants)->Units~ CheckFireZone~) ForEach
							);
							(OnFire ())^
							(Movement.State~~ Observe~) ForEach
							SelectAttackerAndAttack~ Exe
						);
					);
					Kill ias (
						((The defender Id~ was killed) Ew.Output~) Do
						(Characters)->(Unit Id~)->(UnitAsDefender)->Destroy~ Exe
					);
					/* movement's parameters (stubs almost) */
					Movement ias (
						/* unit's position */
						State ias nil;
						SetStartPos ias (
							(InvalidPositon false) ias (Movement.State~ (BattleField BattleFieldId~)->(Fields)->(Defence)->Nodes) Context;
							(InvalidPositon true) ias doNothing;
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeChecked (Unit Id~)->(CommandDispatcher)->UnitCommandParams~)^
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeCheckedCtx (BattleField BattleFieldId~)->(Fields)->(Main)->Nodes)^
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeSet Movement.State)^
							(Services.(PositionChecker Id~)->(CheckPosition)->OnMainField (BattleField BattleFieldId~)->(Fields)->(Defence)->Nodes~)^
                        	                        Services.(PositionChecker Id~)->CheckPosition~ Exe
							((The unit Id~ has start position Movement.State~) Ew.Output~) Do
							(InvalidPositon (Movement.State~ nil) Ident)~ Exe
							((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
						);
						/* unit was killed */
						SetMoveToPos ias doNothing;
						CheckAndStart ias (
							(NotCorrectParams true) ias (
								 ((The defender Id~ has invalid start position) Ew.Output~) Do
								((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
							);
							(NotCorrectParams false) ias (
								100 Relax
								Actions.Defence~ Exe
							);
							(NotCorrectParams (Movement.State~ nil) Ident)~ Exe
						);
					);
				);
			);
		);
	);
}
