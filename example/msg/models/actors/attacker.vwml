
module Attacker {
	MagicWorld ias (
		Characters ias (
			Attacker ias (
				// unit id
				Id ias nil;
				// player id
				PlayerId ias nil;
				/* unit selected by player */
				Selected ias false;
				// belongs to battlefield
				BattleFieldId ias nil;

				Init ias (
					ActivityStrategy.Init~ Exe
					((The attacker Id~ for user PlayerId~ initialized) Ew.Output~) Do
				);
				ActivityStrategy ias (
					// initialization steps
					Init ias (
						(Services.PositionChecker Services.(PositionChecker Id~)) Born
						(Services.SignalUnit Services.(SignalUnit Id~)) Born
						(DpfSearchMkAParallelEx (DpfSearchMkAParallelEx Id~)) Born
					);
					Actions ias (
						/* attacker attacks */
						Attack ias (
							/* means that attack is allowed from this node */
							Position ias nil;
							AttackedDefender ias nil;
							/* defenders which can be attacked by attacker */
							OnFire ias ();
							SelectDefenderAndAttack ias (
								(NoAttack true) ias (
									((The attacker Id~ reports about absent of defenders and continues movement) Ew.Output~) Do
									ChangePosition~ Exe
								);
								(NoAttack false) ias (
									(DefenderKilled no) ias (
										((The attacker Id~ did not kill defender AttackedDefender~ and continues movement) Ew.Output~) Do
										ChangePosition~ Exe
									);
									(DefenderKilled yes) ias (
										((The attacker Id~ killed defender AttackedDefender~ and continues movement) Ew.Output~) Do
										((Unit AttackedDefender~)->MarkedAsKilled true)^
										(Unit AttackedDefender~)->Stay~ Exe
										ChangePosition~ Exe
										// sends signal to defender that it was killed
										(Services.(SignalUnit Id~)->PlayerId PlayerId~)^
										(Services.(SignalUnit Id~)->To AttackedDefender~)^
										(Services.(SignalUnit Id~)->CommandId kill)^
										(Services.(SignalUnit Id~)->CommandParams ())^
										Services.(SignalUnit Id~)~ Exe
									);
									(AttackedDefender OnFire~ Random)^
									((The attacker Id~ found defenders OnFire~ which can be attacked and selected AttackedDefender~) Ew.Output~) Do
									(AttackPower (Characters)->(Unit Id~)->(Power)->Attack~)^
									(DefencePower (Characters)->(Unit AttackedDefender~)->(Power)->Defence~)^
									((The attacker Id~ attacks with AttackPower~ and attacked defender AttackedDefender~ defends with DefencePower~) Ew.Output~) Do
									(AttackResult (AttackPower~ DefencePower~) Join Random)^
									(DefenderKilled AttackResult~)~ Exe
								);
								(NoAttack (OnFire~ ()) Ident)~ Exe 
							);
							CheckFireZone ias (
								(Unit attacker) ias doNothing;
								(Unit defender) ias (
									(Killed true) ias doNothing;
									(Killed false) ias (
										(OnFire false) ias doNothing;
										(OnFire true) ias (
											(OnFire (OnFire~ ($~)) Join)^
											((The defender $~ can be attacked by attacker Id~) Ew.Output~) Do
										);
										(Unit $~)->GetCurrentPosition~ Exe
										(OnFire (Position~~ (Unit $~)->CurrentPosition~) In)~ Exe
									);
									(Killed (Unit $~)->MarkedAsKilled~)~ Exe
								);
								(Unit (Unit $~)->Type~)~ Exe
							);
							((The unit Id~ is on attacking position Position~ and looking for enemies in Position~~) Ew.Output~) Do
							(OnFire ())^
							((BattleField BattleFieldId~)->(Participants)->Units~ CheckFireZone~) ForEach
							SelectDefenderAndAttack~ Exe
						);
						/* attacker changes position */
						ChangePosition ias (
							((The unit Id~ moved from Movement.PrevState~ to Movement.State~ time 300) Ew.Output~) Do
							300 Relax
							((Unit Id~)->CurrentPosition Movement.State~)^
							(Movement.PrevState Movement.State~)^
                                			(Movement.Iteration ((Movement.Iteration~) Ew.IncValue~) Do)^
							(Movement.State (Movement.RequestedSteps~ Movement.Iteration~) Get)^
							(Movement.Walking true)^ 
						);
					);
					/* unit was killed */
					Kill ias (
						((The attacker Id~ was killed) Ew.Output~) Do
						(Characters)->(Unit Id~)->(UnitAsAttacker)->Destroy~ Exe
					);
					/* movement's parameters */
					Movement ias (
						Goals ias ();
						GoalReached ias false;
						AllGoalsReached ias false;
						SeqStates ias ();
						RequestedSteps ias ();
						State ias nil;
						PrevState ias nil;
						Init ias true;
						Iteration ias 0;
						PathPassed ias false;
						Walking ias false;
						NumOfRequestedSteps ias 1;
						NoSteps ias false;

						/* selectes action which should be run on current step  */
						SelectActionOnMovement ias (
							NextAction ias nil;
							(AttackNotPossible true) ias (NextAction Actions.ChangePosition~)^;
							(AttackNotPossible false) ias (NextAction Actions.Attack~)^;
							/* check if current attacker's node is valid for attack */
							(NextAction nil)^
							(Actions.Attack.Position ((BattleField BattleFieldId~)->(Fields)->(Attack)->Nodes~ Movement.PrevState~) Find)^
							(AttackNotPossible (Actions.Attack.Position~ nil) Ident)~ Exe
						);					
						Result ias (
							(NoSteps false) ias (
								(Movement.GoalReached true)^
								(Movement.AllGoalsReached (Movement.Goals~ ()) Ident)^
								((Result detected left goals for Id~ are Movement.Goals~ Ew.TargetsToBeDestroyed~) Ew.Output~) Do
							);
							(NoSteps true) ias ((No steps for unit Id~ all nodes were visited by others units) Ew.Output~) Do;
							(NoSteps Movement.NoSteps~)~ Exe
						);      
						TargetDestroyed ias ((Unit Id~ destroyed target Movement.State~) Ew.Output~) Do;
						Recalculate ias (
							(Movement.RequestedSteps ())^
							(Movement.Init false)^
							(Movement.Iteration 0)^
							(Movement.PathPassed false)^
							(Movement.NoSteps false)^
							(Movement.PrevState Movement.State~)^
							(Movement.NumOfRequestedSteps Ew.ConfiguredNumOfRequestedSteps~)^
							((The unit Id~ goals Movement.Goals~ initialized movement procedure with shared stateset (Player PlayerId~)->(Resources)->(Units)->UnitsStateSet~ and steps Movement.NumOfRequestedSteps~ and state Movement.State~) Ew.Output~) Do
							((Movement.Goals
								Ew.TargetsToBeDestroyed
								Movement.State
								(Player PlayerId~)->(Resources)->(Units)->UnitsStateSet   /* units' shared path */
								Movement.SeqStates
								Movement.Result
								Movement.TargetDestroyed
								Ew.DecValue
								Movement.RequestedSteps
								Movement.NumOfRequestedSteps
								Movement.NoSteps                     	
								Id
								true) (DpfSearchMkAParallelEx Id~)~) CallP
							(Movement.State (Movement.RequestedSteps~ Movement.Iteration~) Get)^
							((Calculated steps Movement.RequestedSteps~ unit Id~) Ew.Output~) Do
						);
						CheckAndStart ias (
							(PathPassed true true) ias ((Unit Id~)->(CommandDispatcher)->UnitCommandId stop)^;
							(PathPassed false false),(PathPassed false true),(PathPassed true false) ias Movement.Go~ Exe;
							(PathPassed Movement.PathPassed~ Selected~)~ Exe 
						);
						Go ias (
							// start movement, all parameters are correct
							(Init false) ias (FinishedMovement (Movement.State~ nil) Ident)~ Exe;
							(Init true) ias (
								Recalculate~ Exe
							);
							(FinishedMovement false) ias (
								SelectActionOnMovement~ Exe
								SelectActionOnMovement.NextAction~ Exe
							);
							(FinishedMovement true) ias (
								(GoalReached false false) ias doNothing;
								(GoalReached true false) ias (
									((The unit Id~ reached goal Movement.State~ and looks for another goal from Movement.Goals~) Ew.Output~) Do
									(Movement.GoalReached false)^
								);
								(GoalReached false true), (GoalReached true true) ias (
									((The unit Id~ reached all goals) Ew.Output~) Do
									(Movement.AllGoalsReached false)^
									((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
								);
								(AllTargetsDestroyed true) ias (
									((The unit Id~ detected that all shared targets destroyed) Ew.Output~) Do
                                                			((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
								);
								(AllTargetsDestroyed false) ias doNothing;
								(PathPassed true)^
								(Movement.State Movement.PrevState~)^
								(Walking false)^
								(Init true)^
								(GoalReached Movement.GoalReached~ Movement.AllGoalsReached~)~ Exe
								(AllTargetsDestroyed (Ew.TargetsToBeDestroyed~ ()) Ident)~ Exe
							);
							(Init Movement.Init~)~ Exe
						);
						SetStartPos ias (
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeChecked (Unit Id~)->(CommandDispatcher)->UnitCommandParams~)^
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeSet Movement.State)^
							(Services.(PositionChecker Id~)->(CheckPosition)->OnMainField (BattleField BattleFieldId~)->(Fields)->(Main)->Nodes~)^
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeCheckedCtx (BattleField BattleFieldId~)->(Fields)->(Main)->Nodes)^
                                        	        Services.(PositionChecker Id~)->CheckPosition~ Exe
							((The unit Id~ has start position Movement.State~) Ew.Output~) Do
							((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
						);
						SetMoveToPos ias (
							(Walking true) ias (
								(Movement.Init true)^
								((Unit Id~)->(CommandDispatcher)->UnitCommandId go)^
							);
							(Walking false) ias (
								// goal reached and new goal set, no need to wait for go command
								(NewMovement true) ias (
									(Movement.Init true)^
									(Movement.PathPassed false)^
									(Movement.GoalReached false)^
									((Unit Id~)->(CommandDispatcher)->UnitCommandId go)^
								);
								(NewMovement false) ias (
									((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
								);
								(NewMovement Movement.PathPassed~)~ Exe
							);
							(MovementGoalCorrect true) ias (
								((The unit Id~ has finish positions Movement.Goals~) Ew.Output~) Do
								(Walking Movement.Walking~)~ Exe
							);
							(MovementGoalCorrect false) ias (
								(FollowingCommandGo true) ias (
									((Unit Id~)->(CommandDispatcher)->UnitCommandId go)^
								);
								(FollowingCommandGo false) ias (
									((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
								);
								(FollowingCommandGo Movement.Walking~)~ Exe
							);
							(Services.(PositionChecker Id~)->(CheckGoalPositions)->RollbackGoals Movement.Goals~)^
							(Movement.Goals (Unit Id~)->(CommandDispatcher)->UnitCommandParams~)^
							(Services.(PositionChecker Id~)->(CheckGoalPositions)->Correct true)^
							(Services.(PositionChecker Id~)->(CheckGoalPositions)->CheckedCtx (BattleField BattleFieldId~)->(Fields)->(Main)->Nodes)^ 
							(Services.(PositionChecker Id~)->(CheckGoalPositions)->Field (BattleField BattleFieldId~)->(Fields)->(Main)->Nodes~)^ 
							Services.(PositionChecker Id~)->CheckGoalPositions~ Exe
							(MovementGoalCorrect Services.(PositionChecker Id~)->(CheckGoalPositions)->Correct~)~ Exe
						);
					);
				);
			);
		);
	);
}
