module Characters {
	MagicWorld ias (
		Characters ias (
			/* general game unit */
			Unit ias (
				Properties ias (type attack defence);
				/* available unit's types  */
				Types ias (attacker defender);
				/* default type is attacker */
				Type ias attacker;
				Id ias nil;
				PlayerId ias nil;
				/* concrete unit */
				ConcreteUnit ias nil;
				/* unit's current position */
				CurrentPosition ias nil;
				/* true in case if unit should be stopped */
				StopUnit ias false;
				/* true in case if marked as killed, but not destroyed yet */
				MarkedAsKilled ias false;
				/* Performs initialization steps */
				Init ias (
					(Type attacker)^
					(ConcreteUnit nil)^
					(CurrentPosition nil)^
					(StopUnit false)^
					(MarkedAsKilled false)^
				);
				/* each unit has following properties: power of attack and defence */
				Power ias (
					Attack ias ();
					Defence ias ();
				);
				/* activates 'stay' command */
				Stay ias (CommandDispatcher.UnitCommandId stay)^;
				/* to be attacker */
				UnitAsAttacker ias (
					Create ias (
						((Player PlayerId~)->(Resources)->(Units)->LastAttackerDestroyed false)^
						(Attacker.Id Id~)^
						(Attacker.PlayerId PlayerId~)^
						(Attacker (Attacker Id~)) Born
						(ConcreteUnit Characters.(Attacker Id~))^
						LockAttackers [
							((Player PlayerId~)->(Resources)->(Units)->Attackers  
								((Player PlayerId~)->(Resources)->(Units)->Attackers~ (Id~)) Join
							)^
						LockAttackers ]
						((The attacker Id~ created and available attackers (Player PlayerId~)->(Resources)->(Units)->Attackers~) Ew.Output~) Do
					);
					Destroy ias (
						(NoRefreshPath true false),(NoRefreshPath false true),(NoRefreshPath true true) ias doNothing;
						(NoRefreshPath false false) ias (
							(PathFinder.PlayerId PlayerId~)^
							(PathFinder.FromUnit Id~)^
							PathFinder.UpdateUnitsSharedPath~ Exe
						);
						LockAttackers [
							((Player PlayerId~)->(Resources)->(Units)->Attackers  
								((Player PlayerId~)->(Resources)->(Units)->Attackers~ (Id~)) Substruct
							)^
							((The attacker Id~ destroyed and available attackers (Player PlayerId~)->(Resources)->(Units)->Attackers~) Ew.Output~) Do
							(LastAttackerDestroyed ((Player PlayerId~)->(Resources)->(Units)->Attackers~ ()) Ident)^
							((The lst attacker LastAttackerDestroyed~) Ew.Output~) Do
							(NoRefreshPath LastAttackerDestroyed~ (Player PlayerId~)->Stop~)~ Exe
							((Player PlayerId~)->(Resources)->(Units)->LastAttackerDestroyed LastAttackerDestroyed~)^
						LockAttackers ]
					);
				);
				/* to be defender */
				UnitAsDefender ias (
					Create ias (
						((Player PlayerId~)->(Resources)->(Units)->LastDefenderDestroyed false)^
						(Defender.Id Id~)^
						(Defender.PlayerId PlayerId~)^
						(Defender (Defender Id~)) Born
						(ConcreteUnit Characters.(Defender Id~))^
						LockDefenders [
							( (Player PlayerId~)->(Resources)->(Units)->Defenders
								((Player PlayerId~)->(Resources)->(Units)->Defenders~ (Id~)) Join
							)^
						LockDefenders ]
						((The defender Id~ created and available defenders (Player PlayerId~)->(Resources)->(Units)->Defenders~) Ew.Output~) Do
					);
					Destroy ias (
						LockDefenders [
							( (Player PlayerId~)->(Resources)->(Units)->Defenders
								( (Player PlayerId~)->(Resources)->(Units)->Defenders~ (Id~) ) Substruct
							)^
							((The defender Id~ destroyed and available defenders (Player PlayerId~)->(Resources)->(Units)->Defenders~) Ew.Output~) Do
							((Player PlayerId~)->(Units)->LastDefenderDestroyed ((Player PlayerId~)->(Resources)->(Units)->Defenders~ ()) Ident)^
						LockDefenders ]
					);
				);
				/* sets unit's property  */
				PropertySetOperation ias (
					Prop ias nil;
					Value ias nil;
					(RightProp false) ias (
						((The unit Id~ can not set invalid property named by Prop~) Ew.Output~) Do
					);
					(RightProp true) ias (
						(Property type) ias (
							(Create attacker) ias UnitAsAttacker.Create~ Exe;
							(Create defender) ias UnitAsDefender.Create~ Exe;
							(Type Value~)^
							(Create Type~)~ Exe
							((The concrete unit ConcreteUnit~) Ew.Output~) Do
							(ConcreteUnit~)->Init~ Exe
						);
						(Property attack) ias (
							(Power.Attack Value~)^
							((The unit Id~ has attack power Power.Attack~) Ew.Output~) Do
						);
						(Property defence) ias (
							(Power.Defence Value~)^
							((The unit Id~ has defence power Power.Defence~) Ew.Output~) Do
						);
						(Value ($~ 1) Get)^
						((The unit Id~ processes property Prop~ and value Value~) Ew.Output~) Do
						(Property Prop~)~ Exe
					);
					(Prop ($~ 0) Get)^
					((The unit Id~ received property Prop~) Ew.Output~) Do
					(RightProp (Properties~ Prop~) In)~ Exe 
				);
				GetCurrentPosition ias (
					(CurrentPositionNil true) ias (CurrentPosition (ConcreteUnit~)->(ActivityStrategy)->(Movement)->PrevState~)^;
					(CurrentPositionNil false) ias doNothing;
					(CurrentPosition (ConcreteUnit~)->(ActivityStrategy)->(Movement)->State~)^
					(CurrentPositionNil (CurrentPosition~ nil) Ident)~ Exe
				);
				/* unit receives commands in deferred manner */
				CommandDispatcher ias (
					Dispatch ias nil;
					LastUnitCommandId ias stay;
					UnitCommandId ias stay;
					UnitId ias nil;
					UnitCommandParams ias nil;

					(Handle stay) ias (
						UnitLifeStep~ Exe
					);
					(Handle stop) ias (
						((The unit Id~ received command stop) Ew.Output~) Do	
						(UnitCommandId stay)^
						UnitLifeStep~ Exe
					);
					(Handle go) ias (
						(ConcreteUnit~)->(ActivityStrategy)->(Movement)->CheckAndStart~ Exe
						UnitLifeStep~ Exe
					);
					(Handle movetopos) ias (
						(ConcreteUnit~)->(ActivityStrategy)->(Movement)->SetMoveToPos~ Exe
						UnitLifeStep~ Exe
					);
					(Handle startpos) ias (
						(ConcreteUnit~)->(ActivityStrategy)->(Movement)->SetStartPos~ Exe
						UnitLifeStep~ Exe
					);
					(Handle getpos) ias (
						UpdateCurrentPosition~ Exe
						((The unit Id~ has position CurrentPosition~) Ew.Output~) Do
						UnitLifeStep~ Exe
					);
					(Handle select) ias (
						(UnitCommandId LastUnitCommandId~)^
						UnitLifeStep~ Exe
					);
					(Handle setprops) ias (
						(UnitCommandParams~ PropertySetOperation~) ForEach
						UnitLifeStep~ Exe
					);
					(Handle kill) ias (
						(ConcreteUnit~)->(ActivityStrategy)->Kill~ Exe
						UnitLifeStep~ Exe
					);
					(NothingToDispatch true) ias doNothing;
					(NothingToDispatch false) ias (
						(LastUnitCommandId UnitCommandId~)^
						(UnitCommandId (Dispatch~ 1) Get)^
						(UnitId (Dispatch~ 2) Get)^
						(UnitCommandParams (Dispatch~ 3) Get)^
					);
					(NothingToDispatch (Dispatch~ nil) Ident)~ Exe
					(Handle UnitCommandId~)~ Exe
				);
				/* unit's lifestep */
				UnitLifeStep ias (
					(Stop false) ias (
						(ready false) ias (
							(CommandDispatcher.Dispatch nil)^
						);
						(ready true) ias (
							(CommandDispatcher.Dispatch ((Unit Id~) Rx) Gate)^
							((The unit Id~ received CommandDispatcher.Dispatch~) Ew.Output~) Do
						);
						(ready (((Unit Id~) Ready) Gate true) Ident)~ Exe
						CommandDispatcher~ Exe
					);
					(Stop true) ias (
						((The unit Id~ stopped) Ew.Output~) Do
					);
					(Stop StopUnit~)~ Exe
				);

				lifeterm = (
					((The unit Id~ was born) Ew.Output~) Do
					Init~ Exe
					UnitLifeStep~ Exe
				) Exe
			);
		);
	);
}