module Defender {
	MagicWorld ias (
		Characters ias (
			Defender ias (
				// unit id
				Id ias nil;
				// player id
				PlayerId ias nil;
				/* unit selected by player */
				Selected ias false;

				Init ias (
					ActivityStrategy.Init~ Exe
					((The defender Id~ for user PlayerId~ initialized) Ew.Output~) Do
				);
				ActivityStrategy ias (
					// initialization steps
					Init ias (
						(Services.PositionChecker (Services.PositionChecker Id~)) Born
					);
					Actions is (
						Defence ias (
							OnFire ias ();
							Observe ias (
								Position ias nil;	
								CheckFireZone ias (
									(OnFire false) ias doNothing;
									(OnFire true) ias (
										(OnFire (OnFire~ ($~)) Join)^
										((The attacker $~ can be attacked by defender Id~) Ew.Output~) Do
									);
									(Unit $~)->UpdateCurrentPosition~ Exe
									((The attacker $~ is on position (Unit $~)->CurrentPosition~) Ew.Output~) Do
									(OnFire (Position~ (Unit $~)->CurrentPosition~) Ident)~ Exe
								);
								(Position $~)^
								((The defender Id~ is checking position Position~) Ew.Output~) Do
								LockAttackers [
									((Player PlayerId~)->(Units)->Attackers~ CheckFireZone~) ForEach
								LockAttackers ]
							);
							(OnFire ())^
							((The defender Id~ observes zone Movement.State~) Ew.Output~) Do
							(Movement.State~ Observe~) ForEach
						);
					);
					Kill ias (
						((The defender Id~ was killed) Ew.Output~) Do
						(Characters)->(Unit Id~)->(UnitAsDefender)->Destroy~ Exe
						((Characters)->(Unit Id~)->StopUnit true)^
					);
					/* movement's parameters (stubs almost) */
					Movement ias (
						/* unit's position */
						State ias nil;
						SetStartPos ias (
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeChecked (Unit Id~)->(CommandDispatcher)->UnitCommandParams~)^
							(Services.(PositionChecker Id~)->(CheckPosition)->PosToBeSet Movement.State)^
							(Services.(PositionChecker Id~)->(CheckPosition)->OnMaze Ew.Maze.Defence.Nodes~)^
                        	                        Services.(PositionChecker Id~)->CheckPosition~ Exe
							((The unit Id~ has start position Movement.State~) Ew.Output~) Do
							((Unit Id~)->(CommandDispatcher)->UnitCommandId stay)^
						);
						/* unit was killed */
						SetMoveToPos ias doNothing;
						CheckAndStart ias Actions.Defence~ Exe;
					);
				);
			);
		);
	);
}
