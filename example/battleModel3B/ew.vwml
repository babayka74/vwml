module ExternalWorld {
	Ew ias (
		Maze ias (
			Attack ias (
				/* nodes marked as 'attacking' */
				Nodes ias ();
			);
			Defence ias (
				/* nodes marked as 'defence' */
				Nodes ias ();
			);
			/* all maze's nodes */
			Nodes ias ();
			MazePrototype ias (
				Stg ias nil;
				Ctx ias nil;
				(Node ($~ 0) Get)^
				(LinkedNodes ($~ 1) Get)^
				(Node~ Ctx~ true) Context
				(Node~ LinkedNodes~)^
				(Stg~ (Stg~~ (Node~)) Join)^
				((Connecting Node~ with LinkedNodes~ and list of nodes Stg~~ on context Ctx~) Ew.Output~) Do
			);
			BuildMainZone ias (
				(MazePrototype.Stg Nodes)^
				(MazePrototype.Ctx Ew.Maze)^
				MazePrototype~ Exe
			);
			// attack firezones
			BuildAttackFireZone ias (
				(MazePrototype.Stg Attack.Nodes)^
				(MazePrototype.Ctx Ew.Maze.Attack)^
				MazePrototype~ Exe
			);
			// defence firezone
			BuildDefenceFireZone ias (
				(MazePrototype.Stg Defence.Nodes)^
				(MazePrototype.Ctx Ew.Maze.Defence)^
				MazePrototype~ Exe
			);
			Initial ias (	(battleField BuildMainZone Ew.Maze)
					(attackFireZoneField BuildAttackFireZone Ew.Maze.Attack)  
					(defenceFireZoneField BuildDefenceFireZone Ew.Maze.Defence)
				);
			MazeBuilder ias (((($~ 0) Get) Ew.LoadGraph~ ($~ 2) Get) Do ($~ 1) Get ~) ForEach;
			/* builds: battlefield, atackers' firezone, defenders' firezone */
			(Initial~ MazeBuilder~) ForEach
		);

		TargetsToBeDestroyed ias ((17 10));
		ConfiguredNumOfRequestedSteps ias 4;
		Input ias communication.in.read;
		Output ias communication.in.write;
		// MoveUnit ias communication.outchannel.move;
		IncIteration ias services.math.inc;
		DecValue ias services.math.dec;
		LoadGraph ias services.graph.load;
	);
}
